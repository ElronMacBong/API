{
    "CBaseEntity": {
        "functions": {
            "FirstMoveChild": {
                "args": [],
                "return": "CBaseEntity"
            },
            "FollowEntity": {
                "arg_names": [
                    "hEnt",
                    "bBoneMerge"
                ],
                "args": [
                    "CBaseEntity",
                    "bool"
                ],
                "description": "hEntity to follow, bool bBoneMerge",
                "return": "void"
            },
            "GetMoveParent": {
                "args": [],
                "description": "If in hierarchy, retrieves the entity's parent.",
                "return": "CBaseEntity"
            },
            "GetOwner": {
                "args": [],
                "description": "Gets this entity's owner",
                "return": "CBaseEntity"
            },
            "GetOwnerEntity": {
                "args": [],
                "description": "Get the owner entity, if there is one",
                "return": "CBaseEntity"
            },
            "GetRootMoveParent": {
                "args": [],
                "description": "If in hierarchy, walks up the hierarchy to find the root parent.",
                "return": "CBaseEntity"
            },
            "GetTeam": {
                "args": [],
                "description": "Get the team number of this entity.",
                "return": "DOTATeam_t"
            },
            "GetTeamNumber": {
                "args": [],
                "description": "Get the team number of this entity.",
                "return": "DOTATeam_t"
            },
            "NextMovePeer": {
                "args": [],
                "return": "CBaseEntity"
            },
            "SetOwner": {
                "arg_names": [
                    "pOwner"
                ],
                "args": [
                    "CBaseEntity"
                ],
                "description": "Sets this entity's owner",
                "return": "void"
            },
            "SetTeam": {
                "arg_names": [
                    "iTeamNum"
                ],
                "args": [
                    "DOTATeam_t"
                ],
                "return": "void"
            }
        }
    },
    "CBaseTrigger": {
        "functions": {
            "IsTouching": {
                "arg_names": [
                    "hEnt"
                ],
                "args": [
                    "CBaseEntity"
                ],
                "description": "Checks whether the passed entity is touching the trigger.",
                "return": "bool"
            }
        }
    },
    "CCustomGameEventManager": {
        "functions": {
            "RegisterListener": {
                "args": [
                    "cstring",
                    "function"
                ],
                "description": "( string EventName, func CallbackFunction ) - Register a callback to be called when a particular custom event arrives. Returns a listener ID that can be used to unregister later.",
                "return": "CCustomGameEventListener",
                "arg_names": {
                    "0": "eventName",
                    "1": "handler"
                }
            },
            "Send_ServerToAllClients": {
                "args": [
                    "cstring",
                    "table"
                ],
                "description": "( string EventName, table EventData )",
                "return": "void",
                "arg_names": {
                    "0": "eventName",
                    "1": "eventData"
                }
            },
            "Send_ServerToPlayer": {
                "args": [
                    "CDOTAPlayer",
                    "cstring",
                    "table"
                ],
                "description": "( Entity Player, string EventName, table EventData )",
                "return": "void",
                "arg_names": {
                    "0": "player",
                    "1": "eventName",
                    "2": "eventData"
                }
            },
            "Send_ServerToTeam": {
                "args": [
                    "DOTATeam_t",
                    "cstring",
                    "table"
                ],
                "description": "( int TeamNumber, string EventName, table EventData )",
                "return": "void",
                "arg_names": {
                    "0": "team",
                    "1": "eventName",
                    "2": "eventData"
                }
            },
            "UnregisterListener": {
                "args": [
                    "CCustomGameEventListener"
                ],
                "description": "( int ListnerID ) - Unregister a specific listener",
                "return": "void",
                "arg_names": {
                    "0": "listener"
                }
            }
        }
    },
    "CDOTABaseAbility": {
        "functions": {
            "CanAbilityBeUpgraded": {
                "args": [],
                "return": "boolean"
            },
            "GetAbilityDamageType": {
                "args": [],
                "return": "DAMAGE_TYPES"
            },
            "GetAbilityKeyValues": {
                "args": [],
                "description": "Gets the key values definition for this ability.",
                "return": "table"
            },
            "GetAbilityTargetFlags": {
                "args": [],
                "return": "DOTA_UNIT_TARGET_FLAGS"
            },
            "GetAbilityTargetTeam": {
                "args": [],
                "return": "DOTA_UNIT_TARGET_TEAM"
            },
            "GetAbilityTargetType": {
                "args": [],
                "return": "DOTA_UNIT_TARGET_TYPE"
            },
            "GetCastRange": {
                "arg_names": [
                    "vLocation",
                    "hTarget"
                ],
                "args": [
                    "vector",
                    "CDOTA_BaseNPC"
                ],
                "description": "Gets the cast range of the ability.",
                "return": "int"
            },
            "GetCaster": {
                "args": [],
                "return": "CDOTA_BaseNPC"
            },
            "GetCloneSource": {
                "args": [],
                "return": "CDOTA_BaseNPC"
            },
            "GetCursorTarget": {
                "args": [],
                "return": "CDOTA_BaseNPC"
            },
            "GetLevelSpecialValueFor": {
                "arg_names": [
                    "valueName",
                    "nLevel"
                ],
                "args": [
                    "cstring",
                    "int"
                ],
                "return": "number"
            },
            "GetSpecialValueFor": {
                "arg_names": [
                    "valueName"
                ],
                "args": [
                    "cstring"
                ],
                "description": "Gets a value from this ability's special value block for its current level.",
                "return": "number"
            },
            "IsCosmetic": {
                "arg_names": [
                    "hEntity"
                ],
                "args": [
                    "CBaseEntity"
                ],
                "return": "bool"
            }
        }
    },
    "CDOTABaseGameMode": {
        "functions": {
            "SetAbilityTuningValueFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control the tuning values that abilities use. (Modify the table and Return true to use new values, return false to use the old values)",
                "return": "void"
            },
            "SetBountyRunePickupFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control the behavior when a bounty rune is picked up. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void"
            },
            "SetCustomHeroMaxLevel": {
                "arg_names": [
                    "iMaxLevel"
                ],
                "args": [
                    "int"
                ],
                "description": "Allows definition of the max level heroes can achieve (default is 25).",
                "return": "void"
            },
            "SetCustomXPRequiredToReachNextLevel": {
                "arg_names": [
                    "hTable"
                ],
                "args": [
                    "table"
                ],
                "description": "Allows definition of a table of hero XP values.",
                "return": "void"
            },
            "SetDamageFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control the behavior when a unit takes damage. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void"
            },
            "SetExecuteOrderFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(order: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control the behavior when a unit picks up an item. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void"
            },
            "SetHUDVisible": {
                "arg_names": [
                    "iHUDElement",
                    "bVisible"
                ],
                "args": [
                    "DOTAHUDVisibility_t",
                    "bool"
                ],
                "description": "Set the HUD element visibility.",
                "return": "void"
            },
            "SetHealingFilter": {
                "arg_names": [
                    "hFunction",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control the behavior when a unit heals. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void"
            },
            "SetItemAddedToInventoryFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control what happens to items that are added to an inventory, return false to cancel the event",
                "return": "void"
            },
            "SetModifierGainedFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control modifiers that are gained, return false to destroy modifier.",
                "return": "void"
            },
            "SetModifyExperienceFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control the behavior when a hero's experience is modified. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void"
            },
            "SetModifyGoldFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control the behavior when a hero's gold is modified. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void"
            },
            "SetOverrideSelectionEntity": {
                "arg_names": [
                    "hOverrideEntity"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Set an override for the default selection entity, instead of each player's hero.",
                "return": "void"
            },
            "SetRuneEnabled": {
                "arg_names": [
                    "nRune",
                    "bEnabled"
                ],
                "args": [
                    "DOTA_RUNES",
                    "bool"
                ],
                "description": "Set if a given type of rune is enabled.",
                "return": "void"
            },
            "SetRuneSpawnFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control what rune spawns. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void"
            },
            "SetTopBarTeamValue": {
                "arg_names": [
                    "iTeam",
                    "nValue"
                ],
                "args": [
                    "DOTATeam_t",
                    "int"
                ],
                "description": "Set the team values on the top game bar.",
                "return": "void"
            },
            "SetTrackingProjectileFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control when tracking projectiles are launched. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void"
            }
        }
    },
    "CDOTAGamerules": {
        "functions": {
            "BeginNightstalkerNight": {
                "args": [
                    "float"
                ],
                "description": "Begin night stalker night.",
                "return": "void",
                "arg_names": {
                    "0": "duration"
                }
            },
            "BeginTemporaryNight": {
                "args": [
                    "float"
                ],
                "description": "Begin temporary night.",
                "return": "void",
                "arg_names": {
                    "0": "duration"
                }
            },
            "EnableCustomGameSetupAutoLaunch": {
                "args": [
                    "bool"
                ],
                "description": "Enabled (true) or disable (false) auto launch for custom game setup.",
                "return": "void",
                "arg_names": {
                    "0": "enabled"
                }
            },
            "GetCustomGameTeamMaxPlayers": {
                "args": [
                    "DOTATeam_t"
                ],
                "description": "Get whether a team is selectable during game setup",
                "return": "int",
                "arg_names": {
                    "0": "team"
                }
            },
            "GetDOTATime": {
                "args": [
                    "bool",
                    "bool"
                ],
                "description": "(b IncludePregameTime b IncludeNegativeTime) Returns the actual DOTA in-game clock time.",
                "return": "float",
                "arg_names": {
                    "0": "includePreGame",
                    "1": "includeNegativeTime"
                }
            },
            "GetDroppedItem": {
                "args": [
                    "int"
                ],
                "description": "Gets the Xth dropped item",
                "return": "CDOTA_Item",
                "arg_names": {
                    "0": "index"
                }
            },
            "GetGameModeEntity": {
                "args": [],
                "description": "Get the game mode entity",
                "return": "CDOTABaseGameMode"
            },
            "GetMatchID": {
                "args": [],
                "description": "Get the MatchID for this game.",
                "return": "number"
            },
            "LockCustomGameSetupTeamAssignment": {
                "args": [
                    "bool"
                ],
                "description": "Lock (true) or unlock (false) team assignemnt. If team assignment is locked players cannot change teams.",
                "return": "void",
                "arg_names": {
                    "0": "locked"
                }
            },
            "MakeTeamLose": {
                "args": [
                    "DOTATeam_t"
                ],
                "description": "Makes the specified team lose",
                "return": "void",
                "arg_names": {
                    "0": "team"
                }
            },
            "PlayerHasCustomGameHostPrivileges": {
                "args": [
                    "CDOTAPlayer"
                ],
                "description": "Whether a player has custom game host privileges (shuffle teams, etc.)",
                "return": "bool",
                "arg_names": {
                    "0": "player"
                }
            },
            "SetCreepMinimapIconScale": {
                "args": [
                    "float"
                ],
                "description": "(flMinimapCreepIconScale) - Scale the creep icons on the minimap.",
                "return": "void",
                "arg_names": {
                    "0": "scale"
                }
            },
            "SetCustomGameAllowBattleMusic": {
                "args": [
                    "bool"
                ],
                "description": "Sets a flag to enable/disable the default music handling code for custom games",
                "return": "void",
                "arg_names": {
                    "0": "allow"
                }
            },
            "SetCustomGameAllowHeroPickMusic": {
                "args": [
                    "bool"
                ],
                "description": "Sets a flag to enable/disable the default music handling code for custom games",
                "return": "void",
                "arg_names": {
                    "0": "allow"
                }
            },
            "SetCustomGameAllowMusicAtGameStart": {
                "args": [
                    "bool"
                ],
                "description": "Sets a flag to enable/disable the default music handling code for custom games",
                "return": "void",
                "arg_names": {
                    "0": "allow"
                }
            },
            "SetCustomGameDifficulty": {
                "args": [
                    "int"
                ],
                "description": "Set the difficulty level of the custom game mode",
                "return": "void",
                "arg_names": {
                    "0": "difficulty"
                }
            },
            "SetCustomGameEndDelay": {
                "args": [
                    "float"
                ],
                "description": "Sets the game end delay.",
                "return": "void",
                "arg_names": {
                    "0": "delay"
                }
            },
            "SetCustomGameSetupAutoLaunchDelay": {
                "args": [
                    "float"
                ],
                "description": "Set the amount of time to wait for auto launch.",
                "return": "void",
                "arg_names": {
                    "0": "delay"
                }
            },
            "SetCustomGameSetupRemainingTime": {
                "args": [
                    "float"
                ],
                "description": "Set the amount of remaining time, in seconds, for custom game setup. 0 = finish immediately, -1 = wait forever",
                "return": "void",
                "arg_names": {
                    "0": "remainingTime"
                }
            },
            "SetCustomGameSetupTimeout": {
                "args": [
                    "float"
                ],
                "description": "Setup (pre-gameplay) phase timeout. 0 = instant, -1 = forever (until FinishCustomGameSetup is called)",
                "return": "void",
                "arg_names": {
                    "0": "timeout"
                }
            },
            "SetCustomGameTeamMaxPlayers": {
                "args": [
                    "DOTATeam_t",
                    "int"
                ],
                "description": "Set whether a team is selectable during game setup",
                "return": "void",
                "arg_names": {
                    "0": "team",
                    "1": "maxPlayers"
                }
            },
            "SetCustomVictoryMessage": {
                "args": [
                    "cstring"
                ],
                "description": "Sets the victory message.",
                "return": "void",
                "arg_names": {
                    "0": "message"
                }
            },
            "SetCustomVictoryMessageDuration": {
                "args": [
                    "float"
                ],
                "description": "Sets the victory message duration.",
                "return": "void",
                "arg_names": {
                    "0": "duration"
                }
            },
            "SetFirstBloodActive": {
                "args": [
                    "bool"
                ],
                "description": "Sets whether First Blood has been triggered.",
                "return": "void",
                "arg_names": {
                    "0": "active"
                }
            },
            "SetGameWinner": {
                "args": [
                    "DOTATeam_t"
                ],
                "description": "Makes the specified team win",
                "return": "void",
                "arg_names": {
                    "0": "team"
                }
            },
            "SetGoldPerTick": {
                "args": [
                    "int"
                ],
                "description": "Set the auto gold increase per timed interval.",
                "return": "void",
                "arg_names": {
                    "0": "amount"
                }
            },
            "SetGoldTickTime": {
                "args": [
                    "float"
                ],
                "description": "Set the time interval between auto gold increases.",
                "return": "void",
                "arg_names": {
                    "0": "time"
                }
            },
            "SetHeroMinimapIconScale": {
                "args": [
                    "float"
                ],
                "description": "(flMinimapHeroIconScale) - Scale the hero minimap icons on the minimap.",
                "return": "void",
                "arg_names": {
                    "0": "scale"
                }
            },
            "SetHeroRespawnEnabled": {
                "args": [
                    "bool"
                ],
                "description": "Control if the normal DOTA hero respawn rules apply.",
                "return": "void",
                "arg_names": {
                    "0": "enabled"
                }
            },
            "SetHeroSelectionTime": {
                "args": [
                    "float"
                ],
                "description": "Sets the amount of time players have to pick their hero.",
                "return": "void",
                "arg_names": {
                    "0": "selectionTime"
                }
            },
            "SetHideKillMessageHeaders": {
                "args": [
                    "bool"
                ],
                "description": "Sets whether the multikill, streak, and first-blood banners appear at the top of the screen.",
                "return": "void",
                "arg_names": {
                    "0": "hideHeaders"
                }
            },
            "SetOverlayHealthBarUnit": {
                "args": [
                    "CDOTA_BaseNPC",
                    "int"
                ],
                "description": "Show this unit's health on the overlay health bar",
                "return": "void",
                "arg_names": {
                    "0": "unit",
                    "1": "style"
                }
            },
            "SetPostGameTime": {
                "args": [
                    "float"
                ],
                "description": "Sets the amount of time players have between the game ending and the server disconnecting them.",
                "return": "void",
                "arg_names": {
                    "0": "time"
                }
            },
            "SetPreGameTime": {
                "args": [
                    "float"
                ],
                "description": "Sets the amount of time players have between picking their hero and game start.",
                "return": "void",
                "arg_names": {
                    "0": "time"
                }
            },
            "SetRuneMinimapIconScale": {
                "args": [
                    "float"
                ],
                "description": "(flMinimapRuneIconScale) - Scale the rune icons on the minimap.",
                "return": "void",
                "arg_names": {
                    "0": "flMinimapRuneIconScale"
                }
            },
            "SetRuneSpawnTime": {
                "args": [
                    "float"
                ],
                "description": "Sets the amount of time between rune spawns.",
                "return": "void",
                "arg_names": {
                    "0": "time"
                }
            },
            "SetSafeToLeave": {
                "args": [
                    "bool"
                ],
                "description": "(bSafeToLeave) - Mark this game as safe to leave.",
                "return": "void",
                "arg_names": {
                    "0": "bSafeToLeave"
                }
            },
            "SetSameHeroSelectionEnabled": {
                "args": [
                    "bool"
                ],
                "description": "When true, players can repeatedly pick the same hero.",
                "return": "void",
                "arg_names": {
                    "0": "enabled"
                }
            },
            "SetShowcaseTime": {
                "args": [
                    "float"
                ],
                "description": "Sets the amount of time players have between the strategy phase and entering the pre-game phase.",
                "return": "void",
                "arg_names": {
                    "0": "time"
                }
            },
            "SetStartingGold": {
                "args": [
                    "int"
                ],
                "description": "Set the starting gold amount.",
                "return": "void",
                "arg_names": {
                    "0": "amount"
                }
            },
            "SetStrategyTime": {
                "args": [
                    "float"
                ],
                "description": "Sets the amount of time players have between the hero selection and entering the showcase phase.",
                "return": "void",
                "arg_names": {
                    "0": "time"
                }
            },
            "SetTimeOfDay": {
                "args": [
                    "float"
                ],
                "description": "Set the time of day.",
                "return": "void",
                "arg_names": {
                    "0": "time"
                }
            },
            "SetTreeRegrowTime": {
                "args": [
                    "float"
                ],
                "description": "Sets the tree regrow time in seconds.",
                "return": "void",
                "arg_names": {
                    "0": "time"
                }
            },
            "SetUseBaseGoldBountyOnHeroes": {
                "args": [
                    "bool"
                ],
                "description": "Heroes will use the basic NPC functionality for determining their bounty, rather than DOTA specific formulas.",
                "return": "void",
                "arg_names": {
                    "0": "useBaseGoldBounties"
                }
            },
            "SetUseCustomHeroXPValues": {
                "args": [
                    "bool"
                ],
                "description": "Allows heroes in the map to give a specific amount of XP (this value must be set).",
                "return": "void",
                "arg_names": {
                    "0": "useCustomXPValues"
                }
            },
            "SetUseUniversalShopMode": {
                "args": [
                    "bool"
                ],
                "description": "When true, all items are available at as long as any shop is in range.",
                "return": "void",
                "arg_names": {
                    "0": "useUniversalShopMode"
                }
            },
            "State_Get": {
                "args": [],
                "description": "Get the current Gamerules state",
                "return": "DOTA_GameState"
            }
        }
    },
    "CDOTAPlayer": {
        "functions": {
            "GetAssignedHero": {
                "args": [],
                "description": "Get the player's hero.",
                "return": "CDOTA_BaseNPC_Hero"
            },
            "SetKillCamUnit": {
                "arg_names": [
                    "hEntity"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Set the kill cam unit for this hero.",
                "return": "void"
            }
        }
    },
    "CDOTATutorial": {
        "functions": {
            "AddBot": {
                "args": [
                    "cstring",
                    "cstring",
                    "cstring",
                    "bool"
                ],
                "description": "Add a computer controlled bot.",
                "return": "bool",
                "arg_names": {
                    "0": "heroName",
                    "1": "unknown1",
                    "2": "unknown2",
                    "3": "unknown3"
                }
            },
            "AddShopWhitelistItem": {
                "args": [
                    "cstring"
                ],
                "description": "Add an item to the shop whitelist.",
                "return": "void",
                "arg_names": {
                    "0": "itemName"
                }
            },
            "IsItemInWhiteList": {
                "args": [
                    "cstring"
                ],
                "description": "Is this item currently in the white list.",
                "return": "bool",
                "arg_names": {
                    "0": "itemName"
                }
            },
            "RemoveShopWhitelistItem": {
                "args": [
                    "cstring"
                ],
                "description": "Remove an item from the shop whitelist.",
                "return": "void",
                "arg_names": {
                    "0": "itemName"
                }
            },
            "SelectHero": {
                "args": [
                    "cstring"
                ],
                "description": "Select a hero for the local player",
                "return": "void",
                "arg_names": {
                    "0": "heroName"
                }
            },
            "SetOrModifyPlayerGold": {
                "args": [
                    "int",
                    "bool"
                ],
                "description": "Set gold amount for the tutorial player. (int) GoldAmount, (bool) true=Set, false=Modify",
                "return": "void",
                "arg_names": {
                    "0": "goldAmount",
                    "1": "setNotModify"
                }
            },
            "SetQuickBuy": {
                "args": [
                    "cstring"
                ],
                "description": "Set players quick buy item.",
                "return": "void",
                "arg_names": {
                    "0": "itemName"
                }
            },
            "SetShopOpen": {
                "args": [
                    "bool"
                ],
                "description": "Set the shop open or closed.",
                "return": "void",
                "arg_names": {
                    "0": "open"
                }
            },
            "SetTimeFrozen": {
                "args": [
                    "bool"
                ],
                "description": "Set if we should freeze time or not.",
                "return": "void",
                "arg_names": {
                    "0": "timeFrozen"
                }
            },
            "SetWhiteListEnabled": {
                "args": [
                    "bool"
                ],
                "description": "Set if we should whitelist shop items.",
                "return": "void",
                "arg_names": {
                    "0": "whitelistEnabled"
                }
            },
            "UpgradePlayerAbility": {
                "args": [
                    "cstring"
                ],
                "description": "Upgrade a specific ability for the local hero",
                "return": "void",
                "arg_names": {
                    "0": "abilityName"
                }
            }
        }
    },
    "CDOTA_Ability_DataDriven": {
        "functions": {
            "ApplyDataDrivenModifier": {
                "arg_names": [
                    "caster",
                    "target",
                    "modifier_name",
                    "modifier_table"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "CDOTA_BaseNPC",
                    "string",
                    "table"
                ],
                "description": "Applies a data driven modifier to the target",
                "return": "CDOTA_Buff"
            }
        }
    },
    "CDOTA_Ability_Lua": {
        "functions": {
            "CastFilterResult": {
                "args": [],
                "description": "Determine whether an issued command with no target is valid.",
                "return": "UnitFilterResult"
            },
            "CastFilterResultLocation": {
                "arg_names": [
                    "vLocation"
                ],
                "args": [
                    "vector"
                ],
                "description": "(Vector vLocation) Determine whether an issued command on a location is valid.",
                "return": "UnitFilterResult"
            },
            "CastFilterResultTarget": {
                "arg_names": [
                    "hTarget"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "(HSCRIPT hTarget) Determine whether an issued command on a target is valid.",
                "return": "UnitFilterResult"
            },
            "GetBehavior": {
                "args": [],
                "description": "Return cast behavior type of this ability.",
                "return": "DOTA_ABILITY_BEHAVIOR"
            },
            "GetCastAnimation": {
                "args": [],
                "description": "Return casting animation of this ability.",
                "return": "GameActivity_t"
            },
            "GetCastRange": {
                "arg_names": [
                    "vLocation",
                    "hTarget"
                ],
                "args": [
                    "vector",
                    "CDOTA_BaseNPC"
                ],
                "description": "Return cast range of this ability.",
                "return": "int"
            },
            "GetChannelAnimation": {
                "args": [],
                "description": "Return channel animation of this ability.",
                "return": "GameActivity_t"
            },
            "GetCustomCastErrorTarget": {
                "arg_names": [
                    "hTarget"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "(HSCRIPT hTarget) Return the error string of a failed command on a target.",
                "return": "cstring"
            },
            "OnHeroDiedNearby": {
                "arg_names": [
                    "unit",
                    "attacker",
                    "event"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "CDOTA_BaseNPC",
                    "table"
                ],
                "description": "A hero has died in the vicinity (ie Urn), takes table of params.",
                "return": "void"
            },
            "OnItemEquipped": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "( HSCRIPT hItem ) Caster equipped item.",
                "return": "void"
            },
            "OnProjectileHit": {
                "arg_names": [
                    "hTarget",
                    "vLocation"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "vector"
                ],
                "description": "(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid).",
                "return": "bool"
            },
            "OnProjectileHitHandle": {
                "arg_names": [
                    "hTarget",
                    "vLocation",
                    "iProjectileHandle"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "vector",
                    "CProjectileID"
                ],
                "description": "(HSCRIPT hTarget, Vector vLocation, int nHandle) Projectile has collided with a given target or reached its destination (target is invalid).",
                "return": "bool"
            },
            "OnProjectileHit_ExtraData": {
                "arg_names": [
                    "hTarget",
                    "vLocation",
                    "data"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "vector",
                    "table"
                ],
                "description": "(HSCRIPT hTarget, Vector vLocation, table kv) Projectile has collided with a given target or reached its destination (target is invalid).",
                "return": "bool"
            },
            "OnProjectileThinkHandle": {
                "arg_names": [
                    "iProjectileHandle"
                ],
                "args": [
                    "CProjectileID"
                ],
                "description": "(int nProjectileHandle) Projectile is actively moving.",
                "return": "void"
            },
            "OnProjectileThink_ExtraData": {
                "arg_names": [
                    "vLocation",
                    "data"
                ],
                "args": [
                    "vector",
                    "table"
                ],
                "description": "(Vector vLocation, table kv ) Projectile is actively moving.",
                "return": "void"
            },
            "OnStolen": {
                "arg_names": [
                    "hSourceAbility"
                ],
                "args": [
                    "CDOTABaseAbility"
                ],
                "description": "( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal.",
                "return": "void"
            }
        }
    },
    "CDOTA_BaseNPC": {
        "functions": {
            "AddAbility": {
                "arg_names": [
                    "ability_name"
                ],
                "args": [
                    "string"
                ],
                "description": "Add an ability to this unit by name.",
                "return": "CDOTABaseAbility"
            },
            "AddItem": {
                "arg_names": [
                    "item_to_add"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "Add an item to this unit's inventory.",
                "return": "CDOTA_Item"
            },
            "AddItemByName": {
                "arg_names": [
                    "item_name"
                ],
                "args": [
                    "string"
                ],
                "description": "Add an item to this unit's inventory.",
                "return": "CDOTA_Item"
            },
            "AddNewModifier": {
                "arg_names": [
                    "caster",
                    "source_ability",
                    "modifier_name",
                    "modifier_table"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "CDOTABaseAbility",
                    "string",
                    "table"
                ],
                "description": "Add a modifier to this unit.",
                "return": "CDOTA_Buff"
            },
            "AlertNearbyUnits": {
                "arg_names": [
                    "hAttacker",
                    "hAbility"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "CDOTABaseAbility"
                ],
                "return": "void"
            },
            "CanEntityBeSeenByMyTeam": {
                "arg_names": [
                    "hEntity"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Check FoW to see if an entity is visible.",
                "return": "bool"
            },
            "CastAbilityImmediately": {
                "arg_names": [
                    "hAbility",
                    "iPlayerIndex"
                ],
                "args": [
                    "CDOTABaseAbility",
                    "int"
                ],
                "description": "Cast an ability immediately.",
                "return": "void"
            },
            "CastAbilityNoTarget": {
                "arg_names": [
                    "hAbility",
                    "iPlayerIndex"
                ],
                "args": [
                    "CDOTABaseAbility",
                    "int"
                ],
                "description": "Cast an ability with no target.",
                "return": "void"
            },
            "CastAbilityOnPosition": {
                "arg_names": [
                    "vPosition",
                    "hAbility",
                    "iPlayerIndex"
                ],
                "args": [
                    "vector",
                    "CDOTABaseAbility",
                    "int"
                ],
                "description": "Cast an ability on a position.",
                "return": "void"
            },
            "CastAbilityOnTarget": {
                "arg_names": [
                    "hTarget",
                    "hAbility",
                    "iPlayerIndex"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "CDOTABaseAbility",
                    "int"
                ],
                "description": "Cast an ability on a target entity.",
                "return": "void"
            },
            "CastAbilityToggle": {
                "arg_names": [
                    "hAbility",
                    "iPlayerIndex"
                ],
                "args": [
                    "CDOTABaseAbility",
                    "int"
                ],
                "description": "Toggle an ability.",
                "return": "void"
            },
            "DisassembleItem": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "Disassemble the passed item in this unit's inventory.",
                "return": "void"
            },
            "DropItemAtPosition": {
                "arg_names": [
                    "vDest",
                    "hItem"
                ],
                "args": [
                    "vector",
                    "CDOTA_Item"
                ],
                "description": "Drop an item at a given point.",
                "return": "void"
            },
            "DropItemAtPositionImmediate": {
                "arg_names": [
                    "hItem",
                    "vPosition"
                ],
                "args": [
                    "CDOTA_Item",
                    "vector"
                ],
                "description": "Immediately drop a carried item at a given position.",
                "return": "void"
            },
            "EjectItemFromStash": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "Drops the selected item out of this unit's stash.",
                "return": "void"
            },
            "FadeGesture": {
                "arg_names": [
                    "nActivity"
                ],
                "args": [
                    "GameActivity_t"
                ],
                "description": "Fade and remove the given gesture activity.",
                "return": "void"
            },
            "FindAbilityByName": {
                "arg_names": [
                    "ability_name"
                ],
                "args": [
                    "string"
                ],
                "description": "Retrieve an ability by name from the unit.",
                "return": "CDOTABaseAbility"
            },
            "FindAllModifiers": {
                "args": [],
                "description": "Returns a table of all of the modifiers on the NPC.",
                "return": "CDOTA_Buff[]"
            },
            "FindAllModifiersByName": {
                "arg_names": [
                    "name"
                ],
                "args": [
                    "string"
                ],
                "description": "Returns a table of all of the modifiers on the NPC with the passed name (modifierName)",
                "return": "CDOTA_Buff[]"
            },
            "FindItemInInventory": {
                "arg_names": [
                    "item_name"
                ],
                "args": [
                    "string"
                ],
                "description": "Get handle to first item in inventory, else nil.",
                "return": "CDOTA_Item"
            },
            "FindModifierByName": {
                "arg_names": [
                    "modifier_name"
                ],
                "args": [
                    "string"
                ],
                "description": "Return a handle to the modifier of the given name if found, else nil (string Name )",
                "return": "CDOTA_Buff"
            },
            "FindModifierByNameAndCaster": {
                "arg_names": [
                    "modifier_name",
                    "caster"
                ],
                "args": [
                    "string",
                    "CDOTA_BaseNPC"
                ],
                "description": "Return a handle to the modifier of the given name from the passed caster if found, else nil ( string Name, hCaster )",
                "return": "CDOTA_Buff"
            },
            "ForcePlayActivityOnce": {
                "arg_names": [
                    "nActivity"
                ],
                "args": [
                    "GameActivity_t"
                ],
                "description": "Play an activity once, and then go back to idle.",
                "return": "void"
            },
            "GetAbilityByIndex": {
                "arg_names": [
                    "ability_index"
                ],
                "args": [
                    "number"
                ],
                "description": "Retrieve an ability by index from the unit.",
                "return": "CDOTABaseAbility"
            },
            "GetAggroTarget": {
                "args": [],
                "description": "Returns this unit's aggro target.",
                "return": "CDOTA_BaseNPC"
            },
            "GetAttackCapability": {
                "args": [],
                "return": "DOTAUnitAttackCapability_t"
            },
            "GetAttackTarget": {
                "args": [],
                "return": "CDOTA_BaseNPC"
            },
            "GetAverageTrueAttackDamage": {
                "arg_names": [
                    "hTarget"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Returns the average value of the minimum and maximum damage values.",
                "return": "int"
            },
            "GetCloneSource": {
                "args": [],
                "description": "Get clone source (Meepo Prime, if this is a Meepo)",
                "return": "CDOTA_BaseNPC"
            },
            "GetCurrentActiveAbility": {
                "args": [],
                "description": "Get the ability this unit is currently casting.",
                "return": "CDOTABaseAbility"
            },
            "GetCursorCastTarget": {
                "args": [],
                "return": "CDOTA_BaseNPC"
            },
            "GetForceAttackTarget": {
                "args": [],
                "return": "CDOTA_BaseNPC"
            },
            "GetInitialGoalEntity": {
                "args": [],
                "description": "Returns the initial waypoint goal for this NPC.",
                "return": "CBaseEntity"
            },
            "GetItemInSlot": {
                "arg_names": [
                    "slot"
                ],
                "args": [
                    "int"
                ],
                "description": "Returns nth item in inventory slot (index is zero based).",
                "return": "CDOTA_Item"
            },
            "GetModifierStackCount": {
                "arg_names": [
                    "modifierName",
                    "hCaster"
                ],
                "args": [
                    "cstring",
                    "CDOTA_BaseNPC"
                ],
                "description": "Gets the stack count of a given modifier.",
                "return": "int"
            },
            "GetOpposingTeamNumber": {
                "args": [],
                "return": "DOTATeam_t"
            },
            "GetPlayerOwner": {
                "args": [],
                "description": "Returns the player that owns this unit.",
                "return": "CDOTAPlayer"
            },
            "GetPlayerOwnerID": {
                "args": [],
                "description": "Get the owner player ID for this unit.",
                "return": "PlayerID"
            },
            "GetRangeToUnit": {
                "arg_names": [
                    "hNPC"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "return": "float"
            },
            "Heal": {
                "arg_names": [
                    "flAmount",
                    "hInflictor"
                ],
                "args": [
                    "float",
                    "CDOTA_BaseNPC"
                ],
                "description": "Heal this unit.",
                "return": "void"
            },
            "IsAttackingEntity": {
                "arg_names": [
                    "hEntity"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "return": "bool"
            },
            "IsOpposingTeam": {
                "arg_names": [
                    "nTeam"
                ],
                "args": [
                    "DOTATeam_t"
                ],
                "return": "bool"
            },
            "Kill": {
                "arg_names": [
                    "hAbility",
                    "hAttacker"
                ],
                "args": [
                    "CDOTABaseAbility",
                    "CDOTA_BaseNPC"
                ],
                "description": "Kills this NPC, with the params Ability and Attacker.",
                "return": "void"
            },
            "MakeVisibleDueToAttack": {
                "arg_names": [
                    "iTeam"
                ],
                "args": [
                    "DOTATeam_t"
                ],
                "return": "void"
            },
            "MakeVisibleToTeam": {
                "arg_names": [
                    "iTeam",
                    "flDuration"
                ],
                "args": [
                    "DOTATeam_t",
                    "float"
                ],
                "return": "void"
            },
            "ModifyHealth": {
                "arg_names": [
                    "iDesiredHealthValue",
                    "hAbility",
                    "bLethal",
                    "iAdditionalFlags"
                ],
                "args": [
                    "int",
                    "CDOTABaseAbility",
                    "bool",
                    "int"
                ],
                "description": "Sets the health to a specific value, with optional flags or inflictors.",
                "return": "void"
            },
            "MoveToNPC": {
                "arg_names": [
                    "hNPC"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Move to follow a unit.",
                "return": "void"
            },
            "MoveToNPCToGiveItem": {
                "arg_names": [
                    "hNPC",
                    "hItem"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "CDOTA_Item"
                ],
                "description": "Give an item to another unit.",
                "return": "void"
            },
            "MoveToTargetToAttack": {
                "arg_names": [
                    "hTarget"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Move to a target to attack.",
                "return": "void"
            },
            "PerformAttack": {
                "arg_names": [
                    "hTarget",
                    "bUseCastAttackOrb",
                    "bProcessProcs",
                    "bSkipCooldown",
                    "bIgnoreInvis",
                    "bUseProjectile",
                    "bFakeAttack",
                    "bNeverMiss"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "bool",
                    "bool",
                    "bool",
                    "bool",
                    "bool",
                    "bool",
                    "bool"
                ],
                "description": "Performs an attack on a target.",
                "return": "void"
            },
            "PickupDroppedItem": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "Pick up a dropped item.",
                "return": "void"
            },
            "PickupRune": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "Pick up a rune.",
                "return": "void"
            },
            "RemoveGesture": {
                "arg_names": [
                    "nActivity"
                ],
                "args": [
                    "GameActivity_t"
                ],
                "description": "Remove the given gesture activity.",
                "return": "void"
            },
            "RemoveHorizontalMotionController": {
                "arg_names": [
                    "hBuff"
                ],
                "args": [
                    "CDOTA_Buff"
                ],
                "return": "void"
            },
            "RemoveItem": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "Removes the passed item from this unit's inventory and deletes it.",
                "return": "void"
            },
            "RemoveModifierByNameAndCaster": {
                "arg_names": [
                    "pszScriptName",
                    "hCaster"
                ],
                "args": [
                    "cstring",
                    "CDOTA_BaseNPC"
                ],
                "description": "Removes a modifier that was cast by the given caster.",
                "return": "void"
            },
            "RemoveVerticalMotionController": {
                "arg_names": [
                    "hBuff"
                ],
                "args": [
                    "CDOTA_Buff"
                ],
                "return": "void"
            },
            "SellItem": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "Sells the passed item in this unit's inventory.",
                "return": "void"
            },
            "SetAbilityByIndex": {
                "arg_names": [
                    "hAbility",
                    "iIndex"
                ],
                "args": [
                    "CDOTABaseAbility",
                    "int"
                ],
                "description": "Set the ability by index.",
                "return": "void"
            },
            "SetAggroTarget": {
                "arg_names": [
                    "hAggroTarget"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Set this unit's aggro target to a specified unit.",
                "return": "void"
            },
            "SetAttackCapability": {
                "arg_names": [
                    "iAttackCapabilities"
                ],
                "args": [
                    "DOTAUnitAttackCapability_t"
                ],
                "return": "void"
            },
            "SetAttacking": {
                "arg_names": [
                    "hAttackTarget"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "return": "void"
            },
            "SetCursorCastTarget": {
                "arg_names": [
                    "hEntity"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "return": "void"
            },
            "SetForceAttackTarget": {
                "arg_names": [
                    "hNPC"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "return": "void"
            },
            "SetInitialGoalEntity": {
                "arg_names": [
                    "hGoal"
                ],
                "args": [
                    "CBaseEntity"
                ],
                "description": "Sets the initial waypoint goal for this NPC.",
                "return": "void"
            },
            "SetModifierStackCount": {
                "arg_names": [
                    "pszScriptName",
                    "hCaster",
                    "nStackCount"
                ],
                "args": [
                    "cstring",
                    "CDOTA_BaseNPC",
                    "int"
                ],
                "description": "Sets the stack count of a given modifier.",
                "return": "void"
            },
            "SetMoveCapability": {
                "arg_names": [
                    "iMoveCapabilities"
                ],
                "args": [
                    "DOTAUnitMoveCapability_t"
                ],
                "return": "void"
            },
            "SpendMana": {
                "arg_names": [
                    "flManaSpent",
                    "hAbility"
                ],
                "args": [
                    "float",
                    "CDOTABaseAbility"
                ],
                "description": "Spend mana from this unit, this can be used for spending mana from abilities or item usage.",
                "return": "void"
            },
            "StartGesture": {
                "arg_names": [
                    "nActivity"
                ],
                "args": [
                    "GameActivity_t"
                ],
                "description": "Add the given gesture activity.",
                "return": "void"
            },
            "StartGestureWithPlaybackRate": {
                "arg_names": [
                    "nActivity",
                    "flRate"
                ],
                "args": [
                    "GameActivity_t",
                    "float"
                ],
                "description": "Add the given gesture activity with a playback rate override.",
                "return": "void"
            },
            "TakeItem": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "Removed the passed item from this unit's inventory.",
                "return": "handle"
            },
            "TriggerSpellAbsorb": {
                "arg_names": [
                    "hAbility"
                ],
                "args": [
                    "CDOTABaseAbility"
                ],
                "return": "bool"
            },
            "TriggerSpellReflect": {
                "arg_names": [
                    "hAbility"
                ],
                "args": [
                    "CDOTABaseAbility"
                ],
                "description": "Trigger the Lotus Orb-like effect.(hAbility)",
                "return": "void"
            }
        }
    },
    "CDOTA_BaseNPC_Creature": {
        "functions": {
            "AddItemDrop": {
                "arg_names": [
                    "hDropData"
                ],
                "args": [
                    "table"
                ],
                "description": "Add the specified item drop to this creature.",
                "return": "void"
            }
        }
    },
    "CDOTA_BaseNPC_Hero": {
        "functions": {
            "AddExperience": {
                "arg_names": [
                    "flXP",
                    "nReason",
                    "bApplyBotDifficultyScaling",
                    "bIncrementTotal"
                ],
                "args": [
                    "float",
                    "EDOTA_ModifyXP_Reason",
                    "bool",
                    "bool"
                ],
                "description": "Params: Float XP, Bool applyBotDifficultyScaling",
                "return": "bool"
            },
            "GetAdditionalOwnedUnits": {
                "args": [],
                "return": "CDOTA_BaseNPC[]"
            },
            "GetPlayerID": {
                "args": [],
                "description": "Returns player ID of the player owning this hero",
                "return": "PlayerID"
            },
            "GetPrimaryAttribute": {
                "args": [],
                "description": "0 = strength, 1 = agility, 2 = intelligence.",
                "return": "Attributes"
            },
            "GetTogglableWearable": {
                "arg_names": [
                    "nSlotType"
                ],
                "args": [
                    "int"
                ],
                "description": "Get wearable entity in slot (slot)",
                "return": "CBaseEntity"
            },
            "KilledHero": {
                "arg_names": [
                    "hHero",
                    "hInflictor"
                ],
                "args": [
                    "CDOTA_BaseNPC_Hero",
                    "CDOTA_BaseNPC"
                ],
                "description": "Args: Hero, Inflictor",
                "return": "void"
            },
            "SetPrimaryAttribute": {
                "arg_names": [
                    "nPrimaryAttribute"
                ],
                "args": [
                    "Attributes"
                ],
                "description": "Set this hero's primary attribute value.",
                "return": "void"
            },
            "SpendGold": {
                "arg_names": [
                    "iCost",
                    "iReason"
                ],
                "args": [
                    "int",
                    "EDOTA_ModifyGold_Reason"
                ],
                "description": "Args: int nGold, int nReason",
                "return": "void"
            },
            "UpgradeAbility": {
                "arg_names": [
                    "hAbility"
                ],
                "args": [
                    "CDOTABaseAbility"
                ],
                "description": "This upgrades the passed ability if it exists and the hero has enough ability points.",
                "return": "void"
            }
        }
    },
    "Global": {
        "functions": {
            "CreateUnitByName": {
                "args": [
                    "string",
                    "vector",
                    "bool",
                    "CBaseEntity",
                    "CBaseEntity",
                    "int"
                ],
                "description": "Creates a DOTA unit by its dota_npc_units.txt name",
                "return": "CDOTA_BaseNPC",
                "arg_names": [
                    "unit_name",
                    "location",
                    "find_clear_space",
                    "npc_owner",
                    "unit_owner",
                    "team_number"
                ]
            }
        }
    }
}
