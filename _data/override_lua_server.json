{
    "CBaseEntity": {
        "functions": {
            "FirstMoveChild": {
                "args": [],
                "return": "CBaseEntity"
            },
            "FollowEntity": {
                "arg_names": [
                    "hEnt",
                    "bBoneMerge"
                ],
                "args": [
                    "CBaseEntity",
                    "bool"
                ],
                "description": "hEntity to follow, bool bBoneMerge",
                "return": "void"
            },
            "GetMoveParent": {
                "args": [],
                "description": "If in hierarchy, retrieves the entity's parent.",
                "return": "CBaseEntity"
            },
            "GetOwner": {
                "args": [],
                "description": "Gets this entity's owner",
                "return": "CBaseEntity"
            },
            "GetOwnerEntity": {
                "args": [],
                "description": "Get the owner entity, if there is one",
                "return": "CBaseEntity"
            },
            "GetRootMoveParent": {
                "args": [],
                "description": "If in hierarchy, walks up the hierarchy to find the root parent.",
                "return": "CBaseEntity"
            },
            "GetTeam": {
                "args": [],
                "description": "Get the team number of this entity.",
                "return": "DOTATeam_t"
            },
            "GetTeamNumber": {
                "args": [],
                "description": "Get the team number of this entity.",
                "return": "DOTATeam_t"
            },
            "NextMovePeer": {
                "args": [],
                "return": "CBaseEntity"
            },
            "SetOwner": {
                "arg_names": [
                    "pOwner"
                ],
                "args": [
                    "CBaseEntity"
                ],
                "description": "Sets this entity's owner",
                "return": "void"
            },
            "SetTeam": {
                "arg_names": [
                    "iTeamNum"
                ],
                "args": [
                    "DOTATeam_t"
                ],
                "return": "void"
            }
        }
    },
    "CBaseTrigger": {
        "functions": {
            "IsTouching": {
                "arg_names": [
                    "hEnt"
                ],
                "args": [
                    "CBaseEntity"
                ],
                "description": "Checks whether the passed entity is touching the trigger.",
                "return": "bool"
            }
        }
    },
    "CCustomGameEventManager": {
        "functions": {
            "RegisterListener": {
                "args": [
                    "cstring",
                    "function"
                ],
                "description": "( string EventName, func CallbackFunction ) - Register a callback to be called when a particular custom event arrives. Returns a listener ID that can be used to unregister later.",
                "return": "CCustomGameEventListener",
                "arg_names": {
                    "0": "eventName",
                    "1": "handler"
                }
            },
            "Send_ServerToAllClients": {
                "args": [
                    "cstring",
                    "table"
                ],
                "description": "( string EventName, table EventData )",
                "return": "void",
                "arg_names": {
                    "0": "eventName",
                    "1": "eventData"
                }
            },
            "Send_ServerToPlayer": {
                "args": [
                    "CDOTAPlayer",
                    "cstring",
                    "table"
                ],
                "description": "( Entity Player, string EventName, table EventData )",
                "return": "void",
                "arg_names": {
                    "0": "player",
                    "1": "eventName",
                    "2": "eventData"
                }
            },
            "Send_ServerToTeam": {
                "args": [
                    "DOTATeam_t",
                    "cstring",
                    "table"
                ],
                "description": "( int TeamNumber, string EventName, table EventData )",
                "return": "void",
                "arg_names": {
                    "0": "team",
                    "1": "eventName",
                    "2": "eventData"
                }
            },
            "UnregisterListener": {
                "args": [
                    "CCustomGameEventListener"
                ],
                "description": "( int ListnerID ) - Unregister a specific listener",
                "return": "void",
                "arg_names": {
                    "0": "listener"
                }
            }
        }
    },
    "CDOTABaseAbility": {
        "functions": {
            "CanAbilityBeUpgraded": {
                "args": [],
                "return": "boolean"
            },
            "GetAbilityDamageType": {
                "args": [],
                "return": "DAMAGE_TYPES"
            },
            "GetAbilityKeyValues": {
                "args": [],
                "description": "Gets the key values definition for this ability.",
                "return": "table"
            },
            "GetAbilityTargetFlags": {
                "args": [],
                "return": "DOTA_UNIT_TARGET_FLAGS"
            },
            "GetAbilityTargetTeam": {
                "args": [],
                "return": "DOTA_UNIT_TARGET_TEAM"
            },
            "GetAbilityTargetType": {
                "args": [],
                "return": "DOTA_UNIT_TARGET_TYPE"
            },
            "GetCastRange": {
                "arg_names": [
                    "vLocation",
                    "hTarget"
                ],
                "args": [
                    "vector",
                    "CDOTA_BaseNPC"
                ],
                "description": "Gets the cast range of the ability.",
                "return": "int"
            },
            "GetCaster": {
                "args": [],
                "return": "CDOTA_BaseNPC"
            },
            "GetCloneSource": {
                "args": [],
                "return": "CDOTA_BaseNPC"
            },
            "GetCursorTarget": {
                "args": [],
                "return": "CDOTA_BaseNPC"
            },
            "GetLevelSpecialValueFor": {
                "arg_names": [
                    "valueName",
                    "nLevel"
                ],
                "args": [
                    "cstring",
                    "int"
                ],
                "return": "number"
            },
            "GetSpecialValueFor": {
                "arg_names": [
                    "valueName"
                ],
                "args": [
                    "cstring"
                ],
                "description": "Gets a value from this ability's special value block for its current level.",
                "return": "number"
            },
            "IsCosmetic": {
                "arg_names": [
                    "hEntity"
                ],
                "args": [
                    "CBaseEntity"
                ],
                "return": "bool"
            }
        }
    },
    "CDOTA_Ability_DataDriven": {
        "functions": {
            "ApplyDataDrivenModifier": {
                "arg_names": [
                    "caster",
                    "target",
                    "modifier_name",
                    "modifier_table"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "CDOTA_BaseNPC",
                    "string",
                    "table"
                ],
                "description": "Applies a data driven modifier to the target",
                "return": "CDOTA_Buff"
            }
        }
    },
    "CDOTA_BaseNPC": {
        "functions": {
            "AddAbility": {
                "arg_names": [
                    "ability_name"
                ],
                "args": [
                    "string"
                ],
                "description": "Add an ability to this unit by name.",
                "return": "CDOTABaseAbility"
            },
            "AddItem": {
                "arg_names": [
                    "item_to_add"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Add an item to this unit's inventory.",
                "return": "CDOTA_Item"
            },
            "AddItemByName": {
                "arg_names": [
                    "item_name"
                ],
                "args": [
                    "string"
                ],
                "description": "Add an item to this unit's inventory.",
                "return": "CDOTA_Item"
            },
            "AddNewModifier": {
                "arg_names": [
                    "caster",
                    "source_ability",
                    "modifier_name",
                    "modifier_table"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "CDOTABaseAbility",
                    "string",
                    "table"
                ],
                "description": "Add a modifier to this unit.",
                "return": "CDOTA_Buff"
            },
            "FindAbilityByName": {
                "arg_names": [
                    "ability_name"
                ],
                "args": [
                    "string"
                ],
                "description": "Retrieve an ability by name from the unit.",
                "return": "CDOTABaseAbility"
            },
            "FindItemInInventory": {
                "arg_names": [
                    "item_name"
                ],
                "args": [
                    "string"
                ],
                "description": "Get handle to first item in inventory, else nil.",
                "return": "CDOTA_Item"
            },
            "FindModifierByName": {
                "arg_names": [
                    "modifier_name"
                ],
                "args": [
                    "string"
                ],
                "description": "Return a handle to the modifier of the given name if found, else nil (string Name )",
                "return": "CDOTA_Buff"
            },
            "FindModifierByNameAndCaster": {
                "arg_names": [
                    "modifier_name",
                    "caster"
                ],
                "args": [
                    "string",
                    "CDOTA_BaseNPC"
                ],
                "description": "Return a handle to the modifier of the given name from the passed caster if found, else nil ( string Name, hCaster )",
                "return": "CDOTA_Buff"
            },
            "GetAbilityByIndex": {
                "arg_names": [
                    "ability_index"
                ],
                "args": [
                    "number"
                ],
                "description": "Retrieve an ability by index from the unit.",
                "return": "CDOTABaseAbility"
            }
        }
    },
    "Global": {
        "functions": {
            "CreateUnitByName": {
                "args": [
                    "string",
                    "vector",
                    "bool",
                    "CBaseEntity",
                    "CBaseEntity",
                    "int"
                ],
                "description": "Creates a DOTA unit by its dota_npc_units.txt name",
                "return": "CDOTA_BaseNPC",
                "arg_names": [
                    "unit_name",
                    "location",
                    "find_clear_space",
                    "npc_owner",
                    "unit_owner",
                    "team_number"
                ]
            }
        }
    }
}
