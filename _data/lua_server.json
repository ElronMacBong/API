{
    "CDOTA_ItemSpawner": {
        "extends": "CBaseEntity",
        "description": "Spawns a physical item",
        "functions": {
            "GetItemName": {
                "description": "Returns the item name",
                "return": "cstring",
                "args": []
            }
        }
    },
    "CDOTA_Item_Lua": {
        "extends": "CDOTA_Item",
        "description": "A lua-based item.",
        "functions": {
            "OnChannelThink": {
                "description": "(float flInterval) Channeling is taking place.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flInterval"
                ]
            },
            "CastFilterResult": {
                "description": "Determine whether an issued command with no target is valid.",
                "return": "int",
                "args": []
            },
            "CastFilterResultLocation": {
                "description": "(Vector vLocation) Determine whether an issued command on a location is valid.",
                "return": "int",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "vLocation"
                ]
            },
            "OnOwnerDied": {
                "description": "Caster died.",
                "return": "void",
                "args": []
            },
            "GetManaCost": {
                "description": "Return mana cost at the given level (-1 is current).",
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iLevel"
                ]
            },
            "OnAbilityPhaseStart": {
                "description": "Cast time begins (return true for successful cast).",
                "return": "bool",
                "args": []
            },
            "GetConceptRecipientType": {
                "description": "Return who hears speech when this spell is cast.",
                "return": "int",
                "args": []
            },
            "OnHeroLevelUp": {
                "description": "Caster gained a level.",
                "return": "void",
                "args": []
            },
            "GetBehavior": {
                "description": "Return cast behavior type of this ability.",
                "return": "int",
                "args": []
            },
            "GetChannelTime": {
                "description": "Return the channel time of this ability.",
                "return": "float",
                "args": []
            },
            "GetCustomCastErrorLocation": {
                "description": "(Vector vLocation) Return the error string of a failed command on a location.",
                "return": "cstring",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "vLocation"
                ]
            },
            "OnChannelFinish": {
                "description": "(bool bInterrupted) Channel finished.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bInterrupted"
                ]
            },
            "GetIntrinsicModifierName": {
                "description": "Returns the name of the modifier applied passively by this ability.",
                "return": "cstring",
                "args": []
            },
            "GetCustomCastErrorTarget": {
                "description": "(HSCRIPT hTarget) Return the error string of a failed command on a target.",
                "return": "cstring",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hTarget"
                ]
            },
            "IsHiddenWhenStolen": {
                "description": "Returns true if this ability is hidden when stolen by Spell Steal.",
                "return": "bool",
                "args": []
            },
            "GetCastRange": {
                "description": "Return cast range of this ability.",
                "return": "int",
                "args": [
                    "vector",
                    "handle"
                ],
                "arg_names": [
                    "vLocation",
                    "hTarget"
                ]
            },
            "GetCooldown": {
                "description": "Return cooldown of this ability.",
                "return": "float",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iLevel"
                ]
            },
            "GetChannelledManaCostPerSecond": {
                "description": "Return mana cost at the given level per second while channeling (-1 is current).",
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iLevel"
                ]
            },
            "OnUnStolen": {
                "description": "Special behavior when lost by Spell Steal.",
                "return": "void",
                "args": []
            },
            "GetGoldCost": {
                "description": "Return gold cost at the given level (-1 is current).",
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iLevel"
                ]
            },
            "CastFilterResultTarget": {
                "description": "(HSCRIPT hTarget) Determine whether an issued command on a target is valid.",
                "return": "int",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hTarget"
                ]
            },
            "GetCustomCastError": {
                "description": "Return the error string of a failed command with no target.",
                "return": "cstring",
                "args": []
            },
            "SpeakTrigger": {
                "description": "Return the type of speech used.",
                "return": "int",
                "args": []
            },
            "OnToggle": {
                "description": "Ability is toggled on/off.",
                "return": "void",
                "args": []
            },
            "IsStealable": {
                "description": "Returns true if this ability can be stolen by Spell Steal.",
                "return": "bool",
                "args": []
            },
            "OnSpellStart": {
                "description": "Cast time finished, spell effects begin.",
                "return": "void",
                "args": []
            },
            "OnUpgrade": {
                "description": "Ability gained a level.",
                "return": "void",
                "args": []
            },
            "OnAbilityPhaseInterrupted": {
                "description": "Cast time did not complete successfully.",
                "return": "void",
                "args": []
            },
            "OnProjectileHit": {
                "description": "(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid).",
                "return": "bool",
                "args": [
                    "handle",
                    "vector"
                ],
                "arg_names": [
                    "hTarget",
                    "vLocation"
                ]
            },
            "OnOwnerSpawned": {
                "description": "Caster respawned or spawned for the first time.",
                "return": "void",
                "args": []
            },
            "OnProjectileThink": {
                "description": "(Vector vLocation) Projectile is actively moving.",
                "return": "void",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "vLocation"
                ]
            },
            "OnInventoryContentsChanged": {
                "description": "Caster inventory changed.",
                "return": "void",
                "args": []
            },
            "OnItemEquipped": {
                "description": "( HSCRIPT hItem ) Caster equipped item.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hItem"
                ]
            },
            "OnHeroCalculateStatBonus": {
                "description": "Caster (hero only) gained a level, skilled an ability, or received a new stat bonus.",
                "return": "void",
                "args": []
            },
            "OnStolen": {
                "description": "( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hSourceAbility"
                ]
            },
            "OnHeroDiedNearby": {
                "description": "A hero has died in the vicinity (ie Urn), takes table of params.",
                "return": "void",
                "args": [
                    "handle",
                    "handle",
                    "handle"
                ],
                "arg_names": [
                    "unit",
                    "attacker",
                    "table"
                ]
            },
            "IsHiddenAbilityCastable": {
                "description": "Returns true if this ability can be used when not on the action panel.",
                "return": "bool",
                "args": []
            },
            "GetAssociatedPrimaryAbilities": {
                "description": "Returns abilities that are stolen simultaneously, or otherwise related in functionality.",
                "return": "cstring",
                "args": []
            },
            "GetAssociatedSecondaryAbilities": {
                "description": "Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities.",
                "return": "cstring",
                "args": []
            },
            "IsRefreshable": {
                "description": "Returns true if this ability is refreshed by Refresher Orb.",
                "return": "bool",
                "args": []
            },
            "ProcsMagicStick": {
                "description": "Returns true if this ability will generate magic stick charges for nearby enemies.",
                "return": "bool",
                "args": []
            },
            "GetPlaybackRateOverride": {
                "description": "Return the animation rate of the cast animation.",
                "return": "float",
                "args": []
            }
        }
    },
    "ProjectileManager": {
        "description": "!The projectile manager",
        "functions": {
            "GetLinearProjectileVelocity": {
                "description": "Returns a vector representing the current velocity of the projectile.",
                "return": "vector",
                "args": [
                    "int"
                ]
            },
            "CreateLinearProjectile": {
                "description": "Creates a linear projectile and returns the projectile ID",
                "return": "int",
                "args": [
                    "handle"
                ]
            },
            "CreateTrackingProjectile": {
                "description": "Creates a tracking projectile",
                "return": "void",
                "args": [
                    "handle"
                ]
            },
            "DestroyLinearProjectile": {
                "description": "Destroys the linear projectile matching the argument ID",
                "return": "void",
                "args": [
                    "int"
                ]
            },
            "ProjectileDodge": {
                "description": "Makes the specified unit dodge projectiles",
                "return": "void",
                "args": [
                    "handle"
                ]
            }
        }
    },
    "CDOTA_PlayerResource": {
        "extends": "CBaseEntity",
        "description": "Interface to player data",
        "functions": {
            "GetPlayerCount": {
                "description": "Includes spectators and players not assigned to a team",
                "return": "int",
                "args": []
            },
            "HasRandomed": {
                "return": "bool",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetTowerKills": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "SpendGold": {
                "return": "void",
                "args": [
                    "int",
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iPlayerID",
                    "iCost",
                    "iReason"
                ]
            },
            "GetDamageDoneToHero": {
                "return": "int",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iPlayerID",
                    "iVictimID"
                ]
            },
            "GetTotalEarnedGold": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "IsValidTeamPlayerID": {
                "return": "bool",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetGoldPerMin": {
                "return": "float",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetLevel": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetHeroDamageTaken": {
                "return": "int",
                "args": [
                    "int",
                    "bool"
                ],
                "arg_names": [
                    "iPlayerID",
                    "bTotal"
                ]
            },
            "SetBuybackGoldLimitTime": {
                "return": "void",
                "args": [
                    "int",
                    "float"
                ],
                "arg_names": [
                    "nPlayerID",
                    "flBuybackCooldown"
                ]
            },
            "ResetTotalEarnedGold": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "ModifyGold": {
                "return": "int",
                "args": [
                    "int",
                    "int",
                    "bool",
                    "int"
                ],
                "arg_names": [
                    "iPlayerID",
                    "iGoldChange",
                    "bReliable",
                    "nReason"
                ]
            },
            "SetHasRepicked": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetNumConsumablesPurchased": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetKills": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetHealing": {
                "return": "float",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetTeam": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetStreak": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetNumItemsPurchased": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "IsValidTeamPlayer": {
                "return": "bool",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetSelectedHeroName": {
                "return": "cstring",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetSelectedHeroEntity": {
                "return": "handle",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "IsValidPlayer": {
                "return": "bool",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "SetCustomTeamAssignment": {
                "description": "Set custom team assignment for this player.",
                "return": "void",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iPlayerID",
                    "iTeamAssignment"
                ]
            },
            "ClearLastHitStreak": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "IsValidPlayerID": {
                "return": "bool",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetPlayerName": {
                "return": "cstring",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetRespawnSeconds": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetNearbyCreepDeaths": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetTeamPlayerCount": {
                "description": "Players on a valid team (radiant, dire, or custom*) who haven't abandoned the game",
                "return": "int",
                "args": []
            },
            "GetGoldSpentOnItems": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetGold": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetUnreliableGold": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "AddGoldSpentOnSupport": {
                "return": "void",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iPlayerID",
                    "iCost"
                ]
            },
            "IncrementDeaths": {
                "return": "void",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iPlayerID",
                    "iKillerID"
                ]
            },
            "IncrementLastHitStreak": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetTowerDamageTaken": {
                "return": "int",
                "args": [
                    "int",
                    "bool"
                ],
                "arg_names": [
                    "iPlayerID",
                    "bTotal"
                ]
            },
            "IncrementClaimedMisses": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "SetGold": {
                "return": "void",
                "args": [
                    "int",
                    "int",
                    "bool"
                ],
                "arg_names": [
                    "iPlayerID",
                    "iGold",
                    "bReliable"
                ]
            },
            "GetTeamKills": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iTeam"
                ]
            },
            "GetRawPlayerDamage": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetXPPerMin": {
                "return": "float",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "IncrementStreak": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetPlayerCountForTeam": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iTeam"
                ]
            },
            "GetTimeOfLastItemPurchase": {
                "return": "float",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetStuns": {
                "return": "float",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetNthPlayerIDOnTeam": {
                "return": "int",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iTeamNumber",
                    "iNthPlayer"
                ]
            },
            "GetTotalEarnedXP": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "SetCameraTarget": {
                "description": "(playerID, entity) - force the given player's camera to follow the given entity",
                "return": "void",
                "args": [
                    "int",
                    "handle"
                ],
                "arg_names": [
                    "nPlayerID",
                    "hTarget"
                ]
            },
            "GetClaimedFarm": {
                "return": "float",
                "args": [
                    "int",
                    "bool"
                ],
                "arg_names": [
                    "iPlayerID",
                    "bOnlyEarned"
                ]
            },
            "GetTimeOfLastDeath": {
                "return": "float",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "IncrementDenies": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetBroadcasterChannelSlot": {
                "return": "uint",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetLastHits": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetGoldLostToDeath": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "IncrementKills": {
                "return": "void",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iPlayerID",
                    "iVictimID"
                ]
            },
            "ClearKillsMatrix": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "IncrementAssists": {
                "return": "void",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iPlayerID",
                    "iVictimID"
                ]
            },
            "ClearLastHitMultikill": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "ClearStreak": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetAssists": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetDeaths": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "IncrementClaimedDenies": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "WhoSelectedHero": {
                "return": "int",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pHeroFilename"
                ]
            },
            "GetKillsDoneToHero": {
                "return": "int",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iPlayerID",
                    "iVictimID"
                ]
            },
            "GetRoshanKills": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetRunePickups": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetReliableGold": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "SetHasRandomed": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetTotalGoldSpent": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "HaveAllPlayersJoined": {
                "return": "bool",
                "args": []
            },
            "GetLastHitStreak": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetGoldSpentOnSupport": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "IsBroadcaster": {
                "return": "bool",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetGoldSpentOnConsumables": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetGoldSpentOnBuybacks": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "AddRunePickup": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetAegisPickups": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "SetUnitShareMaskForPlayer": {
                "return": "void",
                "args": [
                    "int",
                    "int",
                    "int",
                    "bool"
                ],
                "arg_names": [
                    "nPlayerID",
                    "nOtherPlayerID",
                    "nFlag",
                    "bState"
                ]
            },
            "GetLastHitMultikill": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "IsHeroSelected": {
                "return": "bool",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pHeroname"
                ]
            },
            "AddAegisPickup": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetClaimedMisses": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "IncrementTotalEarnedXP": {
                "return": "void",
                "args": [
                    "int",
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iPlayerID",
                    "iXP",
                    "nReason"
                ]
            },
            "IncrementMisses": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetTimeOfLastConsumablePurchase": {
                "return": "float",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetMisses": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "AddClaimedFarm": {
                "return": "void",
                "args": [
                    "int",
                    "float",
                    "bool"
                ],
                "arg_names": [
                    "iPlayerID",
                    "flFarmValue",
                    "bEarnedValue"
                ]
            },
            "SetCustomBuybackCooldown": {
                "description": "Set the buyback cooldown for this player.",
                "return": "void",
                "args": [
                    "int",
                    "float"
                ],
                "arg_names": [
                    "iPlayerID",
                    "flCooldownTime"
                ]
            },
            "GetSelectedHeroID": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "ClearRawPlayerDamageMatrix": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetCustomTeamAssignment": {
                "description": "Get the current custom team assignment for this player.",
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "IncrementLastHitMultikill": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetCreepDamageTaken": {
                "return": "int",
                "args": [
                    "int",
                    "bool"
                ],
                "arg_names": [
                    "iPlayerID",
                    "bTotal"
                ]
            },
            "GetEventPointsForPlayerID": {
                "return": "uint",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "IncrementLastHits": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "HasRepicked": {
                "return": "bool",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "HasSelectedHero": {
                "return": "bool",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetPlayer": {
                "return": "handle",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "IncrementNearbyCreepDeaths": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetDenies": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "UpdateTeamSlot": {
                "return": "void",
                "args": [
                    "int",
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iPlayerID",
                    "iTeamNumber",
                    "desiredSlot"
                ]
            },
            "GetClaimedDenies": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetBroadcasterChannel": {
                "return": "uint",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetSteamID": {
                "description": "Get the 64 bit steam ID for a given player.",
                "return": "uint64",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetSteamAccountID": {
                "return": "uint",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "IsFakeClient": {
                "return": "bool",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetPlayerLoadedCompletely": {
                "return": "bool",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "SetPlayerReservedState": {
                "return": "void",
                "args": [
                    "int",
                    "bool"
                ],
                "arg_names": [
                    "iPlayerID",
                    "bReserved"
                ]
            },
            "GetPlayerReservedState": {
                "return": "bool",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetConnectionState": {
                "return": "<unknown>",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "SetLastBuybackTime": {
                "return": "void",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iPlayerID",
                    "iLastBuybackTime"
                ]
            },
            "GetEventPremiumPoints": {
                "return": "uint",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetEventRanks": {
                "return": "<unknown>",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "GetUnitShareMaskForPlayer": {
                "return": "int",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "nPlayerID",
                    "nOtherPlayerID"
                ]
            },
            "IsHeroSharedWithPlayerID": {
                "return": "bool",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "nUnitOwnerPlayerID",
                    "nOtherPlayerID"
                ]
            },
            "AreUnitsSharedWithPlayerID": {
                "return": "bool",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "nUnitOwnerPlayerID",
                    "nOtherPlayerID"
                ]
            },
            "IsDisableHelpSetForPlayerID": {
                "return": "bool",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "nPlayerID",
                    "nOtherPlayerID"
                ]
            },
            "GetNumCouriersForTeam": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nTeamNumber"
                ]
            },
            "GetNthCourierForTeam": {
                "return": "handle",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "nCourierIndex",
                    "nTeamNumber"
                ]
            },
            "SetBuybackCooldownTime": {
                "return": "void",
                "args": [
                    "int",
                    "float"
                ],
                "arg_names": [
                    "nPlayerID",
                    "flBuybackCooldown"
                ]
            },
            "ResetBuybackCostTime": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nPlayerID"
                ]
            },
            "GetCustomBuybackCooldown": {
                "return": "float",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "SetCustomBuybackCost": {
                "description": "Set the buyback cost for this player.",
                "return": "void",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iPlayerID",
                    "iGoldCost"
                ]
            },
            "GetCustomBuybackCost": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "HasCustomGameTicketForPlayerID": {
                "description": "Does this player have a custom game ticket for this game?",
                "return": "bool",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "ReplaceHeroWith": {
                "description": "(playerID, heroClassName, gold, XP) - replaces the player's hero with a new one of the specified class, gold and XP",
                "return": "handle",
                "args": [
                    "int",
                    "cstring",
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iPlayerID",
                    "pszHeroClass",
                    "nGold",
                    "nXP"
                ]
            },
            "SetOverrideSelectionEntity": {
                "description": "Set the forced selection entity for a player.",
                "return": "void",
                "args": [
                    "int",
                    "handle"
                ],
                "arg_names": [
                    "nPlayerID",
                    "hEntity"
                ]
            },
            "SetCustomPlayerColor": {
                "description": "Set custom color for player (minimap, scoreboard, etc)",
                "return": "void",
                "args": [
                    "int",
                    "int",
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iPlayerID",
                    "r",
                    "g",
                    "b"
                ]
            }
        }
    },
    "CDotaQuest": {
        "extends": "CBaseEntity",
        "description": "A quest",
        "functions": {
            "RemoveSubquest": {
                "description": "Remove a subquest from this quest",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hSubquest"
                ]
            },
            "AddSubquest": {
                "description": "Add a subquest to this quest",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hSubquest"
                ]
            },
            "CompleteQuest": {
                "description": "Mark this quest complete",
                "return": "void",
                "args": []
            },
            "GetSubquestByName": {
                "description": "Finds a subquest from this quest by name",
                "return": "handle",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pszName"
                ]
            },
            "SetTextReplaceValue": {
                "description": "Set a quest value",
                "return": "void",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "valueSlot",
                    "value"
                ]
            },
            "GetSubquest": {
                "description": "Finds a subquest from this quest by index",
                "return": "handle",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nIndex"
                ]
            },
            "SetTextReplaceString": {
                "description": "Set the text replace string for this quest",
                "return": "void",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pszString"
                ]
            }
        }
    },
    "CDOTA_BaseNPC_Creature": {
        "extends": "CDOTA_BaseNPC",
        "description": "A Dota NPC Unit",
        "functions": {
            "SetMagicResistanceGain": {
                "description": "Set the magic resistance gained per level on this creature.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flMagicResistanceGain"
                ]
            },
            "SetChampion": {
                "description": "Flag this unit as a champion creature.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bIsChampion"
                ]
            },
            "SetManaGain": {
                "description": "Set the mana points gained per level on this creature.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nManaGain"
                ]
            },
            "SetAttackTimeGain": {
                "description": "Set the attack time gained per level on this creature.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flAttackTimeGain"
                ]
            },
            "SetHPRegenGain": {
                "description": "Set the hit points regen gained per level on this creature.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flHPRegenGain"
                ]
            },
            "CreatureLevelUp": {
                "description": "Level the creature up by the specified number of levels",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iLevels"
                ]
            },
            "IsChampion": {
                "description": "Is this unit a champion?",
                "return": "bool",
                "args": []
            },
            "SetArmorGain": {
                "description": "Set the armor gained per level on this creature.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flArmorGain"
                ]
            },
            "SetHPGain": {
                "description": "Set the hit points gained per level on this creature.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nHPGain"
                ]
            },
            "SetManaRegenGain": {
                "description": "Set the mana points regen gained per level on this creature.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flManaRegenGain"
                ]
            },
            "SetDisableResistanceGain": {
                "description": "Set the disable resistance gained per level on this creature.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flDisableResistanceGain"
                ]
            },
            "SetDamageGain": {
                "description": "Set the damage gained per level on this creature.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nDamageGain"
                ]
            },
            "SetMoveSpeedGain": {
                "description": "Set the move speed gained per level on this creature.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nMoveSpeedGain"
                ]
            },
            "SetBountyGain": {
                "description": "Set the bounty gold gained per level on this creature.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nBountyGain"
                ]
            },
            "SetXPGain": {
                "description": "Set the xp reward gained per level on this creature.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nXPGain"
                ]
            },
            "AddItemDrop": {
                "description": "Add the specified item drop to this creature",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hDropData"
                ]
            }
        }
    },
    "CBaseEntity": {
        "extends": "CEntityInstance",
        "description": "Root class of all server-side entities",
        "functions": {
            "GetOwner": {
                "description": "Gets this entity's owner",
                "return": "handle",
                "args": []
            },
            "NextMovePeer": {
                "return": "handle",
                "args": []
            },
            "SetOrigin": {
                "return": "void",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "v"
                ]
            },
            "SetContextNum": {
                "description": "SetContextNum( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a number (int or float). Will last for duration (set 0 to mean 'forever').",
                "return": "void",
                "args": [
                    "cstring",
                    "float",
                    "float"
                ],
                "arg_names": [
                    "pName",
                    "fValue",
                    "duration"
                ]
            },
            "Trigger": {
                "description": "Fires off this entity's OnTrigger responses.",
                "return": "void",
                "args": []
            },
            "GetUpVector": {
                "description": "Get the up vector of the entity.",
                "return": "vector",
                "args": []
            },
            "GetModelName": {
                "description": "Returns the name of the model.",
                "return": "cstring",
                "args": []
            },
            "IsPlayer": {
                "description": "Is this entity a player?",
                "return": "bool",
                "args": []
            },
            "HasAttribute": {
                "description": "See if an entity has a particular attribute.",
                "return": "bool",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pName"
                ]
            },
            "SetForwardVector": {
                "description": "Set the orientation of the entity to have this forward vector.",
                "return": "void",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "v"
                ]
            },
            "SetVelocity": {
                "return": "void",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "vecVelocity"
                ]
            },
            "GetRootMoveParent": {
                "description": "If in hierarchy, walks up the hierarchy to find the root parent.",
                "return": "handle",
                "args": []
            },
            "GetAbsOrigin": {
                "return": "vector",
                "args": []
            },
            "ApplyLocalAngularVelocityImpulse": {
                "description": "Apply an Ang Velocity Impulse",
                "return": "void",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "angImpulse"
                ]
            },
            "TakeDamage": {
                "description": "Apply damage to this entity. Use CreateDamageInfo() to create a damageinfo object.",
                "return": "int",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hInfo"
                ]
            },
            "GetBounds": {
                "description": "Get a table containing the 'Mins' & 'Maxs' vector bounds, centered on object.",
                "return": "variant",
                "args": []
            },
            "GetRightVector": {
                "description": "Get the right vector of the entity.",
                "return": "vector",
                "args": []
            },
            "OverrideFriction": {
                "description": "Takes duration, value for a temporary override.",
                "return": "void",
                "args": [
                    "float",
                    "float"
                ],
                "arg_names": [
                    "duration",
                    "friction"
                ]
            },
            "Kill": {
                "return": "void",
                "args": []
            },
            "SetFriction": {
                "description": "Set PLAYER friction, ignored for objects.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flFriction"
                ]
            },
            "SetAbsOrigin": {
                "return": "void",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "origin"
                ]
            },
            "Attribute_SetFloatValue": {
                "description": "Set float value for an entity attribute.",
                "return": "void",
                "args": [
                    "cstring",
                    "float"
                ],
                "arg_names": [
                    "pName",
                    "flValue"
                ]
            },
            "GetBoundingMaxs": {
                "description": "Get a vector containing max bounds, centered on object.",
                "return": "vector",
                "args": []
            },
            "StopSound": {
                "description": "Stops a named sound playing from this entity.",
                "return": "void",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "soundname"
                ]
            },
            "GetForwardVector": {
                "description": "Get the forward vector of the entity.",
                "return": "vector",
                "args": []
            },
            "RemoveEffects": {
                "description": "RemoveEffects( int ): Removes the render effect flag.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nFlags"
                ]
            },
            "IsNPC": {
                "description": "Is this entity an CAI_BaseNPC?",
                "return": "bool",
                "args": []
            },
            "SetAngles": {
                "description": "Set entity pitch, yaw, roll.",
                "return": "void",
                "args": [
                    "float",
                    "float",
                    "float"
                ],
                "arg_names": [
                    "fPitch",
                    "fYaw",
                    "fRoll"
                ]
            },
            "SetTeam": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iTeamNum"
                ]
            },
            "FirstMoveChild": {
                "return": "handle",
                "args": []
            },
            "GetChildren": {
                "description": "Get the entities parented to this entity.",
                "return": "handle",
                "args": []
            },
            "SetParent": {
                "description": "Set the parent for this entity.",
                "return": "void",
                "args": [
                    "handle",
                    "cstring"
                ],
                "arg_names": [
                    "hParent",
                    "pAttachmentname"
                ]
            },
            "GetBoundingMins": {
                "description": "Get a vector containing min bounds, centered on object.",
                "return": "vector",
                "args": []
            },
            "EmitSoundParams": {
                "description": "Plays/modifies a sound from this entity. changes sound if nPitch and/or flVol or flSoundTime is > 0.",
                "return": "void",
                "args": [
                    "cstring",
                    "int",
                    "float",
                    "float"
                ],
                "arg_names": [
                    "soundname",
                    "nPitch",
                    "flVolume",
                    "flDelay"
                ]
            },
            "SetConstraint": {
                "description": "Set the position of the constraint.",
                "return": "void",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "vPos"
                ]
            },
            "GetBaseVelocity": {
                "description": "Get Base? velocity.",
                "return": "vector",
                "args": []
            },
            "GetAngularVelocity": {
                "description": "Get the local angular velocity - returns a vector of pitch,yaw,roll",
                "return": "vector",
                "args": []
            },
            "GetOwnerEntity": {
                "description": "Get the owner entity, if there is one",
                "return": "handle",
                "args": []
            },
            "EmitSound": {
                "description": "Plays a sound from this entity.",
                "return": "void",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "soundname"
                ]
            },
            "GetMoveParent": {
                "description": "If in hierarchy, retrieves the entity's parent.",
                "return": "handle",
                "args": []
            },
            "SetHealth": {
                "description": "Set the health of this entity.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nHealth"
                ]
            },
            "DeleteAttribute": {
                "description": "Delete an entity attribute.",
                "return": "void",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pName"
                ]
            },
            "EyePosition": {
                "description": "Get vector to eye position - absolute coords.",
                "return": "vector",
                "args": []
            },
            "Attribute_GetIntValue": {
                "description": "Get int value for an entity attribute.",
                "return": "float",
                "args": [
                    "cstring",
                    "int"
                ],
                "arg_names": [
                    "pName",
                    "nDefault"
                ]
            },
            "EyeAngles": {
                "description": "Get the qangles that this entity is looking at.",
                "return": "qangle",
                "args": []
            },
            "GetAnglesAsVector": {
                "description": "Get entity pitch, yaw, roll as a vector.",
                "return": "vector",
                "args": []
            },
            "SetAngularVelocity": {
                "description": "Set the local angular velocity - takes float pitch,yaw,roll velocities",
                "return": "void",
                "args": [
                    "float",
                    "float",
                    "float"
                ],
                "arg_names": [
                    "pitchVel",
                    "yawVel",
                    "rollVel"
                ]
            },
            "GetSoundDuration": {
                "description": "Returns float duration of the sound. Takes soundname and optional actormodelname.",
                "return": "float",
                "args": [
                    "cstring",
                    "cstring"
                ],
                "arg_names": [
                    "soundname",
                    "actormodel"
                ]
            },
            "AddEffects": {
                "description": "AddEffects( int ): Adds the render effect flag.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nFlags"
                ]
            },
            "FollowEntity": {
                "description": "hEntity to follow, bool bBoneMerge",
                "return": "void",
                "args": [
                    "handle",
                    "bool"
                ],
                "arg_names": [
                    "hEnt",
                    "bBoneMerge"
                ]
            },
            "Attribute_GetFloatValue": {
                "description": "Get float value for an entity attribute.",
                "return": "float",
                "args": [
                    "cstring",
                    "float"
                ],
                "arg_names": [
                    "pName",
                    "flDefault"
                ]
            },
            "PrecacheScriptSound": {
                "description": "Precache a sound for later playing.",
                "return": "void",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "soundname"
                ]
            },
            "GetTeam": {
                "description": "Get the team number of this entity.",
                "return": "int",
                "args": []
            },
            "Attribute_SetIntValue": {
                "description": "Set int value for an entity attribute.",
                "return": "void",
                "args": [
                    "cstring",
                    "int"
                ],
                "arg_names": [
                    "pName",
                    "nValue"
                ]
            },
            "SetOwner": {
                "description": "Sets this entity's owner",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "pOwner"
                ]
            },
            "GetTeamNumber": {
                "description": "Get the team number of this entity.",
                "return": "int",
                "args": []
            },
            "GetAngles": {
                "return": "qangle",
                "args": []
            },
            "GetCenter": {
                "description": "Get vector to center of object - absolute coords",
                "return": "vector",
                "args": []
            },
            "GetContext": {
                "description": "GetContext( name ): looks up a context and returns it if available. May return string, float, or null (if the context isn't found).",
                "return": "variant",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "name"
                ]
            },
            "SetContextThink": {
                "description": "Set a think function on this entity.",
                "return": "void",
                "args": [
                    "cstring",
                    "handle",
                    "float"
                ],
                "arg_names": [
                    "pszContextName",
                    "hThinkFunc",
                    "flInterval"
                ]
            },
            "GetLocalAngularVelocity": {
                "description": "Maybe local angvel",
                "return": "qangle",
                "args": []
            },
            "SetContext": {
                "description": "SetContext( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a string. Will last for duration (set 0 to mean 'forever').",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring",
                    "float"
                ],
                "arg_names": [
                    "pName",
                    "pValue",
                    "duration"
                ]
            },
            "GatherCriteria": {
                "description": "Returns a table containing the criteria that would be used for response queries on this entity. This is the same as the table that is passed to response rule script function callbacks.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hResult"
                ]
            },
            "GetVelocity": {
                "return": "vector",
                "args": []
            },
            "IsAlive": {
                "description": "Is this entity alive?",
                "return": "bool",
                "args": []
            },
            "GetMaxHealth": {
                "description": "Get the maximum health of this entity.",
                "return": "int",
                "args": []
            },
            "SetMaxHealth": {
                "description": "Set the maximum health of this entity.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "amt"
                ]
            },
            "GetHealth": {
                "description": "Get the health of this entity.",
                "return": "int",
                "args": []
            },
            "SetGravity": {
                "description": "Set PLAYER gravity, ignored for objects.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flGravity"
                ]
            },
            "GetLocalVelocity": {
                "description": "Get Entity relative velocity.",
                "return": "vector",
                "args": []
            },
            "ApplyAbsVelocityImpulse": {
                "description": "Apply a Velocity Impulse",
                "return": "void",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "vecImpulse"
                ]
            },
            "GetOrigin": {
                "return": "vector",
                "args": []
            }
        }
    },
    "CDOTA_Ability_Lua": {
        "extends": "CDOTABaseAbility",
        "description": "A lua-based ability.",
        "functions": {
            "OnChannelThink": {
                "description": "(float flInterval) Channeling is taking place.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flInterval"
                ]
            },
            "CastFilterResult": {
                "description": "Determine whether an issued command with no target is valid.",
                "return": "int",
                "args": []
            },
            "CastFilterResultLocation": {
                "description": "(Vector vLocation) Determine whether an issued command on a location is valid.",
                "return": "int",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "vLocation"
                ]
            },
            "GetManaCost": {
                "description": "Return mana cost at the given level (-1 is current).",
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iLevel"
                ]
            },
            "OnAbilityPhaseStart": {
                "description": "Cast time begins (return true for successful cast).",
                "return": "bool",
                "args": []
            },
            "GetConceptRecipientType": {
                "description": "Return who hears speech when this spell is cast.",
                "return": "int",
                "args": []
            },
            "OnHeroLevelUp": {
                "description": "Caster gained a level.",
                "return": "void",
                "args": []
            },
            "GetBehavior": {
                "description": "Return cast behavior type of this ability.",
                "return": "int",
                "args": []
            },
            "OnProjectileThink_ExtraData": {
                "description": "(Vector vLocation, table kv ) Projectile is actively moving.",
                "return": "void",
                "args": [
                    "vector",
                    "handle"
                ],
                "arg_names": [
                    "vLocation",
                    "table"
                ]
            },
            "GetChannelTime": {
                "description": "Return the channel time of this ability.",
                "return": "float",
                "args": []
            },
            "GetCustomCastErrorLocation": {
                "description": "(Vector vLocation) Return the error string of a failed command on a location.",
                "return": "cstring",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "vLocation"
                ]
            },
            "GetChannelAnimation": {
                "description": "Return channel animation of this ability.",
                "return": "int",
                "args": []
            },
            "OnChannelFinish": {
                "description": "(bool bInterrupted) Channel finished.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bInterrupted"
                ]
            },
            "GetIntrinsicModifierName": {
                "description": "Returns the name of the modifier applied passively by this ability.",
                "return": "cstring",
                "args": []
            },
            "GetCustomCastErrorTarget": {
                "description": "(HSCRIPT hTarget) Return the error string of a failed command on a target.",
                "return": "cstring",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hTarget"
                ]
            },
            "IsHiddenWhenStolen": {
                "description": "Returns true if this ability is hidden when stolen by Spell Steal.",
                "return": "bool",
                "args": []
            },
            "GetCastRange": {
                "description": "Return cast range of this ability.",
                "return": "int",
                "args": [
                    "vector",
                    "handle"
                ],
                "arg_names": [
                    "vLocation",
                    "hTarget"
                ]
            },
            "GetCooldown": {
                "description": "Return cooldown of this ability.",
                "return": "float",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iLevel"
                ]
            },
            "GetChannelledManaCostPerSecond": {
                "description": "Return mana cost at the given level per second while channeling (-1 is current).",
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iLevel"
                ]
            },
            "OnUnStolen": {
                "description": "Special behavior when lost by Spell Steal.",
                "return": "void",
                "args": []
            },
            "GetGoldCost": {
                "description": "Return gold cost at the given level (-1 is current).",
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iLevel"
                ]
            },
            "CastFilterResultTarget": {
                "description": "(HSCRIPT hTarget) Determine whether an issued command on a target is valid.",
                "return": "int",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hTarget"
                ]
            },
            "GetCustomCastError": {
                "description": "Return the error string of a failed command with no target.",
                "return": "cstring",
                "args": []
            },
            "OnProjectileHit_ExtraData": {
                "description": "(HSCRIPT hTarget, Vector vLocation, table kv) Projectile has collided with a given target or reached its destination (target is invalid).",
                "return": "bool",
                "args": [
                    "handle",
                    "vector",
                    "handle"
                ],
                "arg_names": [
                    "hTarget",
                    "vLocation",
                    "table"
                ]
            },
            "SpeakTrigger": {
                "description": "Return the type of speech used.",
                "return": "int",
                "args": []
            },
            "OnToggle": {
                "description": "Ability is toggled on/off.",
                "return": "void",
                "args": []
            },
            "IsStealable": {
                "description": "Returns true if this ability can be stolen by Spell Steal.",
                "return": "bool",
                "args": []
            },
            "OnSpellStart": {
                "description": "Cast time finished, spell effects begin.",
                "return": "void",
                "args": []
            },
            "OnUpgrade": {
                "description": "Ability gained a level.",
                "return": "void",
                "args": []
            },
            "OnAbilityPhaseInterrupted": {
                "description": "Cast time did not complete successfully.",
                "return": "void",
                "args": []
            },
            "OnProjectileHit": {
                "description": "(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid).",
                "return": "bool",
                "args": [
                    "handle",
                    "vector"
                ],
                "arg_names": [
                    "hTarget",
                    "vLocation"
                ]
            },
            "OnProjectileThink": {
                "description": "(Vector vLocation) Projectile is actively moving.",
                "return": "void",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "vLocation"
                ]
            },
            "OnOwnerSpawned": {
                "description": "Caster respawned or spawned for the first time.",
                "return": "void",
                "args": []
            },
            "OnOwnerDied": {
                "description": "Caster died.",
                "return": "void",
                "args": []
            },
            "OnInventoryContentsChanged": {
                "description": "Caster inventory changed.",
                "return": "void",
                "args": []
            },
            "OnItemEquipped": {
                "description": "( HSCRIPT hItem ) Caster equipped item.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hItem"
                ]
            },
            "OnHeroCalculateStatBonus": {
                "description": "Caster (hero only) gained a level, skilled an ability, or received a new stat bonus.",
                "return": "void",
                "args": []
            },
            "OnStolen": {
                "description": "( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hSourceAbility"
                ]
            },
            "OnHeroDiedNearby": {
                "description": "A hero has died in the vicinity (ie Urn), takes table of params.",
                "return": "void",
                "args": [
                    "handle",
                    "handle",
                    "handle"
                ],
                "arg_names": [
                    "unit",
                    "attacker",
                    "table"
                ]
            },
            "GetPlaybackRateOverride": {
                "description": "Return the animation rate of the cast animation.",
                "return": "float",
                "args": []
            },
            "GetCastAnimation": {
                "description": "Return casting animation of this ability.",
                "return": "int",
                "args": []
            },
            "IsHiddenAbilityCastable": {
                "description": "Returns true if this ability can be used when not on the action panel.",
                "return": "bool",
                "args": []
            },
            "GetAssociatedPrimaryAbilities": {
                "description": "Returns abilities that are stolen simultaneously, or otherwise related in functionality.",
                "return": "cstring",
                "args": []
            },
            "GetAssociatedSecondaryAbilities": {
                "description": "Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities.",
                "return": "cstring",
                "args": []
            },
            "IsRefreshable": {
                "description": "Returns true if this ability is refreshed by Refresher Orb.",
                "return": "bool",
                "args": []
            },
            "ProcsMagicStick": {
                "description": "Returns true if this ability will generate magic stick charges for nearby enemies.",
                "return": "bool",
                "args": []
            }
        }
    },
    "CDotaSubquestBase": {
        "extends": "CBaseEntity",
        "description": "A subquest",
        "functions": {
            "CompleteSubquest": {
                "description": "Mark this subquest complete",
                "return": "void",
                "args": []
            },
            "SetTextReplaceValue": {
                "description": "Set a subquest value",
                "return": "void",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "valueSlot",
                    "value"
                ]
            },
            "SetTextReplaceString": {
                "description": "Set the text replace string for this subquest",
                "return": "void",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pszString"
                ]
            }
        }
    },
    "CDOTA_Modifier_Lua_Vertical_Motion": {
        "extends": "CDOTA_Modifier_Lua",
        "description": "A lua-based vertical motion controller.",
        "functions": {
            "UpdateVerticalMotion": {
                "description": "Perform any motion from the given interval on the NPC.",
                "return": "void",
                "args": [
                    "handle",
                    "float"
                ],
                "arg_names": [
                    "me",
                    "dt"
                ]
            },
            "SetMotionPriority": {
                "description": "Set the priority",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nMotionPriority"
                ]
            },
            "GetMotionPriority": {
                "description": "Get the priority",
                "return": "int",
                "args": []
            },
            "ApplyVerticalMotionController": {
                "description": "Starts the vertical motion controller effects for this buff.  Returns true if successful.",
                "return": "bool",
                "args": []
            },
            "OnVerticalMotionInterrupted": {
                "description": "Called when the motion gets interrupted.",
                "return": "void",
                "args": []
            }
        }
    },
    "Convars": {
        "description": "!Access to convar functions",
        "functions": {
            "SetBool": {
                "description": "SetBool(name, val) : sets the value of the convar to the bool.",
                "return": "void",
                "args": [
                    "cstring",
                    "bool"
                ]
            },
            "SetFloat": {
                "description": "SetFloat(name, val) : sets the value of the convar to the float.",
                "return": "void",
                "args": [
                    "cstring",
                    "float"
                ]
            },
            "GetBool": {
                "description": "GetBool(name) : returns the convar as a boolean flag.",
                "return": "variant",
                "args": [
                    "cstring"
                ]
            },
            "GetInt": {
                "description": "GetInt(name) : returns the convar as an int. May return null if no such convar.",
                "return": "variant",
                "args": [
                    "cstring"
                ]
            },
            "SetInt": {
                "description": "SetInt(name, val) : sets the value of the convar to the int.",
                "return": "void",
                "args": [
                    "cstring",
                    "int"
                ]
            },
            "GetStr": {
                "description": "GetStr(name) : returns the convar as a string. May return null if no such convar.",
                "return": "variant",
                "args": [
                    "cstring"
                ]
            },
            "GetFloat": {
                "description": "GetFloat(name) : returns the convar as a float. May return null if no such convar.",
                "return": "variant",
                "args": [
                    "cstring"
                ]
            },
            "RegisterConvar": {
                "description": "RegisterConvar(name, defaultValue, helpString, flags): register a new console variable.",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring",
                    "cstring",
                    "int"
                ]
            },
            "SetStr": {
                "description": "SetStr(name, val) : sets the value of the convar to the string.",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring"
                ]
            },
            "GetCommandClient": {
                "description": "GetCommandClient() : returns the player who issued this console command.",
                "return": "handle",
                "args": []
            },
            "RegisterCommand": {
                "description": "RegisterCommand(name, fn, helpString, flags) : register a console command.",
                "return": "void",
                "args": [
                    "cstring",
                    "handle",
                    "cstring",
                    "int"
                ]
            },
            "GetDOTACommandClient": {
                "description": "GetDOTACommandClient() : returns the DOTA player who issued this console command.",
                "return": "handle",
                "args": []
            }
        }
    },
    "CEnvProjectedTexture": {
        "extends": "CBaseEntity",
        "description": "Dynamic, shadow casting light source.",
        "functions": {
            "SetNearRange": {
                "description": "Set light minimum range",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flRange"
                ]
            },
            "SetLinearAttenuation": {
                "description": "Set light linear attenuation value",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flAtten"
                ]
            },
            "SetVolumetrics": {
                "description": "Turn on/off light volumetrics: bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset",
                "return": "void",
                "args": [
                    "bool",
                    "float",
                    "float",
                    "int",
                    "float"
                ],
                "arg_names": [
                    "bOn",
                    "flIntensity",
                    "flNoise",
                    "nPlanes",
                    "flPlaneOffset"
                ]
            },
            "SetQuadraticAttenuation": {
                "description": "Set light quadratic attenuation value",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flAtten"
                ]
            },
            "SetFarRange": {
                "description": "Set light maximum range",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flRange"
                ]
            }
        }
    },
    "CDOTA_Ability_DataDriven": {
        "extends": "CDOTABaseAbility",
        "description": "A data driven ability.",
        "functions": {
            "ApplyDataDrivenThinker": {
                "description": "Applies a data driven thinker at the location",
                "return": "handle",
                "args": [
                    "handle",
                    "vector",
                    "cstring",
                    "handle"
                ],
                "arg_names": [
                    "hCaster",
                    "vLocation",
                    "pszModifierName",
                    "hModifierTable"
                ]
            },
            "ApplyDataDrivenModifier": {
                "description": "Applies a data driven modifier to the target",
                "return": "handle",
                "args": [
                    "handle",
                    "handle",
                    "cstring",
                    "handle"
                ],
                "arg_names": [
                    "hCaster",
                    "hTarget",
                    "pszModifierName",
                    "hModifierTable"
                ]
            }
        }
    },
    "CDOTA_Modifier_Lua_Horizontal_Motion": {
        "extends": "CDOTA_Modifier_Lua",
        "description": "A lua-based horizontal motion controller.",
        "functions": {
            "OnHorizontalMotionInterrupted": {
                "description": "Called when the motion gets interrupted.",
                "return": "void",
                "args": []
            },
            "SetPriority": {
                "description": "Set the priority",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nMotionPriority"
                ]
            },
            "UpdateHorizontalMotion": {
                "description": "Perform any motion from the given interval on the NPC.",
                "return": "void",
                "args": [
                    "handle",
                    "float"
                ],
                "arg_names": [
                    "me",
                    "dt"
                ]
            },
            "ApplyHorizontalMotionController": {
                "description": "Starts the horizontal motion controller effects for this buff.  Returns true if successful.",
                "return": "bool",
                "args": []
            },
            "GetPriority": {
                "description": "Get the priority",
                "return": "int",
                "args": []
            }
        }
    },
    "CDOTABaseAbility": {
        "extends": "CBaseEntity",
        "description": "An ability",
        "functions": {
            "IsAttributeBonus": {
                "return": "bool",
                "args": []
            },
            "SetHidden": {
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bHidden"
                ]
            },
            "IsHidden": {
                "return": "bool",
                "args": []
            },
            "GetCooldown": {
                "description": "Get the cooldown duration for this ability at a given level, not the amount of cooldown actually left.",
                "return": "float",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iLevel"
                ]
            },
            "CanAbilityBeUpgraded": {
                "return": "<unknown>",
                "args": []
            },
            "GetCursorTarget": {
                "return": "handle",
                "args": []
            },
            "SetAbilityIndex": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iIndex"
                ]
            },
            "SetLevel": {
                "description": "Sets the level of this ability.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iLevel"
                ]
            },
            "IsActivated": {
                "return": "bool",
                "args": []
            },
            "GetCursorPosition": {
                "return": "vector",
                "args": []
            },
            "SetOverrideCastPoint": {
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flCastPoint"
                ]
            },
            "ResetToggleOnRespawn": {
                "return": "bool",
                "args": []
            },
            "SetActivated": {
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bActivated"
                ]
            },
            "SpeakAbilityConcept": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iConcept"
                ]
            },
            "IsSharedWithTeammates": {
                "return": "bool",
                "args": []
            },
            "IsTrained": {
                "return": "bool",
                "args": []
            },
            "GetAbilityKeyValues": {
                "description": "Gets the key values definition for this ability.",
                "return": "variant",
                "args": []
            },
            "GetAbilityName": {
                "description": "Returns the name of this ability.",
                "return": "cstring",
                "args": []
            },
            "OnChannelThink": {
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flInterval"
                ]
            },
            "IsPassive": {
                "return": "bool",
                "args": []
            },
            "PayGoldCostForUpgrade": {
                "return": "void",
                "args": []
            },
            "OnOwnerDied": {
                "return": "void",
                "args": []
            },
            "GetAbilityIndex": {
                "return": "int",
                "args": []
            },
            "RefCountsModifiers": {
                "return": "bool",
                "args": []
            },
            "GetAbilityTargetFlags": {
                "return": "int",
                "args": []
            },
            "UpgradeAbility": {
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bSupressSpeech"
                ]
            },
            "ToggleAutoCast": {
                "return": "void",
                "args": []
            },
            "GetChannelStartTime": {
                "return": "float",
                "args": []
            },
            "GetCursorTargetingNothing": {
                "return": "bool",
                "args": []
            },
            "ToggleAbility": {
                "return": "void",
                "args": []
            },
            "GetHeroLevelRequiredToUpgrade": {
                "return": "int",
                "args": []
            },
            "OnAbilityPinged": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nPlayerID"
                ]
            },
            "GetManaCost": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iLevel"
                ]
            },
            "PayGoldCost": {
                "return": "void",
                "args": []
            },
            "GetModifierValue": {
                "return": "float",
                "args": []
            },
            "IsCosmetic": {
                "return": "bool",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hEntity"
                ]
            },
            "GetAbilityTargetType": {
                "return": "int",
                "args": []
            },
            "MarkAbilityButtonDirty": {
                "description": "Mark the ability button for this ability as needing a refresh.",
                "return": "void",
                "args": []
            },
            "StartCooldown": {
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flCooldown"
                ]
            },
            "SetRefCountsModifiers": {
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bRefCounts"
                ]
            },
            "GetChannelTime": {
                "return": "float",
                "args": []
            },
            "GetAbilityDamageType": {
                "return": "int",
                "args": []
            },
            "GetAbilityDamage": {
                "return": "int",
                "args": []
            },
            "GetLevel": {
                "description": "Get the current level of the ability.",
                "return": "int",
                "args": []
            },
            "GetCaster": {
                "return": "handle",
                "args": []
            },
            "OnHeroLevelUp": {
                "return": "void",
                "args": []
            },
            "GetBackswingTime": {
                "return": "float",
                "args": []
            },
            "OnSpellStart": {
                "return": "void",
                "args": []
            },
            "OnAbilityPhaseInterrupted": {
                "return": "void",
                "args": []
            },
            "GetIntrinsicModifierName": {
                "return": "cstring",
                "args": []
            },
            "OnAbilityPhaseStart": {
                "return": "bool",
                "args": []
            },
            "GetPlaybackRateOverride": {
                "return": "float",
                "args": []
            },
            "GetSpecialValueFor": {
                "description": "Gets a value from this ability's special value block for its current level.",
                "return": "variant",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "szName"
                ]
            },
            "GetAssociatedSecondaryAbilities": {
                "return": "cstring",
                "args": []
            },
            "IsItem": {
                "return": "bool",
                "args": []
            },
            "GetGoldCost": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iLevel"
                ]
            },
            "RefundManaCost": {
                "return": "void",
                "args": []
            },
            "GetModifierValueBonus": {
                "return": "float",
                "args": []
            },
            "GetAbilityType": {
                "return": "int",
                "args": []
            },
            "PayManaCost": {
                "return": "void",
                "args": []
            },
            "IsToggle": {
                "return": "bool",
                "args": []
            },
            "OnUpgrade": {
                "return": "void",
                "args": []
            },
            "GetDuration": {
                "return": "float",
                "args": []
            },
            "GetCastRange": {
                "description": "Gets the cast range of the ability.",
                "return": "int",
                "args": [
                    "vector",
                    "handle"
                ],
                "arg_names": [
                    "vLocation",
                    "hTarget"
                ]
            },
            "GetCloneSource": {
                "return": "handle",
                "args": []
            },
            "GetAutoCastState": {
                "return": "bool",
                "args": []
            },
            "GetAnimationIgnoresModelScale": {
                "return": "bool",
                "args": []
            },
            "GetGoldCostForUpgrade": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iLevel"
                ]
            },
            "IsChanneling": {
                "description": "Returns whether the ability is currently channeling.",
                "return": "bool",
                "args": []
            },
            "EndChannel": {
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bInterrupted"
                ]
            },
            "OnChannelFinish": {
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bInterrupted"
                ]
            },
            "ProcsMagicStick": {
                "return": "bool",
                "args": []
            },
            "NumModifiersUsingAbility": {
                "return": "int",
                "args": []
            },
            "UseResources": {
                "return": "void",
                "args": [
                    "bool",
                    "bool",
                    "bool"
                ],
                "arg_names": [
                    "bMana",
                    "bGold",
                    "bCooldown"
                ]
            },
            "GetCastPoint": {
                "return": "float",
                "args": []
            },
            "CastAbility": {
                "return": "void",
                "args": []
            },
            "IsCooldownReady": {
                "return": "bool",
                "args": []
            },
            "ContinueCasting": {
                "return": "bool",
                "args": []
            },
            "IsHiddenWhenStolen": {
                "return": "bool",
                "args": []
            },
            "DecrementModifierRefCount": {
                "return": "void",
                "args": []
            },
            "IncrementModifierRefCount": {
                "return": "void",
                "args": []
            },
            "IsOwnersManaEnough": {
                "return": "bool",
                "args": []
            },
            "IsFullyCastable": {
                "description": "Returns whether the ability can be cast.",
                "return": "bool",
                "args": []
            },
            "EndCooldown": {
                "description": "Clear the cooldown remaining on this ability.",
                "return": "void",
                "args": []
            },
            "GetChannelledManaCostPerSecond": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iLevel"
                ]
            },
            "GetSharedCooldownName": {
                "return": "cstring",
                "args": []
            },
            "IsOwnersGoldEnough": {
                "return": "bool",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nIssuerPlayerID"
                ]
            },
            "GetCooldownTime": {
                "return": "float",
                "args": []
            },
            "GetCooldownTimeRemaining": {
                "return": "float",
                "args": []
            },
            "ShouldUseResources": {
                "return": "bool",
                "args": []
            },
            "IsOwnersGoldEnoughForUpgrade": {
                "return": "bool",
                "args": []
            },
            "HeroXPChange": {
                "return": "bool",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flXP"
                ]
            },
            "CreateVisibilityNode": {
                "return": "void",
                "args": [
                    "vector",
                    "float",
                    "float"
                ],
                "arg_names": [
                    "vLocation",
                    "fRadius",
                    "fDuration"
                ]
            },
            "GetToggleState": {
                "return": "bool",
                "args": []
            },
            "GetBehavior": {
                "return": "int",
                "args": []
            },
            "GetAbilityTargetTeam": {
                "return": "int",
                "args": []
            },
            "GetMaxLevel": {
                "return": "int",
                "args": []
            },
            "GetConceptRecipientType": {
                "return": "int",
                "args": []
            },
            "OnOwnerSpawned": {
                "return": "void",
                "args": []
            },
            "OnToggle": {
                "return": "void",
                "args": []
            },
            "OnHeroCalculateStatBonus": {
                "return": "void",
                "args": []
            },
            "SpeakTrigger": {
                "return": "<unknown>",
                "args": []
            },
            "SetInAbilityPhase": {
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bInAbilityPhase"
                ]
            },
            "IsInAbilityPhase": {
                "description": "Returns whether the ability is currently casting.",
                "return": "bool",
                "args": []
            },
            "SetChanneling": {
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bChanneling"
                ]
            },
            "GetAssociatedPrimaryAbilities": {
                "return": "cstring",
                "args": []
            },
            "IsStealable": {
                "return": "bool",
                "args": []
            },
            "SetStolen": {
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bStolen"
                ]
            },
            "IsStolen": {
                "return": "bool",
                "args": []
            },
            "PlaysDefaultAnimWhenStolen": {
                "return": "bool",
                "args": []
            },
            "GetStolenActivityModifier": {
                "return": "cstring",
                "args": []
            },
            "GetLevelSpecialValueFor": {
                "return": "variant",
                "args": [
                    "cstring",
                    "int"
                ],
                "arg_names": [
                    "szName",
                    "nLevel"
                ]
            }
        }
    },
    "CDOTA_Ability_Nian_Dive": {
        "extends": "CDOTABaseAbility",
        "description": "A Dota NPC Unit",
        "functions": {
            "SetPlaybackRate": {
                "description": "Override playbackrate",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flRate"
                ]
            }
        }
    },
    "CDOTA_Modifier_Lua": {
        "extends": "CDOTA_Buff",
        "description": "A lua-based modifier.",
        "functions": {
            "OnDestroy": {
                "description": "Runs when the modifier is destroyed.",
                "return": "void",
                "args": []
            },
            "HeroEffectPriority": {
                "description": "Relationship of this hero effect with those from other buffs (higher is more likely to be shown).",
                "return": "int",
                "args": []
            },
            "IsPurgable": {
                "description": "True/false if this modifier can be purged.",
                "return": "bool",
                "args": []
            },
            "OnIntervalThink": {
                "description": "Runs when the think interval occurs.",
                "return": "void",
                "args": []
            },
            "StatusEffectPriority": {
                "description": "Relationship of this status effect with those from other buffs (higher is more likely to be shown).",
                "return": "int",
                "args": []
            },
            "IsStunDebuff": {
                "description": "True/false if this modifier is considered a stun for purge reasons.",
                "return": "bool",
                "args": []
            },
            "AllowIllusionDuplicate": {
                "description": "True/false if this modifier is active on illusions.",
                "return": "bool",
                "args": []
            },
            "GetAttributes": {
                "description": "Return the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t",
                "return": "int",
                "args": []
            },
            "GetAuraSearchType": {
                "description": "Return the unit classifications this aura applies its buff to.",
                "return": "int",
                "args": []
            },
            "IsHidden": {
                "description": "True/false if this modifier should be displayed on the buff bar.",
                "return": "bool",
                "args": []
            },
            "OnCreated": {
                "description": "Runs when the modifier is created.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "table"
                ]
            },
            "RemoveOnDeath": {
                "description": "True/false if this modifier is removed when the parent dies.",
                "return": "bool",
                "args": []
            },
            "IsAura": {
                "description": "True/false if this modifier is an aura.",
                "return": "bool",
                "args": []
            },
            "DestroyOnExpire": {
                "description": "True/false if this buff is removed when the duration expires.",
                "return": "bool",
                "args": []
            },
            "OnRefresh": {
                "description": "Runs when the modifier is refreshed.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "table"
                ]
            },
            "IsDebuff": {
                "description": "True/false if this modifier should be displayed as a debuff.",
                "return": "bool",
                "args": []
            },
            "IsAuraActiveOnDeath": {
                "description": "True/false if this aura provides buffs when the parent is dead.",
                "return": "bool",
                "args": []
            },
            "GetHeroEffectName": {
                "description": "Return the name of the hero effect particle system that is created while this modifier is active.",
                "return": "cstring",
                "args": []
            },
            "GetTexture": {
                "description": "Return the name of the buff icon to be shown for this modifier.",
                "return": "cstring",
                "args": []
            },
            "IsPurgeException": {
                "description": "True/false if this modifier can be purged by strong dispels.",
                "return": "bool",
                "args": []
            },
            "GetAuraSearchFlags": {
                "description": "Return the unit flags this aura respects when placing buffs.",
                "return": "int",
                "args": []
            },
            "GetModifierAura": {
                "description": "The name of the secondary modifier that will be applied by this modifier (if it is an aura).",
                "return": "cstring",
                "args": []
            },
            "GetStatusEffectName": {
                "description": "Return the name of the status effect particle system that is created while this modifier is active.",
                "return": "cstring",
                "args": []
            },
            "GetEffectName": {
                "description": "Return the name of the particle system that is created while this modifier is active.",
                "return": "cstring",
                "args": []
            },
            "GetEffectAttachType": {
                "description": "Return the attach type of the particle system from GetEffectName.",
                "return": "int",
                "args": []
            },
            "GetAuraDuration": {
                "description": "Returns aura stickiness",
                "return": "float",
                "args": []
            },
            "GetAuraSearchTeam": {
                "description": "Return the teams this aura applies its buff to.",
                "return": "int",
                "args": []
            },
            "GetAuraRadius": {
                "description": "Return the range around the parent this aura tries to apply its buff.",
                "return": "int",
                "args": []
            },
            "GetAuraEntityReject": {
                "description": "Return true/false if this entity should receive the aura under specific conditions",
                "return": "bool",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hEntity"
                ]
            }
        }
    },
    "CScriptHeroList": {
        "description": "!The global list of heroes",
        "functions": {
            "GetHero": {
                "description": "Get the Nth hero in the Hero List",
                "return": "handle",
                "args": [
                    "int"
                ]
            },
            "GetHeroCount": {
                "description": "Returns the number of heroes in the world",
                "return": "int",
                "args": []
            },
            "GetAllHeroes": {
                "description": "Returns all the heroes in the world",
                "return": "variant",
                "args": []
            }
        }
    },
    "CBaseModelEntity": {
        "extends": "CBaseEntity",
        "description": "Base entity with model",
        "functions": {
            "SetSize": {
                "return": "void",
                "args": [
                    "vector",
                    "vector"
                ],
                "arg_names": [
                    "mins",
                    "maxs"
                ]
            },
            "SetModel": {
                "return": "void",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pModelName"
                ]
            },
            "SetLightGroup": {
                "description": "SetLightGroup( string ): Sets the light group of the entity.",
                "return": "void",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pLightGroup"
                ]
            },
            "SetRenderAlpha": {
                "description": "SetRenderAlpha( int ): Set the alpha modulation of this entity.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nAlpha"
                ]
            },
            "SetRenderColor": {
                "description": "SetRenderColor( r, g, b ): Sets the render color of the entity.",
                "return": "void",
                "args": [
                    "int",
                    "int",
                    "int"
                ],
                "arg_names": [
                    "r",
                    "g",
                    "b"
                ]
            },
            "GetRenderAlpha": {
                "description": "GetRenderAlpha(): Get the alpha modulation of this entity.",
                "return": "int",
                "args": []
            },
            "SetRenderMode": {
                "description": "SetRenderMode( int ): Sets the render mode of the entity.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nMode"
                ]
            }
        }
    },
    "CDOTAGameManager": {
        "description": "!The Dota game manager",
        "functions": {
            "GetHeroNameByID": {
                "description": "Get the hero name given a hero ID.",
                "return": "cstring",
                "args": [
                    "int"
                ]
            },
            "GetHeroIDByName": {
                "description": "Get the hero ID given the hero name.",
                "return": "int",
                "args": [
                    "cstring"
                ]
            },
            "GetHeroDataByName_Script": {
                "description": "Get the hero unit ",
                "return": "variant",
                "args": [
                    "cstring"
                ]
            },
            "GetHeroUnitNameByID": {
                "description": "Get the hero unit name given the hero ID.",
                "return": "cstring",
                "args": [
                    "int"
                ]
            },
            "GetHeroNameForUnitName": {
                "description": "Get the hero name given a unit name.",
                "return": "cstring",
                "args": [
                    "cstring"
                ]
            }
        }
    },
    "CDOTA_Unit_Nian": {
        "extends": "CDOTA_BaseNPC_Creature",
        "description": "A Dota NPC Unit",
        "functions": {
            "GetHorn": {
                "description": "Is the Nian horn?",
                "return": "handle",
                "args": []
            },
            "IsHornAlive": {
                "description": "Is the Nian's horn broken?",
                "return": "bool",
                "args": []
            },
            "GetTail": {
                "description": "Is the Nian's tail broken?",
                "return": "handle",
                "args": []
            },
            "IsTailAlive": {
                "description": "Is the Nian's tail broken?",
                "return": "bool",
                "args": []
            }
        }
    },
    "GlobalSys": {
        "description": "!Access to global system functions",
        "functions": {
            "CommandLineInt": {
                "description": "CommandLineInt(name) : returns the command line param as an int.",
                "return": "variant",
                "args": [
                    "cstring",
                    "int"
                ]
            },
            "CommandLineFloat": {
                "description": "CommandLineFloat(name) : returns the command line param as a float.",
                "return": "variant",
                "args": [
                    "cstring",
                    "float"
                ]
            },
            "CommandLineStr": {
                "description": "CommandLineStr(name) : returns the command line param as a string.",
                "return": "variant",
                "args": [
                    "cstring",
                    "cstring"
                ]
            },
            "CommandLineCheck": {
                "description": "CommandLineCheck(name) : returns true if the command line param was used, otherwise false.",
                "return": "variant",
                "args": [
                    "cstring"
                ]
            }
        }
    },
    "CEntities": {
        "description": "!The global list of entities",
        "functions": {
            "FindByModelWithin": {
                "description": "Find entities by model name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
                "return": "handle",
                "args": [
                    "handle",
                    "cstring",
                    "vector",
                    "float"
                ]
            },
            "FindAllByName": {
                "description": "Find all entities by name. Returns an array containing all the found entities in it.",
                "return": "variant",
                "args": [
                    "cstring"
                ]
            },
            "FindAllByClassname": {
                "description": "Finds all entities by class name. Returns an array containing all the found entities.",
                "return": "variant",
                "args": [
                    "cstring"
                ]
            },
            "FindByClassname": {
                "description": "Find entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
                "return": "handle",
                "args": [
                    "handle",
                    "cstring"
                ]
            },
            "FindAllInSphere": {
                "description": "Find entities within a radius.",
                "return": "variant",
                "args": [
                    "vector",
                    "float"
                ]
            },
            "FindByTarget": {
                "description": "Find entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
                "return": "handle",
                "args": [
                    "handle",
                    "cstring"
                ]
            },
            "Next": {
                "description": "Continue an iteration over the list of entities, providing reference to a previously found entity",
                "return": "handle",
                "args": [
                    "handle"
                ]
            },
            "FindByName": {
                "description": "Find entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
                "return": "handle",
                "args": [
                    "handle",
                    "cstring"
                ]
            },
            "FindByModel": {
                "description": "Find entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
                "return": "handle",
                "args": [
                    "handle",
                    "cstring"
                ]
            },
            "First": {
                "description": "Begin an iteration over the list of entities",
                "return": "handle",
                "args": []
            },
            "CreateByClassname": {
                "description": "Creates an entity by classname",
                "return": "handle",
                "args": [
                    "cstring"
                ]
            },
            "FindInSphere": {
                "description": "Find entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
                "return": "handle",
                "args": [
                    "handle",
                    "vector",
                    "float"
                ]
            },
            "FindAllByModel": {
                "description": "Find entities by model name.",
                "return": "variant",
                "args": [
                    "cstring"
                ]
            },
            "FindAllByTarget": {
                "description": "Find entities by targetname.",
                "return": "variant",
                "args": [
                    "cstring"
                ]
            },
            "FindByNameNearest": {
                "description": "Find entities by name nearest to a point.",
                "return": "handle",
                "args": [
                    "cstring",
                    "vector",
                    "float"
                ]
            },
            "FindByNameWithin": {
                "description": "Find entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
                "return": "handle",
                "args": [
                    "handle",
                    "cstring",
                    "vector",
                    "float"
                ]
            },
            "FindAllByNameWithin": {
                "description": "Find entities by name within a radius.",
                "return": "variant",
                "args": [
                    "cstring",
                    "vector",
                    "float"
                ]
            },
            "FindAllByClassnameWithin": {
                "description": "Find entities by class name within a radius.",
                "return": "variant",
                "args": [
                    "cstring",
                    "vector",
                    "float"
                ]
            },
            "FindByClassnameNearest": {
                "description": "Find entities by class name nearest to a point.",
                "return": "handle",
                "args": [
                    "cstring",
                    "vector",
                    "float"
                ]
            },
            "FindByClassnameWithin": {
                "description": "Find entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
                "return": "handle",
                "args": [
                    "handle",
                    "cstring",
                    "vector",
                    "float"
                ]
            }
        }
    },
    "CInfoData": {
        "extends": "CBaseEntity",
        "description": "Info Data",
        "functions": {
            "QueryFloat": {
                "description": "Query float data for this key",
                "return": "float",
                "args": [
                    "utlstringtoken",
                    "float"
                ],
                "arg_names": [
                    "tok",
                    "flDefault"
                ]
            },
            "QueryVector": {
                "description": "Query vector data for this key",
                "return": "vector",
                "args": [
                    "utlstringtoken",
                    "vector"
                ],
                "arg_names": [
                    "tok",
                    "vDefault"
                ]
            },
            "QueryNumber": {
                "description": "Query number data for this key",
                "return": "float",
                "args": [
                    "utlstringtoken",
                    "float"
                ],
                "arg_names": [
                    "tok",
                    "flDefault"
                ]
            },
            "QueryString": {
                "description": "Query string data for this key",
                "return": "cstring",
                "args": [
                    "utlstringtoken",
                    "cstring"
                ],
                "arg_names": [
                    "tok",
                    "pDefault"
                ]
            },
            "QueryInt": {
                "description": "Query int data for this key",
                "return": "int",
                "args": [
                    "utlstringtoken",
                    "int"
                ],
                "arg_names": [
                    "tok",
                    "nDefault"
                ]
            },
            "QueryColor": {
                "description": "Query color data for this key",
                "return": "vector",
                "args": [
                    "utlstringtoken",
                    "vector"
                ],
                "arg_names": [
                    "tok",
                    "vDefault"
                ]
            }
        }
    },
    "CDOTA_SimpleObstruction": {
        "extends": "CBaseEntity",
        "description": "Simple obstruction",
        "functions": {
            "IsEnabled": {
                "description": "Returns whether the obstruction is currently active",
                "return": "bool",
                "args": []
            },
            "SetEnabled": {
                "description": "Enable or disable the obstruction",
                "return": "void",
                "args": [
                    "bool",
                    "bool"
                ],
                "arg_names": [
                    "bEnabled",
                    "bForce"
                ]
            }
        }
    },
    "CScriptParticleManager": {
        "description": "!Used to create and manage particle effects",
        "functions": {
            "DestroyParticle": {
                "description": "(int index, bool bDestroyImmediately) - Destroy a particle, if bDestroyImmediately destroy it without playing end caps.",
                "return": "void",
                "args": [
                    "int",
                    "bool"
                ]
            },
            "CreateParticle": {
                "description": "Creates a new particle effect",
                "return": "int",
                "args": [
                    "cstring",
                    "int",
                    "handle"
                ]
            },
            "SetParticleControlOrientation": {
                "description": "(int nFXIndex, int nPoint, vForward, vRight, vUp)",
                "return": "void",
                "args": [
                    "int",
                    "int",
                    "vector",
                    "vector",
                    "vector"
                ]
            },
            "ReleaseParticleIndex": {
                "description": "Frees the specified particle index",
                "return": "void",
                "args": [
                    "int"
                ]
            },
            "CreateParticleForPlayer": {
                "description": "Creates a new particle effect that only plays for the specified player",
                "return": "int",
                "args": [
                    "cstring",
                    "int",
                    "handle",
                    "handle"
                ]
            },
            "CreateParticleForTeam": {
                "description": "Creates a new particle effect that only plays for the specified team",
                "return": "int",
                "args": [
                    "cstring",
                    "int",
                    "handle",
                    "int"
                ]
            },
            "SetParticleControl": {
                "description": "Set the control point data for a control on a particle effect",
                "return": "void",
                "args": [
                    "int",
                    "int",
                    "vector"
                ]
            },
            "SetParticleControlForward": {
                "description": "(int nFXIndex, int nPoint, vForward)",
                "return": "void",
                "args": [
                    "int",
                    "int",
                    "vector"
                ]
            },
            "SetParticleAlwaysSimulate": {
                "return": "void",
                "args": [
                    "int"
                ]
            },
            "SetParticleControlEnt": {
                "return": "void",
                "args": [
                    "int",
                    "int",
                    "handle",
                    "int",
                    "cstring",
                    "vector",
                    "bool"
                ]
            },
            "GetParticleReplacement": {
                "return": "cstring",
                "args": [
                    "cstring",
                    "handle"
                ]
            }
        }
    },
    "CDOTA_Buff": {
        "description": "A modifier.",
        "functions": {
            "GetClass": {
                "return": "cstring",
                "args": []
            },
            "GetName": {
                "return": "cstring",
                "args": []
            },
            "GetElapsedTime": {
                "return": "float",
                "args": []
            },
            "Destroy": {
                "description": "Run all associated destroy functions, then remove the modifier.",
                "return": "void",
                "args": []
            },
            "SetDuration": {
                "description": "(flTime, bInformClients)",
                "return": "void",
                "args": [
                    "float",
                    "bool"
                ],
                "arg_names": [
                    "flDuration",
                    "bInformClient"
                ]
            },
            "GetDieTime": {
                "return": "float",
                "args": []
            },
            "IncrementStackCount": {
                "description": "Increase this modifier's stack count by 1.",
                "return": "void",
                "args": []
            },
            "GetAbility": {
                "description": "Get the ability that generated the modifier.",
                "return": "handle",
                "args": []
            },
            "StartIntervalThink": {
                "description": "Start this modifier's think function (OnIntervalThink) with the given interval (float).  To stop, call with -1.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flInterval"
                ]
            },
            "GetParent": {
                "description": "Get the unit the modifier is parented to.",
                "return": "handle",
                "args": []
            },
            "DecrementStackCount": {
                "description": "Decrease this modifier's stack count by 1.",
                "return": "void",
                "args": []
            },
            "GetDuration": {
                "return": "float",
                "args": []
            },
            "GetStackCount": {
                "return": "int",
                "args": []
            },
            "SetStackCount": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iCount"
                ]
            },
            "ForceRefresh": {
                "description": "Run all associated refresh functions on this modifier as if it was re-applied.",
                "return": "void",
                "args": []
            },
            "GetRemainingTime": {
                "return": "float",
                "args": []
            },
            "AddParticle": {
                "description": "(index, bDestroyImmediately, bStatusEffect, priority, bHeroEffect, bOverheadEffect",
                "return": "void",
                "args": [
                    "int",
                    "bool",
                    "bool",
                    "int",
                    "bool",
                    "bool"
                ],
                "arg_names": [
                    "i",
                    "bDestroyImmediately",
                    "bStatusEffect",
                    "iPriority",
                    "bHeroEffect",
                    "bOverheadEffect"
                ]
            },
            "GetCreationTime": {
                "return": "float",
                "args": []
            },
            "GetAuraDuration": {
                "description": "Returns aura stickiness (default 0.5)",
                "return": "float",
                "args": []
            },
            "GetCaster": {
                "description": "Get the owner of the ability responsible for the modifier.",
                "return": "handle",
                "args": []
            }
        }
    },
    "CPointWorldText": {
        "extends": "CBaseModelEntity",
        "description": "World-space text",
        "functions": {
            "SetMessage": {
                "description": "Set the message on this entity.",
                "return": "void",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pMessage"
                ]
            }
        }
    },
    "CDOTA_Item_Physical": {
        "extends": "CBaseAnimating",
        "description": "A physical item dropped in the world",
        "functions": {
            "SetContainedItem": {
                "description": "Set the contained item.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hItem"
                ]
            },
            "GetContainedItem": {
                "description": "Returned the contained item.",
                "return": "handle",
                "args": []
            },
            "GetCreationTime": {
                "description": "Returns the game time when this item was created in the world",
                "return": "float",
                "args": []
            }
        }
    },
    "CDOTA_BaseNPC_Hero": {
        "extends": "CDOTA_BaseNPC",
        "description": "A Dota Hero NPC",
        "functions": {
            "IncrementLastHitMultikill": {
                "description": "Value is stored in PlayerResource.",
                "return": "void",
                "args": []
            },
            "ModifyAgility": {
                "description": "Adds passed value to base attribute value, then calls CalculateStatBonus.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flNewAgility"
                ]
            },
            "GetPhysicalArmorValue": {
                "description": "Hero armor is affected by attributes.",
                "return": "float",
                "args": []
            },
            "SetBaseStrength": {
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flStrength"
                ]
            },
            "GetBonusDamageFromPrimaryStat": {
                "return": "int",
                "args": []
            },
            "GetIntellect": {
                "return": "float",
                "args": []
            },
            "RespawnHero": {
                "description": "Respawn this hero.",
                "return": "void",
                "args": [
                    "bool",
                    "bool",
                    "bool"
                ],
                "arg_names": [
                    "bBuyBack",
                    "bIsActuallyBeingSpawnedForTheFi",
                    "tTime"
                ]
            },
            "SetBuyBackDisabledByReapersScythe": {
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bBuybackDisabled"
                ]
            },
            "ShouldDoFlyHeightVisual": {
                "return": "bool",
                "args": []
            },
            "KilledHero": {
                "description": "Args: Hero, Inflictor",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ],
                "arg_names": [
                    "hHero",
                    "hInflictor"
                ]
            },
            "GetStatsBasedManaRegen": {
                "description": "Returns only the regen based on Intelligence.",
                "return": "float",
                "args": []
            },
            "GetPlayerID": {
                "description": "Returns player ID of the player owning this hero",
                "return": "int",
                "args": []
            },
            "ClearLastHitStreak": {
                "description": "Value is stored in PlayerResource.",
                "return": "void",
                "args": []
            },
            "GetIncreasedAttackSpeed": {
                "description": "Hero attack speed is also affected by agility.",
                "return": "float",
                "args": []
            },
            "Buyback": {
                "description": "Spend the gold and buyback with this hero.",
                "return": "void",
                "args": []
            },
            "IncrementDeaths": {
                "description": "Value is stored in PlayerResource.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iKillerID"
                ]
            },
            "GetAbilityPoints": {
                "description": "Gets the current unspent ability points.",
                "return": "int",
                "args": []
            },
            "SetBuybackCooldownTime": {
                "description": "Sets the buyback cooldown time.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flTime"
                ]
            },
            "CalculateStatBonus": {
                "description": "Recalculate all stats after the hero gains stats.",
                "return": "void",
                "args": []
            },
            "GetIntellectGain": {
                "return": "float",
                "args": []
            },
            "GetBuybackCost": {
                "description": "Return integer value for the gold cost of a buyback.",
                "return": "int",
                "args": []
            },
            "SetAbilityPoints": {
                "description": "Sets the current unspent ability points.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPoints"
                ]
            },
            "SetBotDifficulty": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nDifficulty"
                ]
            },
            "SetTimeUntilRespawn": {
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "time"
                ]
            },
            "GetDeaths": {
                "description": "Value is stored in PlayerResource.",
                "return": "int",
                "args": []
            },
            "SetPlayerID": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iPlayerID"
                ]
            },
            "SetCustomDeathXP": {
                "description": "Sets a custom experience value for this hero.  Note, GameRules boolean must be set for this to work!",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iValue"
                ]
            },
            "HasFlyingVision": {
                "return": "bool",
                "args": []
            },
            "GetAgilityGain": {
                "return": "float",
                "args": []
            },
            "GetPrimaryAttribute": {
                "description": "0 = strength, 1 = agility, 2 = intelligence.",
                "return": "int",
                "args": []
            },
            "GetDeathGoldCost": {
                "return": "int",
                "args": []
            },
            "ModifyIntellect": {
                "description": "Adds passed value to base attribute value, then calls CalculateStatBonus.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flNewIntellect"
                ]
            },
            "GetBuybackCooldownTime": {
                "description": "Return float value for the amount of time left on cooldown for this hero's buyback.",
                "return": "float",
                "args": []
            },
            "GetManaRegen": {
                "description": "Hero mana regen is affected by attributes.",
                "return": "float",
                "args": []
            },
            "GetTogglableWearable": {
                "description": "Get wearable entity in slot (slot)",
                "return": "handle",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nSlotType"
                ]
            },
            "HasAnyAvailableInventorySpace": {
                "return": "bool",
                "args": []
            },
            "GetBaseDamageMin": {
                "description": "Hero damage is also affected by attributes.",
                "return": "int",
                "args": []
            },
            "GetBuybackGoldLimitTime": {
                "description": "Returns the amount of time gold gain is limited after buying back.",
                "return": "float",
                "args": []
            },
            "GetAttacker": {
                "return": "int",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nIndex"
                ]
            },
            "HeroLevelUp": {
                "description": "Levels up the hero, true or false to play effects.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bPlayEffects"
                ]
            },
            "HasRoomForItem": {
                "description": "Args: const char* pItemName, bool bIncludeStashCombines, bool bAllowSelling",
                "return": "int",
                "args": [
                    "cstring",
                    "bool",
                    "bool"
                ],
                "arg_names": [
                    "pItemName",
                    "bIncludeStashCombines",
                    "bAllowSelling"
                ]
            },
            "ClearStreak": {
                "description": "Value is stored in PlayerResource.",
                "return": "void",
                "args": []
            },
            "GetBaseDamageMax": {
                "description": "Hero damage is also affected by attributes.",
                "return": "int",
                "args": []
            },
            "GetTimeUntilRespawn": {
                "return": "float",
                "args": []
            },
            "AddExperience": {
                "description": "Params: Float XP, Bool applyBotDifficultyScaling",
                "return": "bool",
                "args": [
                    "float",
                    "int",
                    "bool",
                    "bool"
                ],
                "arg_names": [
                    "flXP",
                    "nReason",
                    "bApplyBotDifficultyScaling",
                    "bIncrementTotal"
                ]
            },
            "GetNumItemsInStash": {
                "return": "int",
                "args": []
            },
            "GetAdditionalOwnedUnits": {
                "return": "variant",
                "args": []
            },
            "GetStrength": {
                "return": "float",
                "args": []
            },
            "GetDenies": {
                "description": "Value is stored in PlayerResource.",
                "return": "int",
                "args": []
            },
            "GetRespawnTime": {
                "return": "float",
                "args": []
            },
            "UpgradeAbility": {
                "description": "This upgrades the passed ability if it exists and the hero has enough ability points.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hAbility"
                ]
            },
            "SetBuybackGoldLimitTime": {
                "description": "Set the amount of time gold gain is limited after buying back.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flTime"
                ]
            },
            "CanEarnGold": {
                "description": "Returns boolean value result of buyback gold limit time less than game time.",
                "return": "bool",
                "args": []
            },
            "SetRespawnPosition": {
                "return": "void",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "vOrigin"
                ]
            },
            "GetRespawnsDisabled": {
                "description": "Is this hero prevented from respawning?",
                "return": "bool",
                "args": []
            },
            "IsBuybackDisabledByReapersScythe": {
                "return": "bool",
                "args": []
            },
            "HasOwnerAbandoned": {
                "return": "bool",
                "args": []
            },
            "GetAgility": {
                "return": "float",
                "args": []
            },
            "GetGold": {
                "description": "Returns gold amount for the player owning this hero",
                "return": "int",
                "args": []
            },
            "SetBaseAgility": {
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flAgility"
                ]
            },
            "IncrementLastHits": {
                "description": "Value is stored in PlayerResource.",
                "return": "void",
                "args": []
            },
            "GetKills": {
                "description": "Value is stored in PlayerResource.",
                "return": "int",
                "args": []
            },
            "ModifyStrength": {
                "description": "Adds passed value to base attribute value, then calls CalculateStatBonus.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flNewStrength"
                ]
            },
            "GetBaseStrength": {
                "return": "float",
                "args": []
            },
            "GetBaseAgility": {
                "return": "float",
                "args": []
            },
            "GetBaseIntellect": {
                "return": "float",
                "args": []
            },
            "IncrementNearbyCreepDeaths": {
                "description": "Value is stored in PlayerResource.",
                "return": "void",
                "args": []
            },
            "GetLastHits": {
                "description": "Value is stored in PlayerResource.",
                "return": "int",
                "args": []
            },
            "IncrementKills": {
                "description": "Passed ID is for the victim, killer ID is ID of the current hero.  Value is stored in PlayerResource.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iVictimID"
                ]
            },
            "SetBaseIntellect": {
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flIntellect"
                ]
            },
            "GetStrengthGain": {
                "return": "float",
                "args": []
            },
            "IncrementAssists": {
                "description": "Value is stored in PlayerResource.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iKillerID"
                ]
            },
            "GetNumAttackers": {
                "return": "int",
                "args": []
            },
            "IncrementDenies": {
                "description": "Value is stored in PlayerResource.",
                "return": "void",
                "args": []
            },
            "RecordLastHit": {
                "return": "void",
                "args": []
            },
            "SetGold": {
                "description": "Sets the gold amount for the player owning this hero",
                "return": "void",
                "args": [
                    "int",
                    "bool"
                ],
                "arg_names": [
                    "iGold",
                    "bReliable"
                ]
            },
            "IncrementLastHitStreak": {
                "description": "Value is stored in PlayerResource.",
                "return": "void",
                "args": []
            },
            "ClearLastHitMultikill": {
                "description": "Value is stored in PlayerResource.",
                "return": "void",
                "args": []
            },
            "GetAssists": {
                "description": "Value is stored in PlayerResource.",
                "return": "int",
                "args": []
            },
            "GetGoldBounty": {
                "return": "int",
                "args": []
            },
            "IncrementStreak": {
                "description": "Value is stored in PlayerResource.",
                "return": "void",
                "args": []
            },
            "GetMostRecentDamageTime": {
                "return": "float",
                "args": []
            },
            "GetStreak": {
                "description": "Value is stored in PlayerResource.",
                "return": "int",
                "args": []
            },
            "GetMultipleKillCount": {
                "return": "int",
                "args": []
            },
            "ModifyGold": {
                "description": "Gives this hero some gold.  Args: int nGoldChange, bool bReliable, int reason",
                "return": "int",
                "args": [
                    "int",
                    "bool",
                    "int"
                ],
                "arg_names": [
                    "iGoldChange",
                    "bReliable",
                    "iReason"
                ]
            },
            "GetHealthRegen": {
                "description": "Hero health regen is affected by attributes.",
                "return": "float",
                "args": []
            },
            "SpendGold": {
                "description": "Args: int nGold, int nReason",
                "return": "void",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iCost",
                    "iReason"
                ]
            },
            "GetPrimaryStatValue": {
                "return": "float",
                "args": []
            },
            "SetRespawnsDisabled": {
                "description": "Prevent this hero from respawning.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bDisableRespawns"
                ]
            },
            "GetNumItemsInInventory": {
                "return": "int",
                "args": []
            },
            "SetPrimaryAttribute": {
                "description": "Set this hero's primary attribute value.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nPrimaryAttribute"
                ]
            },
            "PerformTaunt": {
                "return": "void",
                "args": []
            },
            "GetCurrentXP": {
                "description": "Returns the amount of XP ",
                "return": "int",
                "args": []
            },
            "IsReincarnating": {
                "return": "bool",
                "args": []
            },
            "WillReincarnate": {
                "return": "bool",
                "args": []
            },
            "UnitCanRespawn": {
                "return": "bool",
                "args": []
            }
        }
    },
    "CCustomNetTableManager": {
        "description": "!Custom network table manager",
        "functions": {
            "GetTableValue": {
                "description": "( string TableName, string KeyName )",
                "return": "handle",
                "args": [
                    "cstring",
                    "cstring"
                ]
            },
            "SetTableValue": {
                "description": "( string TableName, string KeyName, script_table Value )",
                "return": "bool",
                "args": [
                    "cstring",
                    "cstring",
                    "handle"
                ]
            }
        }
    },
    "GridNav": {
        "description": "!The grid navigation system",
        "functions": {
            "GridPosToWorldCenterX": {
                "description": "Get the X position of the center of a given X index",
                "return": "float",
                "args": [
                    "int"
                ]
            },
            "WorldToGridPosX": {
                "description": "Get the X index of a given world X position",
                "return": "int",
                "args": [
                    "float"
                ]
            },
            "DestroyTreesAroundPoint": {
                "description": "Destroy all trees in the area(vPosition, flRadius, bFullCollision",
                "return": "void",
                "args": [
                    "vector",
                    "float",
                    "bool"
                ]
            },
            "IsTraversable": {
                "description": "Checks whether the given position is traversable",
                "return": "bool",
                "args": [
                    "vector"
                ]
            },
            "GridPosToWorldCenterY": {
                "description": "Get the Y position of the center of a given Y index",
                "return": "float",
                "args": [
                    "int"
                ]
            },
            "WorldToGridPosY": {
                "description": "Get the Y index of a given world Y position",
                "return": "int",
                "args": [
                    "float"
                ]
            },
            "IsBlocked": {
                "description": "Checks whether the given position is blocked",
                "return": "bool",
                "args": [
                    "vector"
                ]
            },
            "CanFindPath": {
                "description": "Determine if it is possible to reach the specified end point from the specified start point. bool (vStart, vEnd)",
                "return": "bool",
                "args": [
                    "vector",
                    "vector"
                ]
            },
            "FindPathLength": {
                "description": "Find a path between the two points an return the length of the path. If there is not a path between the points the returned value will be -1. float (vStart, vEnd )",
                "return": "float",
                "args": [
                    "vector",
                    "vector"
                ]
            },
            "IsNearbyTree": {
                "description": "(position, radius, checkFullTreeRadius?) Checks whether there are any trees overlapping the given point",
                "return": "bool",
                "args": [
                    "vector",
                    "float",
                    "bool"
                ]
            },
            "RegrowAllTrees": {
                "description": "Causes all trees in the map to regrow",
                "return": "void",
                "args": []
            },
            "GetAllTreesAroundPoint": {
                "description": "Returns a table full of tree HSCRIPTS (vPosition, flRadius, bFullCollision).",
                "return": "variant",
                "args": [
                    "vector",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "CEntityInstance": {
        "description": "CEntityInstance: Root class for all entities",
        "functions": {
            "GetName": {
                "return": "cstring",
                "args": []
            },
            "RedirectOutput": {
                "description": "Adds an I/O connection that will call the named function on the passed entity when the specified output fires.",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring",
                    "handle"
                ]
            },
            "GetDebugName": {
                "description": "Get the entity name w/help if not defined (i.e. classname/etc)",
                "return": "cstring",
                "args": []
            },
            "GetOrCreatePublicScriptScope": {
                "description": "Retrieve, creating if necessary, the public script-side data associated with an entity",
                "return": "handle",
                "args": []
            },
            "GetEntityHandle": {
                "description": "Get the entity as an EHANDLE",
                "return": "ehandle",
                "args": []
            },
            "FireOutput": {
                "description": "Fire an entity output",
                "return": "void",
                "args": [
                    "cstring",
                    "handle",
                    "handle",
                    "variant",
                    "float"
                ]
            },
            "GetPublicScriptScope": {
                "description": "Retrieve the public script-side data associated with an entity",
                "return": "handle",
                "args": []
            },
            "DisconnectOutput": {
                "description": "Removes a connected script function from an I/O event on this entity.",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring"
                ]
            },
            "ConnectOutput": {
                "description": "Adds an I/O connection that will call the named function on this entity when the specified output fires.",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring"
                ]
            },
            "GetEntityIndex": {
                "return": "int",
                "args": []
            },
            "GetClassname": {
                "return": "cstring",
                "args": []
            },
            "SetIntAttr": {
                "description": "Set Integer Attribute",
                "return": "void",
                "args": [
                    "cstring",
                    "int"
                ]
            },
            "Destroy": {
                "return": "void",
                "args": []
            },
            "RemoveSelf": {
                "description": "Delete this entity",
                "return": "void",
                "args": []
            },
            "GetIntAttr": {
                "description": "Get Integer Attribute",
                "return": "int",
                "args": [
                    "cstring"
                ]
            },
            "DisconnectRedirectedOutput": {
                "description": "Removes a connected script function from an I/O event on the passed entity.",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring",
                    "handle"
                ]
            },
            "entindex": {
                "return": "int",
                "args": []
            },
            "GetPrivateScriptScope": {
                "description": "Retrieve the private per-instance script-side data associated with an entity",
                "return": "handle",
                "args": []
            },
            "GetOrCreatePrivateScriptScope": {
                "description": "Retrieve, creating if necessary, the private per-instance script-side data associated with an entity",
                "return": "handle",
                "args": []
            }
        }
    },
    "CDOTA_MapTree": {
        "extends": "CBaseEntity",
        "description": "A tree in the Dota map",
        "functions": {
            "IsStanding": {
                "description": "Returns true if the tree is standing, false if it has been cut down",
                "return": "bool",
                "args": []
            },
            "GrowBack": {
                "description": "Grows back the tree if it was cut down.",
                "return": "void",
                "args": []
            },
            "CutDownRegrowAfter": {
                "description": "Cuts down this tree. Parameters: float flRegrowAfter (-1 = never regrow), int nTeamNumberKnownTo (-1 = invalid team)",
                "return": "void",
                "args": [
                    "float",
                    "int"
                ],
                "arg_names": [
                    "flRegrowAfter",
                    "nTeamNumberKnownTo"
                ]
            },
            "CutDown": {
                "description": "Cuts down this tree. Parameters: int nTeamNumberKnownTo (-1 = invalid team)",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nTreeNumberKnownTo"
                ]
            }
        }
    },
    "CDOTA_Item_DataDriven": {
        "extends": "CDOTA_Item",
        "description": "A data driven usable item.",
        "functions": {
            "ApplyDataDrivenThinker": {
                "description": "Applies a data driven thinker at the location",
                "return": "handle",
                "args": [
                    "handle",
                    "vector",
                    "cstring",
                    "handle"
                ],
                "arg_names": [
                    "hCaster",
                    "vLocation",
                    "pszModifierName",
                    "hModifierTable"
                ]
            },
            "ApplyDataDrivenModifier": {
                "description": "Applies a data driven modifier to the target",
                "return": "void",
                "args": [
                    "handle",
                    "handle",
                    "cstring",
                    "handle"
                ],
                "arg_names": [
                    "hCaster",
                    "hTarget",
                    "pszModifierName",
                    "hModifierTable"
                ]
            }
        }
    },
    "CDOTA_Item": {
        "extends": "CDOTABaseAbility",
        "description": "A usable item.",
        "functions": {
            "StacksWithOtherOwners": {
                "return": "bool",
                "args": []
            },
            "IsSellable": {
                "return": "bool",
                "args": []
            },
            "GetContainer": {
                "description": "Get the container for this item.",
                "return": "handle",
                "args": []
            },
            "IsMuted": {
                "return": "bool",
                "args": []
            },
            "GetCurrentCharges": {
                "description": "Get the number of charges this item currently has.",
                "return": "int",
                "args": []
            },
            "LaunchLoot": {
                "return": "void",
                "args": [
                    "bool",
                    "float",
                    "float",
                    "vector"
                ],
                "arg_names": [
                    "bAutoUse",
                    "flHeight",
                    "flDuration",
                    "vEndPoint"
                ]
            },
            "IsRecipe": {
                "return": "bool",
                "args": []
            },
            "IsCombinable": {
                "return": "bool",
                "args": []
            },
            "IsStackable": {
                "return": "bool",
                "args": []
            },
            "IsPermanent": {
                "return": "bool",
                "args": []
            },
            "IsItem": {
                "return": "bool",
                "args": []
            },
            "GetItemState": {
                "description": "Gets whether item is unequipped or ready.",
                "return": "int",
                "args": []
            },
            "SetCurrentCharges": {
                "description": "Set the number of charges on this item",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iCharges"
                ]
            },
            "RequiresCharges": {
                "return": "bool",
                "args": []
            },
            "Think": {
                "description": "Think this item",
                "return": "void",
                "args": []
            },
            "GetInitialCharges": {
                "description": "Get the initial number of charges this item has.",
                "return": "int",
                "args": []
            },
            "GetCost": {
                "return": "int",
                "args": []
            },
            "IsCastOnPickup": {
                "return": "bool",
                "args": []
            },
            "SetPurchaseTime": {
                "description": "Set the purchase time of this item",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flTime"
                ]
            },
            "SetPurchaser": {
                "description": "Set the purchaser of record for this item.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hPurchaser"
                ]
            },
            "SetStacksWithOtherOwners": {
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bStacksWithOtherOwners"
                ]
            },
            "GetPurchaseTime": {
                "description": "Get the purchase time of this item",
                "return": "float",
                "args": []
            },
            "IsDroppable": {
                "return": "bool",
                "args": []
            },
            "IsKillable": {
                "return": "bool",
                "args": []
            },
            "IsRecipeGenerated": {
                "return": "bool",
                "args": []
            },
            "IsPurchasable": {
                "return": "bool",
                "args": []
            },
            "GetShareability": {
                "return": "int",
                "args": []
            },
            "IsDisassemblable": {
                "return": "bool",
                "args": []
            },
            "IsAlertableItem": {
                "return": "bool",
                "args": []
            },
            "SetItemState": {
                "description": "Sets whether item is unequipped or ready.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iState"
                ]
            },
            "GetPurchaser": {
                "description": "Get the purchaser for this item.",
                "return": "handle",
                "args": []
            },
            "LaunchLootInitialHeight": {
                "return": "void",
                "args": [
                    "bool",
                    "float",
                    "float",
                    "float",
                    "vector"
                ],
                "arg_names": [
                    "bAutoUse",
                    "flInitialHeight",
                    "flLaunchHeight",
                    "flDuration",
                    "vEndPoint"
                ]
            }
        }
    },
    "CDOTABaseGameMode": {
        "extends": "CBaseEntity",
        "description": "Base game mode class",
        "functions": {
            "SetBotsAlwaysPushWithHuman": {
                "description": "Set if the bots should try their best to push with a human player.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bAlwaysPush"
                ]
            },
            "SetTowerBackdoorProtectionEnabled": {
                "description": "Enables/Disables tower backdoor protection.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bEnabled"
                ]
            },
            "SetModifyGoldFilter": {
                "description": "Set a filter function to control the behavior when a hero's gold is modified. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ],
                "arg_names": [
                    "hFunction",
                    "hContext"
                ]
            },
            "SetRemoveIllusionsOnDeath": {
                "description": "Make it so illusions are immediately removed upon death, rather than sticking around for a few seconds.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bRemove"
                ]
            },
            "GetFogOfWarDisabled": {
                "description": "Turn the fog of war on or off.",
                "return": "bool",
                "args": []
            },
            "SetBotsMaxPushTier": {
                "description": "Set the max tier of tower that bots want to push. (-1 to disable)",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nMaxTier"
                ]
            },
            "SetBotThinkingEnabled": {
                "description": "Enables/Disables bots in custom games. Note: this will only work with default heroes in the dota map.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bEnabled"
                ]
            },
            "ClearModifyGoldFilter": {
                "description": "Clear the script filter that controls how hero gold is modified.",
                "return": "void",
                "args": []
            },
            "GetStashPurchasingDisabled": {
                "description": "Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items.",
                "return": "bool",
                "args": []
            },
            "SetTopBarTeamValuesVisible": {
                "description": "Turning on/off the team values on the top game bar.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bVisible"
                ]
            },
            "SetAlwaysShowPlayerNames": {
                "description": "Set whether player names are always shown, regardless of client setting.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bEnabled"
                ]
            },
            "SetMaximumAttackSpeed": {
                "description": "Set the maximum attack speed for units.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nMaxSpeed"
                ]
            },
            "SetDaynightCycleDisabled": {
                "description": "Enable or disable the day/night cycle.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bDisable"
                ]
            },
            "IsBuybackEnabled": {
                "description": "Enables or disables buyback completely.",
                "return": "bool",
                "args": []
            },
            "SetModifyExperienceFilter": {
                "description": "Set a filter function to control the behavior when a hero's experience is modified. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ],
                "arg_names": [
                    "hFunction",
                    "hContext"
                ]
            },
            "SetHUDVisible": {
                "description": "Set the HUD element visibility.",
                "return": "void",
                "args": [
                    "int",
                    "bool"
                ],
                "arg_names": [
                    "iHUDElement",
                    "bVisible"
                ]
            },
            "GetStickyItemDisabled": {
                "description": "Hide the sticky item in the quickbuy.",
                "return": "bool",
                "args": []
            },
            "SetAnnouncerDisabled": {
                "description": "Mutes the in-game announcer.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bDisabled"
                ]
            },
            "GetTowerBackdoorProtectionEnabled": {
                "description": "Enables/Disables tower backdoor protection.",
                "return": "bool",
                "args": []
            },
            "ClearModifierGainedFilter": {
                "description": "Clear the script filter that controls the modifier filter.",
                "return": "void",
                "args": []
            },
            "ClearExecuteOrderFilter": {
                "description": "Clear the script filter that controls when a unit picks up an item.",
                "return": "void",
                "args": []
            },
            "GetTopBarTeamValuesOverride": {
                "description": "Override the values of the team values on the top game bar.",
                "return": "bool",
                "args": []
            },
            "GetUseCustomHeroLevels": {
                "description": "Are custom-defined XP values for hero level ups in use?",
                "return": "bool",
                "args": []
            },
            "SetFountainConstantManaRegen": {
                "description": "Set the constant rate that the fountain will regen mana. (-1 for default)",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flConstantManaRegen"
                ]
            },
            "SetTopBarTeamValue": {
                "description": "Set the team values on the top game bar.",
                "return": "void",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iTeam",
                    "nValue"
                ]
            },
            "SetBotsInLateGame": {
                "description": "Set if bots should enable their late game behavior.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bLateGame"
                ]
            },
            "GetAlwaysShowPlayerInventory": {
                "description": "Show the player hero's inventory in the HUD, regardless of what unit is selected.",
                "return": "bool",
                "args": []
            },
            "GetMaximumAttackSpeed": {
                "description": "Get the maximum attack speed for units.",
                "return": "int",
                "args": []
            },
            "GetMinimumAttackSpeed": {
                "description": "Get the minimum attack speed for units.",
                "return": "int",
                "args": []
            },
            "ClearModifyExperienceFilter": {
                "description": "Clear the script filter that controls how hero experience is modified.",
                "return": "void",
                "args": []
            },
            "SetOverrideSelectionEntity": {
                "description": "Set an override for the default selection entity, instead of each player's hero.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hOverrideEntity"
                ]
            },
            "GetAlwaysShowPlayerNames": {
                "description": "Get whether player names are always shown, regardless of client setting.",
                "return": "bool",
                "args": []
            },
            "SetAbilityTuningValueFilter": {
                "description": "Set a filter function to control the tuning values that abilities use. (Modify the table and Return true to use new values, return false to use the old values)",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ],
                "arg_names": [
                    "hFunction",
                    "hContext"
                ]
            },
            "GetRecommendedItemsDisabled": {
                "description": "Turn the panel for showing recommended items at the shop off/on.",
                "return": "bool",
                "args": []
            },
            "SetGoldSoundDisabled": {
                "description": "Turn the sound when gold is acquired off/on.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bDisabled"
                ]
            },
            "SetItemAddedToInventoryFilter": {
                "description": "Set a filter function to control what happens to items that are added to an inventory, return false to cancel the event",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ],
                "arg_names": [
                    "hFunction",
                    "hContext"
                ]
            },
            "GetGoldSoundDisabled": {
                "description": "Turn the sound when gold is acquired off/on.",
                "return": "bool",
                "args": []
            },
            "GetCameraDistanceOverride": {
                "description": "Set a different camera distance; dota default is 1134.",
                "return": "float",
                "args": []
            },
            "GetCustomBuybackCostEnabled": {
                "description": "Turns on capability to define custom buyback costs.",
                "return": "bool",
                "args": []
            },
            "GetCustomBuybackCooldownEnabled": {
                "description": "Turns on capability to define custom buyback cooldowns.",
                "return": "bool",
                "args": []
            },
            "GetAnnouncerDisabled": {
                "description": "Are in-game announcers disabled?",
                "return": "bool",
                "args": []
            },
            "ClearDamageFilter": {
                "description": "Clear the script filter that controls how a unit takes damage.",
                "return": "void",
                "args": []
            },
            "SetCustomGameForceHero": {
                "description": "Force all players to use the specified hero and disable the normal hero selection process. Must be used before hero selection.",
                "return": "void",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pHeroName"
                ]
            },
            "SetStashPurchasingDisabled": {
                "description": "Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bDisabled"
                ]
            },
            "SetAlwaysShowPlayerInventory": {
                "description": "Show the player hero's inventory in the HUD, regardless of what unit is selected.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bAlwaysShow"
                ]
            },
            "GetFixedRespawnTime": {
                "description": "Gets the fixed respawn time.",
                "return": "float",
                "args": []
            },
            "SetTopBarTeamValuesOverride": {
                "description": "Override the values of the team values on the top game bar.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bOverride"
                ]
            },
            "GetTopBarTeamValuesVisible": {
                "description": "Turning on/off the team values on the top game bar.",
                "return": "bool",
                "args": []
            },
            "GetCustomHeroMaxLevel": {
                "description": "Allows definition of the max level heroes can achieve (default is 25).",
                "return": "int",
                "args": []
            },
            "SetDamageFilter": {
                "description": "Set a filter function to control the behavior when a unit takes damage. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ],
                "arg_names": [
                    "hFunction",
                    "hContext"
                ]
            },
            "SetCustomHeroMaxLevel": {
                "description": "Allows definition of the max level heroes can achieve (default is 25).",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    ""
                ]
            },
            "SetBountyRunePickupFilter": {
                "description": "Set a filter function to control the behavior when a bounty rune is picked up. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ],
                "arg_names": [
                    "hFunction",
                    "hContext"
                ]
            },
            "SetFountainPercentageHealthRegen": {
                "description": "Set the percentage rate that the fountain will regen health. (-1 for default)",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flPercentageHealthRegen"
                ]
            },
            "IsDaynightCycleDisabled": {
                "description": "Is the day/night cycle disabled?",
                "return": "bool",
                "args": []
            },
            "SetRuneEnabled": {
                "description": "Set if a given type of rune is enabled.",
                "return": "void",
                "args": [
                    "int",
                    "bool"
                ],
                "arg_names": [
                    "nRune",
                    "bEnabled"
                ]
            },
            "SetExecuteOrderFilter": {
                "description": "Set a filter function to control the behavior when a unit picks up an item. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ],
                "arg_names": [
                    "hFunction",
                    "hContext"
                ]
            },
            "SetTrackingProjectileFilter": {
                "description": "Set a filter function to control when tracking projectiles are launched. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ],
                "arg_names": [
                    "hFunction",
                    "hContext"
                ]
            },
            "AreWeatherEffectsDisabled": {
                "description": "Get if weather effects are disabled on the client.",
                "return": "bool",
                "args": []
            },
            "SetCustomBuybackCooldownEnabled": {
                "description": "Turns on capability to define custom buyback cooldowns.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bEnabled"
                ]
            },
            "SetFogOfWarDisabled": {
                "description": "Turn the fog of war on or off.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bDisabled"
                ]
            },
            "SetWeatherEffectsDisabled": {
                "description": "Set if weather effects are disabled.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bDisable"
                ]
            },
            "SetRecommendedItemsDisabled": {
                "description": "Turn the panel for showing recommended items at the shop off/on.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bDisabled"
                ]
            },
            "SetStickyItemDisabled": {
                "description": "Hide the sticky item in the quickbuy.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bDisabled"
                ]
            },
            "SetUnseenFogOfWarEnabled": {
                "description": "Enable or disable unseen fog of war. When enabled parts of the map the player has never seen will be completely hidden by fog of war.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bEnabled"
                ]
            },
            "SetCustomBuybackCostEnabled": {
                "description": "Turns on capability to define custom buyback costs.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bEnabled"
                ]
            },
            "SetBuybackEnabled": {
                "description": "Enables or disables buyback completely.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bEnabled"
                ]
            },
            "SetCameraDistanceOverride": {
                "description": "Set a different camera distance; dota default is 1134.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flCameraDistanceOverride"
                ]
            },
            "SetUseCustomHeroLevels": {
                "description": "Turn on custom-defined XP values for hero level ups.  The table should be defined before switching this on.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bEnabled"
                ]
            },
            "SetCustomXPRequiredToReachNextLevel": {
                "description": "Allows definition of a table of hero XP values.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hTable"
                ]
            },
            "SetLoseGoldOnDeath": {
                "description": "Use to disable gold loss on death.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bEnabled"
                ]
            },
            "SetKillingSpreeAnnouncerDisabled": {
                "description": "Mutes the in-game killing spree announcer.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bDisabled"
                ]
            },
            "SetFixedRespawnTime": {
                "description": "Set a fixed delay for all players to respawn after.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flFixedRespawnTime"
                ]
            },
            "SetFountainPercentageManaRegen": {
                "description": "Set the percentage rate that the fountain will regen mana. (-1 for default)",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flPercentageManaRegen"
                ]
            },
            "SetMinimumAttackSpeed": {
                "description": "Set the minimum attack speed for units.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nMinSpeed"
                ]
            },
            "ClearTrackingProjectileFilter": {
                "description": "Clear the script filter that controls when tracking projectiles are launched.",
                "return": "void",
                "args": []
            },
            "SetRuneSpawnFilter": {
                "description": "Set a filter function to control what rune spawns. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ],
                "arg_names": [
                    "hFunction",
                    "hContext"
                ]
            },
            "ClearRuneSpawnFilter": {
                "description": "Clear the script filter that controls what rune spawns.",
                "return": "void",
                "args": []
            },
            "ClearBountyRunePickupFilter": {
                "description": "Clear the script filter that controls bounty rune pickup behavior.",
                "return": "void",
                "args": []
            },
            "SetModifierGainedFilter": {
                "description": "Set a filter function to control modifiers that are gained, return false to destroy modifier.",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ],
                "arg_names": [
                    "hFunction",
                    "hContext"
                ]
            },
            "ClearItemAddedToInventoryFilter": {
                "description": "Clear the script filter that controls the item added to inventory filter.",
                "return": "void",
                "args": []
            }
        }
    },
    "CDOTA_Ability_Nian_Roar": {
        "extends": "CDOTABaseAbility",
        "description": "Nian's roar ability",
        "functions": {
            "GetCastCount": {
                "description": "Number of times Nian has used the roar",
                "return": "int",
                "args": []
            }
        }
    },
    "CPhysicsProp": {
        "extends": "CBaseAnimating",
        "description": "Physics props",
        "functions": {
            "EnableMotion": {
                "description": "Enable motion for the prop",
                "return": "void",
                "args": []
            },
            "DisableMotion": {
                "description": "Disable motion for the prop",
                "return": "void",
                "args": []
            }
        }
    },
    "CDOTA_Modifier_Lua_Motion_Both": {
        "extends": "CDOTA_Modifier_Lua",
        "description": "A lua-based motion controller controlling both vertical and horizontal.",
        "functions": {
            "UpdateVerticalMotion": {
                "description": "Perform any motion from the given interval on the NPC.",
                "return": "void",
                "args": [
                    "handle",
                    "float"
                ],
                "arg_names": [
                    "me",
                    "dt"
                ]
            },
            "SetPriority": {
                "description": "Set the priority",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nMotionPriority"
                ]
            },
            "OnVerticalMotionInterrupted": {
                "description": "Called when the motion gets interrupted.",
                "return": "void",
                "args": []
            },
            "ApplyHorizontalMotionController": {
                "description": "Starts the horizontal motion controller effects for this buff.  Returns true if successful.",
                "return": "bool",
                "args": []
            },
            "UpdateHorizontalMotion": {
                "description": "Perform any motion from the given interval on the NPC.",
                "return": "void",
                "args": [
                    "handle",
                    "float"
                ],
                "arg_names": [
                    "me",
                    "dt"
                ]
            },
            "ApplyVerticalMotionController": {
                "description": "Starts the vertical motion controller effects for this buff.  Returns true if successful.",
                "return": "bool",
                "args": []
            },
            "GetPriority": {
                "description": "Get the priority",
                "return": "int",
                "args": []
            },
            "OnHorizontalMotionInterrupted": {
                "description": "Called when the motion gets interrupted.",
                "return": "void",
                "args": []
            }
        }
    },
    "CPropHMDAvatar": {
        "extends": "CBaseAnimating",
        "description": "HMD Avatar that owns the VR hands",
        "functions": {
            "GetVRHand": {
                "description": "Get VR hand by ID",
                "return": "handle",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nHandID"
                ]
            }
        }
    },
    "CBodyComponent": {
        "description": "Body Component Scriptdesc",
        "functions": {
            "SetAngularVelocity": {
                "return": "void",
                "args": [
                    "vector"
                ]
            },
            "SequenceDuration": {
                "description": "Returns the duration in seconds of the specified sequence",
                "return": "float",
                "args": [
                    "cstring"
                ]
            },
            "AddVelocity": {
                "description": "Add linear and angular velocity to the physics object",
                "return": "void",
                "args": [
                    "vector",
                    "vector"
                ]
            },
            "GetSequence": {
                "description": "Returns the active sequence\n",
                "return": "<unknown>",
                "args": []
            },
            "IsAttachedToParent": {
                "description": "Is attached to parent",
                "return": "bool",
                "args": []
            },
            "DetachFromParent": {
                "description": "Detach from its parent",
                "return": "void",
                "args": []
            },
            "AddImpulseAtPosition": {
                "description": "Apply an impulse at a worldspace position to the physics",
                "return": "void",
                "args": [
                    "vector",
                    "vector"
                ]
            },
            "SetBodyGroup": {
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "SetVelocity": {
                "return": "void",
                "args": [
                    "vector"
                ]
            },
            "SetAnimation": {
                "description": "Pass string for the animation to play on this model",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "SetMaterialGroup": {
                "return": "void",
                "args": [
                    "utlstringtoken"
                ]
            },
            "LookupSequence": {
                "description": "Returns a sequence id given a name\n",
                "return": "<unknown>",
                "args": [
                    "cstring"
                ]
            }
        }
    },
    "CDOTA_Ability_Animation_TailSpin": {
        "extends": "CDOTABaseAbility",
        "description": "A Dota NPC Unit.",
        "functions": {
            "SetPlaybackRate": {
                "description": "Override playbackrate",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flRate"
                ]
            }
        }
    },
    "CBaseTrigger": {
        "extends": "CBaseEntity",
        "description": "Base Trigger for all the triggers",
        "functions": {
            "IsTouching": {
                "description": "Checks whether the passed entity is touching the trigger.",
                "return": "bool",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hEnt"
                ]
            },
            "Disable": {
                "description": "Disable's the trigger",
                "return": "void",
                "args": []
            },
            "Enable": {
                "description": "Enable the trigger",
                "return": "void",
                "args": []
            }
        }
    },
    "CDOTAPlayer": {
        "extends": "CBaseAnimating",
        "description": "dota_player",
        "functions": {
            "GetPlayerID": {
                "description": "Get the player's official PlayerID; notably is -1 when the player isn't yet on a team.",
                "return": "int",
                "args": []
            },
            "SetKillCamUnit": {
                "description": "Set the kill cam unit for this hero.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hEntity"
                ]
            },
            "SetMusicStatus": {
                "description": "(nMusicStatus, flIntensity) - Set the music status for this player, note this will only really apply if dota_music_battle_enable is off.",
                "return": "void",
                "args": [
                    "int",
                    "float"
                ],
                "arg_names": [
                    "nMusicStatus",
                    "flIntensity"
                ]
            },
            "GetAssignedHero": {
                "description": "Get the player's hero.",
                "return": "handle",
                "args": []
            },
            "MakeRandomHeroSelection": {
                "description": "Randoms this player's hero.",
                "return": "void",
                "args": []
            }
        }
    },
    "CBaseAnimating": {
        "extends": "CBaseModelEntity",
        "description": "Animating models",
        "functions": {
            "SetPoseParameter": {
                "description": "Set the specified pose parameter to the specified value.",
                "return": "float",
                "args": [
                    "cstring",
                    "float"
                ],
                "arg_names": [
                    "szName",
                    "fValue"
                ]
            },
            "ScriptLookupAttachment": {
                "description": "Get the named attachement id.",
                "return": "int",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pAttachmentName"
                ]
            },
            "GetAttachmentOrigin": {
                "description": "Get the attachement id's origin vector.",
                "return": "vector",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iAttachment"
                ]
            },
            "SetBodygroup": {
                "description": "Sets a bodygroup.",
                "return": "void",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "iGroup",
                    "iValue"
                ]
            },
            "GetModelScale": {
                "description": "Get scale of entity's model.",
                "return": "float",
                "args": []
            },
            "SetBodygroupByName": {
                "description": "Sets a bodygroup by name.",
                "return": "void",
                "args": [
                    "cstring",
                    "int"
                ],
                "arg_names": [
                    "pName",
                    "iValue"
                ]
            },
            "GetAttachmentAngles": {
                "description": "Get the attachement id's angles as a p,y,r vector.",
                "return": "vector",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iAttachment"
                ]
            },
            "SetModelScale": {
                "description": "Set scale of entity's model.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flScale"
                ]
            },
            "IsSequenceFinished": {
                "description": "Ask whether the main sequence is done playing.",
                "return": "bool",
                "args": []
            }
        }
    },
    "CBaseFlex": {
        "extends": "CBaseAnimating",
        "description": "Animated characters who have vertex flex capability.",
        "functions": {
            "ScriptPlayScene": {
                "description": "( vcd file, delay ) - play specified vcd file",
                "return": "float",
                "args": [
                    "cstring",
                    "float"
                ],
                "arg_names": [
                    "pszScene",
                    "flDelay"
                ]
            },
            "GetCurrentScene": {
                "description": "Returns the instance of the oldest active scene entity (if any).",
                "return": "handle",
                "args": []
            },
            "GetSceneByIndex": {
                "description": "Returns the instance of the scene entity at the specified index.",
                "return": "handle",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "index"
                ]
            }
        }
    },
    "CDOTA_Ability_Animation_Attack": {
        "extends": "CDOTABaseAbility",
        "description": "A Dota NPC Unit",
        "functions": {
            "SetPlaybackRate": {
                "description": "Override playbackrate",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flRate"
                ]
            }
        }
    },
    "CBaseCombatCharacter": {
        "extends": "CBaseFlex",
        "description": "BaseCombatCharacter",
        "functions": {
            "GetFaction": {
                "description": "Get the combat character faction.",
                "return": "int",
                "args": []
            },
            "ShootPosition": {
                "description": "Returns the shoot position eyes (or hand in VR).",
                "return": "vector",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nHand"
                ]
            },
            "GetEquippedWeapons": {
                "description": "GetEquippedWeapons() : Returns an array of all the equipped weapons",
                "return": "variant",
                "args": []
            },
            "GetWeaponCount": {
                "description": "GetWeaponCount() : Gets the number of weapons currently equipped",
                "return": "int",
                "args": []
            }
        }
    },
    "CDOTA_BaseNPC": {
        "extends": "CBaseFlex",
        "description": "A Dota NPC Unit",
        "functions": {
            "GetItemInSlot": {
                "description": "Returns nth item in inventory slot (index is zero based).",
                "return": "handle",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "i"
                ]
            },
            "GetManaRegen": {
                "return": "float",
                "args": []
            },
            "SetMustReachEachGoalEntity": {
                "description": "Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "must"
                ]
            },
            "RemoveModifierByName": {
                "description": "Removes a modifier.",
                "return": "void",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pszScriptName"
                ]
            },
            "GetBaseAttackTime": {
                "return": "float",
                "args": []
            },
            "IsOwnedByAnyPlayer": {
                "description": "Is this unit owned by any non-bot player?",
                "return": "bool",
                "args": []
            },
            "MoveToPosition": {
                "description": "Issue a Move-To command.",
                "return": "void",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "vDest"
                ]
            },
            "IsBlind": {
                "return": "bool",
                "args": []
            },
            "NoUnitCollision": {
                "return": "bool",
                "args": []
            },
            "GetMana": {
                "description": "Get the mana on this unit.",
                "return": "float",
                "args": []
            },
            "GetIncreasedAttackSpeed": {
                "return": "float",
                "args": []
            },
            "GetStatsBasedManaRegen": {
                "description": "Returns mana regen rate per intelligence.",
                "return": "float",
                "args": []
            },
            "GetHealthDeficit": {
                "description": "Returns integer amount of health missing from max.",
                "return": "int",
                "args": []
            },
            "StartGesture": {
                "description": "Add the given gesture activity.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nActivity"
                ]
            },
            "CanSellItems": {
                "description": "Query if this unit can sell items.",
                "return": "bool",
                "args": []
            },
            "CastAbilityOnPosition": {
                "description": "Cast an ability on a position.",
                "return": "void",
                "args": [
                    "vector",
                    "handle",
                    "int"
                ],
                "arg_names": [
                    "vPosition",
                    "hAbility",
                    "iPlayerIndex"
                ]
            },
            "GetBaseDayTimeVisionRange": {
                "description": "Returns the vision range before modifiers.",
                "return": "int",
                "args": []
            },
            "GetCollisionPadding": {
                "description": "Returns the size of the collision padding around the hull.",
                "return": "float",
                "args": []
            },
            "IsLowAttackPriority": {
                "return": "bool",
                "args": []
            },
            "SetMana": {
                "description": "Set the mana on this unit.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flMana"
                ]
            },
            "GetTotalPurchasedUpgradeGoldCost": {
                "description": "Get how much gold has been spent on ability upgrades.",
                "return": "int",
                "args": []
            },
            "MoveToPositionAggressive": {
                "description": "Issue an Attack-Move-To command.",
                "return": "void",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "vDest"
                ]
            },
            "IsChanneling": {
                "description": "Is this unit currently channeling a spell?",
                "return": "bool",
                "args": []
            },
            "IsNightmared": {
                "return": "bool",
                "args": []
            },
            "GetConstantBasedManaRegen": {
                "description": "This Mana regen is derived from constant bonuses like Basilius.",
                "return": "float",
                "args": []
            },
            "TakeItem": {
                "description": "Removed the passed item from this unit's inventory.",
                "return": "handle",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hItem"
                ]
            },
            "SetNeverMoveToClearSpace": {
                "description": "If set to true, we will never attempt to move this unit to clear space, even when it unphases.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "neverMoveToClearSpace"
                ]
            },
            "SetMaximumGoldBounty": {
                "description": "Set the maximum gold bounty for this unit.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iGoldBountyMax"
                ]
            },
            "TriggerSpellAbsorb": {
                "return": "bool",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hAbility"
                ]
            },
            "SetStolenScepter": {
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bStolenScepter"
                ]
            },
            "IsOutOfGame": {
                "return": "bool",
                "args": []
            },
            "DisassembleItem": {
                "description": "Disassemble the passed item in this unit's inventory.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hItem"
                ]
            },
            "SetHasInventory": {
                "description": "Set if this unit has an inventory.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bHasInventory"
                ]
            },
            "RemoveAbility": {
                "description": "Remove an ability from this unit by name.",
                "return": "void",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pszAbilityName"
                ]
            },
            "GetAdditionalBattleMusicWeight": {
                "description": "Combat involving this creature will have this weight added to the music calcuations.",
                "return": "float",
                "args": []
            },
            "SpendMana": {
                "description": "Spend mana from this unit, this can be used for spending mana from abilities or item usage.",
                "return": "void",
                "args": [
                    "float",
                    "handle"
                ],
                "arg_names": [
                    "flManaSpent",
                    "hAbility"
                ]
            },
            "Heal": {
                "description": "Heal this unit.",
                "return": "void",
                "args": [
                    "float",
                    "handle"
                ],
                "arg_names": [
                    "flAmount",
                    "hInflictor"
                ]
            },
            "GetAverageTrueAttackDamage": {
                "description": "Returns the average value of the minimum and maximum damage values.",
                "return": "int",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hTarget"
                ]
            },
            "GetLevel": {
                "description": "Returns the level of this unit.",
                "return": "int",
                "args": []
            },
            "SwapAbilities": {
                "description": "Swaps the slots of the two passed abilities and sets them enabled/disabled.",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring",
                    "bool",
                    "bool"
                ],
                "arg_names": [
                    "pAbilityName1",
                    "pAbilityName2",
                    "bEnable1",
                    "bEnable2"
                ]
            },
            "GetMustReachEachGoalEntity": {
                "description": "Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path.",
                "return": "bool",
                "args": []
            },
            "DropItemAtPosition": {
                "description": "Drop an item at a given point.",
                "return": "void",
                "args": [
                    "vector",
                    "handle"
                ],
                "arg_names": [
                    "vDest",
                    "hItem"
                ]
            },
            "GetPhysicalArmorBaseValue": {
                "description": "Returns base physical armor value.",
                "return": "float",
                "args": []
            },
            "IsTower": {
                "description": "Is this a tower?",
                "return": "bool",
                "args": []
            },
            "GetInitialGoalEntity": {
                "description": "Returns the initial waypoint goal for this NPC.",
                "return": "handle",
                "args": []
            },
            "GetLastAttackTime": {
                "return": "float",
                "args": []
            },
            "GetMoveSpeedModifier": {
                "return": "float",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flBaseSpeed"
                ]
            },
            "IsMuted": {
                "return": "bool",
                "args": []
            },
            "GetGoldBounty": {
                "description": "Get the gold bounty on this unit.",
                "return": "int",
                "args": []
            },
            "CastAbilityImmediately": {
                "description": "Cast an ability immediately.",
                "return": "void",
                "args": [
                    "handle",
                    "int"
                ],
                "arg_names": [
                    "hAbility",
                    "iPlayerIndex"
                ]
            },
            "AddNewModifier": {
                "description": "Add a modifier to this unit.",
                "return": "handle",
                "args": [
                    "handle",
                    "handle",
                    "cstring",
                    "handle"
                ],
                "arg_names": [
                    "hCaster",
                    "hAbility",
                    "pszScriptName",
                    "hModifierTable"
                ]
            },
            "GetMainControllingPlayer": {
                "description": "Returns the player ID of the controlling player.",
                "return": "int",
                "args": []
            },
            "IsBuilding": {
                "description": "Is this unit a building?",
                "return": "bool",
                "args": []
            },
            "GetDayTimeVisionRange": {
                "description": "Returns the vision range after modifiers.",
                "return": "int",
                "args": []
            },
            "SetInitialGoalEntity": {
                "description": "Sets the initial waypoint goal for this NPC.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hGoal"
                ]
            },
            "GetModelRadius": {
                "return": "float",
                "args": []
            },
            "GetBaseDamageMax": {
                "description": "Get the maximum attack damage of this unit.",
                "return": "int",
                "args": []
            },
            "RemoveItem": {
                "description": "Removes the passed item from this unit's inventory and deletes it.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hItem"
                ]
            },
            "SetMinimumGoldBounty": {
                "description": "Set the minimum gold bounty for this unit.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iGoldBountyMin"
                ]
            },
            "GetIdealSpeed": {
                "description": "Returns speed after all modifiers.",
                "return": "float",
                "args": []
            },
            "SetBaseManaRegen": {
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flManaRegen"
                ]
            },
            "NoTeamSelect": {
                "return": "bool",
                "args": []
            },
            "SetCanSellItems": {
                "description": "Set whether or not this unit is allowed to sell items (bCanSellItems)",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bCanSell"
                ]
            },
            "IsFort": {
                "description": "Is this unit an Ancient?",
                "return": "bool",
                "args": []
            },
            "GetAttackTarget": {
                "return": "handle",
                "args": []
            },
            "GetHealthRegen": {
                "return": "float",
                "args": []
            },
            "GetMaxMana": {
                "description": "Get the maximum mana of this unit.",
                "return": "float",
                "args": []
            },
            "SetHullRadius": {
                "description": "Set the collision hull radius of this NPC.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flHullRadius"
                ]
            },
            "GetCloneSource": {
                "description": "Get clone source (Meepo Prime, if this is a Meepo)",
                "return": "handle",
                "args": []
            },
            "DropItemAtPositionImmediate": {
                "description": "Immediately drop a carried item at a given position.",
                "return": "void",
                "args": [
                    "handle",
                    "vector"
                ],
                "arg_names": [
                    "hItem",
                    "vPosition"
                ]
            },
            "SetNightTimeVisionRange": {
                "description": "Returns the vision range after modifiers.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iRange"
                ]
            },
            "IsBarracks": {
                "description": "Is this unit a Barracks?",
                "return": "bool",
                "args": []
            },
            "GetNightTimeVisionRange": {
                "description": "Returns the vision range after modifiers.",
                "return": "int",
                "args": []
            },
            "IsSummoned": {
                "description": "Is this unit summoned?",
                "return": "bool",
                "args": []
            },
            "GetAggroTarget": {
                "description": "Returns this unit's aggro target.",
                "return": "handle",
                "args": []
            },
            "GetAcquisitionRange": {
                "description": "Gets the range at which this unit will auto-acquire.",
                "return": "float",
                "args": []
            },
            "SetAttacking": {
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hAttackTarget"
                ]
            },
            "TimeUntilNextAttack": {
                "return": "float",
                "args": []
            },
            "GetBaseHealthRegen": {
                "return": "float",
                "args": []
            },
            "HasAbility": {
                "description": "See whether this unit has an ability by name.",
                "return": "bool",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pszAbilityName"
                ]
            },
            "AttackReady": {
                "return": "bool",
                "args": []
            },
            "FadeGesture": {
                "description": "Fade and remove the given gesture activity.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nActivity"
                ]
            },
            "GetNeverMoveToClearSpace": {
                "description": "If set to true, we will never attempt to move this unit to clear space, even when it unphases.",
                "return": "bool",
                "args": []
            },
            "MoveToNPC": {
                "description": "Move to follow a unit.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hNPC"
                ]
            },
            "HasModifier": {
                "description": "Sees if this unit has a given modifier.",
                "return": "bool",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pszScriptName"
                ]
            },
            "FindModifierByNameAndCaster": {
                "description": "Return a handle to the modifier of the given name from the passed caster if found, else nil ( string Name, hCaster )",
                "return": "handle",
                "args": [
                    "cstring",
                    "handle"
                ],
                "arg_names": [
                    "pszScriptName",
                    "hCaster"
                ]
            },
            "AddAbility": {
                "description": "Add an ability to this unit by name.",
                "return": "handle",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pszAbilityName"
                ]
            },
            "AddItemByName": {
                "description": "Add an item to this unit's inventory.",
                "return": "handle",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pszItemName"
                ]
            },
            "IsNeutralUnitType": {
                "description": "Is this a neutral?",
                "return": "bool",
                "args": []
            },
            "IsStunned": {
                "return": "bool",
                "args": []
            },
            "GetDeathXP": {
                "description": "Get the XP bounty on this unit.",
                "return": "int",
                "args": []
            },
            "IsConsideredHero": {
                "description": "Is this unit a considered a hero for targeting purposes?",
                "return": "bool",
                "args": []
            },
            "EjectItemFromStash": {
                "description": "Drops the selected item out of this unit's stash.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hItem"
                ]
            },
            "IsIdle": {
                "description": "Is this creature currently idle?",
                "return": "bool",
                "args": []
            },
            "GetCurrentVisionRange": {
                "description": "Gets the current vision range.",
                "return": "int",
                "args": []
            },
            "InterruptChannel": {
                "return": "void",
                "args": []
            },
            "FindAbilityByName": {
                "description": "Retrieve an ability by name from the unit.",
                "return": "handle",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pAbilityName"
                ]
            },
            "SetBaseAttackTime": {
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flBaseAttackTime"
                ]
            },
            "GetManaPercent": {
                "description": "Get the percent of mana remaining.",
                "return": "int",
                "args": []
            },
            "GetLastIdleChangeTime": {
                "description": "Get the last game time that this unit switched to/from idle state.",
                "return": "float",
                "args": []
            },
            "RespawnUnit": {
                "description": "Respawns the target unit if it can be respawned.",
                "return": "void",
                "args": []
            },
            "GetAbilityCount": {
                "return": "int",
                "args": []
            },
            "SetBaseMoveSpeed": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iMoveSpeed"
                ]
            },
            "AddItem": {
                "description": "Add an item to this unit's inventory.",
                "return": "handle",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hItem"
                ]
            },
            "SetBaseMagicalResistanceValue": {
                "description": "Sets base magical armor value.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flMagicalResistanceValue"
                ]
            },
            "GetHealthPercent": {
                "description": "Get the current health percent of the unit.",
                "return": "int",
                "args": []
            },
            "GetMinimumGoldBounty": {
                "description": "Get the minimum gold bounty for this unit.",
                "return": "int",
                "args": []
            },
            "GetBaseNightTimeVisionRange": {
                "description": "Returns the vision range after modifiers.",
                "return": "int",
                "args": []
            },
            "IsPhased": {
                "return": "bool",
                "args": []
            },
            "SetAggroTarget": {
                "description": "Set this unit's aggro target to a specified unit.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hAggroTarget"
                ]
            },
            "Stop": {
                "description": "Stop the current order.",
                "return": "void",
                "args": []
            },
            "IsCreep": {
                "description": "Is this unit a creep?",
                "return": "bool",
                "args": []
            },
            "SetAcquisitionRange": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nRange"
                ]
            },
            "ReduceMana": {
                "description": "Remove mana from this unit, this can be used for involuntary mana loss, not for mana that is spent.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flAmount"
                ]
            },
            "IsBlockDisabled": {
                "return": "bool",
                "args": []
            },
            "IsDisarmed": {
                "return": "bool",
                "args": []
            },
            "GetCursorPosition": {
                "return": "vector",
                "args": []
            },
            "SetBaseMaxHealth": {
                "description": "Set a new base max health value.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flBaseMaxHealth"
                ]
            },
            "SwapItems": {
                "description": "Swap the contents of two item slots (slot1, slot2)",
                "return": "void",
                "args": [
                    "int",
                    "int"
                ],
                "arg_names": [
                    "nSlot1",
                    "nSlot2"
                ]
            },
            "IsClone": {
                "description": "Is this unit a clone? (Meepo)",
                "return": "bool",
                "args": []
            },
            "IsPositionInRange": {
                "return": "bool",
                "args": [
                    "vector",
                    "float"
                ],
                "arg_names": [
                    "vPosition",
                    "flRange"
                ]
            },
            "IsCreature": {
                "description": "Is this a Creature type NPC?",
                "return": "bool",
                "args": []
            },
            "SellItem": {
                "description": "Sells the passed item in this unit's inventory.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hItem"
                ]
            },
            "IsMovementImpaired": {
                "return": "bool",
                "args": []
            },
            "GetPercentageBasedManaRegen": {
                "description": "This Mana regen is derived from % bonuses (from items like Void Stone).",
                "return": "float",
                "args": []
            },
            "NoTeamMoveTo": {
                "return": "bool",
                "args": []
            },
            "NoHealthBar": {
                "return": "bool",
                "args": []
            },
            "IsAncient": {
                "description": "Is this unit an Ancient?",
                "return": "bool",
                "args": []
            },
            "GetAttackRange": {
                "description": "Gets this unit's attack range after all modifiers.",
                "return": "float",
                "args": []
            },
            "ForcePlayActivityOnce": {
                "description": "Play an activity once, and then go back to idle.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nActivity"
                ]
            },
            "AddNoDraw": {
                "description": "Adds the no draw flag.",
                "return": "void",
                "args": []
            },
            "GetHullRadius": {
                "description": "Get the collision hull radius of this NPC.",
                "return": "float",
                "args": []
            },
            "GetAttackSpeed": {
                "return": "float",
                "args": []
            },
            "IsSpeciallyDeniable": {
                "return": "bool",
                "args": []
            },
            "NotifyWearablesOfModelChange": {
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bOriginalModel"
                ]
            },
            "HasFlyMovementCapability": {
                "return": "bool",
                "args": []
            },
            "GetPlayerOwnerID": {
                "description": "Get the owner player ID for this unit.",
                "return": "int",
                "args": []
            },
            "GetCurrentActiveAbility": {
                "description": "Get the ability this unit is currently casting.",
                "return": "handle",
                "args": []
            },
            "ManageModelChanges": {
                "return": "void",
                "args": []
            },
            "GetAttacksPerSecond": {
                "return": "float",
                "args": []
            },
            "IsAlive": {
                "description": "Is this unit alive?",
                "return": "bool",
                "args": []
            },
            "SetBaseDamageMin": {
                "description": "Sets the minimum base damage.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nMin"
                ]
            },
            "GetPaddedCollisionRadius": {
                "description": "Get the collision hull radius (including padding) of this NPC.",
                "return": "float",
                "args": []
            },
            "SetControllableByPlayer": {
                "description": "Set this unit controllable by the player with the passed ID.",
                "return": "void",
                "args": [
                    "int",
                    "bool"
                ],
                "arg_names": [
                    "iIndex",
                    "bSkipAdjustingPosition"
                ]
            },
            "IsCourier": {
                "description": "Is this unit a courier?",
                "return": "bool",
                "args": []
            },
            "SetAbilityByIndex": {
                "description": "Set the ability by index.",
                "return": "void",
                "args": [
                    "handle",
                    "int"
                ],
                "arg_names": [
                    "hAbility",
                    "iIndex"
                ]
            },
            "IsOther": {
                "description": "Is this unit a ward-type unit?",
                "return": "bool",
                "args": []
            },
            "MoveToTargetToAttack": {
                "description": "Move to a target to attack.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hTarget"
                ]
            },
            "SetIdleAcquire": {
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bIdleAcquire"
                ]
            },
            "MoveToNPCToGiveItem": {
                "description": "Give an item to another unit.",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ],
                "arg_names": [
                    "hNPC",
                    "hItem"
                ]
            },
            "IsAttackingEntity": {
                "return": "bool",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hEntity"
                ]
            },
            "GetHasteFactor": {
                "return": "float",
                "args": []
            },
            "PatrolToPosition": {
                "description": "Issue a Patrol-To command.",
                "return": "void",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "vDest"
                ]
            },
            "GiveMana": {
                "description": "Give mana to this unit, this can be used for mana gained by abilities or item usage.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flMana"
                ]
            },
            "GetBaseMaxHealth": {
                "description": "Gets the base max health value.",
                "return": "float",
                "args": []
            },
            "ModifyHealth": {
                "description": "Sets the health to a specific value, with optional flags or inflictors.",
                "return": "void",
                "args": [
                    "int",
                    "handle",
                    "bool",
                    "int"
                ],
                "arg_names": [
                    "iDesiredHealthValue",
                    "hAbility",
                    "bLethal",
                    "iAdditionalFlags"
                ]
            },
            "IsIllusion": {
                "return": "bool",
                "args": []
            },
            "IsBoss": {
                "description": "Is this unit a boss?",
                "return": "bool",
                "args": []
            },
            "PickupDroppedItem": {
                "description": "Pick up a dropped item.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hItem"
                ]
            },
            "PickupRune": {
                "description": "Pick up a rune.",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hItem"
                ]
            },
            "PerformAttack": {
                "description": "Performs an attack on a target.",
                "return": "void",
                "args": [
                    "handle",
                    "bool",
                    "bool",
                    "bool",
                    "bool",
                    "bool"
                ],
                "arg_names": [
                    "hTarget",
                    "bUseCastAttackOrb",
                    "bProcessProcs",
                    "bSkipCooldown",
                    "bIgnoreInvis",
                    "bUseProjectile"
                ]
            },
            "GetMagicalArmorValue": {
                "description": "Returns current magical armor value.",
                "return": "float",
                "args": []
            },
            "IsRealHero": {
                "description": "Is this a real hero?",
                "return": "bool",
                "args": []
            },
            "SetBaseDamageMax": {
                "description": "Sets the maximum base damage.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nMax"
                ]
            },
            "PlayVCD": {
                "description": "Play a VCD on the NPC.",
                "return": "void",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pVCD"
                ]
            },
            "GetAttackDamage": {
                "description": "Returns a random integer between the minimum and maximum base damage of the unit.",
                "return": "int",
                "args": []
            },
            "CastAbilityToggle": {
                "description": "Toggle an ability.",
                "return": "void",
                "args": [
                    "handle",
                    "int"
                ],
                "arg_names": [
                    "hAbility",
                    "iPlayerIndex"
                ]
            },
            "IsRooted": {
                "return": "bool",
                "args": []
            },
            "GetAttackRangeBuffer": {
                "description": "Gets the attack range buffer.",
                "return": "float",
                "args": []
            },
            "Kill": {
                "description": "Kills this NPC, with the params Ability and Attacker.",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ],
                "arg_names": [
                    "hAbility",
                    "hAttacker"
                ]
            },
            "BoundingRadius2D": {
                "return": "float",
                "args": []
            },
            "IsHero": {
                "description": "Is this a hero or hero illusion?",
                "return": "bool",
                "args": []
            },
            "CanEntityBeSeenByMyTeam": {
                "description": "Check FoW to see if an entity is visible.",
                "return": "bool",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hEntity"
                ]
            },
            "IsPhantom": {
                "description": "Is this a phantom unit?",
                "return": "bool",
                "args": []
            },
            "GetMaximumGoldBounty": {
                "description": "Get the maximum gold bounty for this unit.",
                "return": "int",
                "args": []
            },
            "ShouldIdleAcquire": {
                "return": "bool",
                "args": []
            },
            "SetDayTimeVisionRange": {
                "description": "Set the base vision range.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iRange"
                ]
            },
            "IsDominated": {
                "return": "bool",
                "args": []
            },
            "NotOnMinimapForEnemies": {
                "return": "bool",
                "args": []
            },
            "IsControllableByAnyPlayer": {
                "description": "Is this unit controlled by any non-bot player?",
                "return": "bool",
                "args": []
            },
            "SetDeathXP": {
                "description": "Set the XP bounty on this unit.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iXPBounty"
                ]
            },
            "GetPlayerOwner": {
                "description": "Returns the player that owns this unit.",
                "return": "handle",
                "args": []
            },
            "IsCommandRestricted": {
                "return": "bool",
                "args": []
            },
            "SetBaseHealthRegen": {
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flHealthRegen"
                ]
            },
            "GetBaseDamageMin": {
                "description": "Get the minimum attack damage of this unit.",
                "return": "int",
                "args": []
            },
            "GetPhysicalArmorValue": {
                "description": "Returns current physical armor value.",
                "return": "float",
                "args": []
            },
            "SetPhysicalArmorBaseValue": {
                "description": "Sets base physical armor value.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flPhysicalArmorValue"
                ]
            },
            "IsInvulnerable": {
                "return": "bool",
                "args": []
            },
            "GetBaseMagicalResistanceValue": {
                "description": "Returns base magical armor value.",
                "return": "float",
                "args": []
            },
            "IsFrozen": {
                "return": "bool",
                "args": []
            },
            "GetBaseMoveSpeed": {
                "return": "float",
                "args": []
            },
            "RemoveVerticalMotionController": {
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hBuff"
                ]
            },
            "GetSecondsPerAttack": {
                "return": "float",
                "args": []
            },
            "GetCastPoint": {
                "return": "float",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bAttack"
                ]
            },
            "IsSilenced": {
                "return": "bool",
                "args": []
            },
            "MakeIllusion": {
                "return": "void",
                "args": []
            },
            "StartGestureWithPlaybackRate": {
                "description": "Add the given gesture activity with a playback rate override.",
                "return": "void",
                "args": [
                    "int",
                    "float"
                ],
                "arg_names": [
                    "nActivity",
                    "flRate"
                ]
            },
            "NotOnMinimap": {
                "return": "bool",
                "args": []
            },
            "RemoveGesture": {
                "description": "Remove the given gesture activity.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nActivity"
                ]
            },
            "TriggerModifierDodge": {
                "return": "bool",
                "args": []
            },
            "TriggerSpellReflect": {
                "description": "Trigger the Lotus Orb-like effect.(hAbility)",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hAbility"
                ]
            },
            "SetForceAttackTarget": {
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hNPC"
                ]
            },
            "SetCursorPosition": {
                "return": "void",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "vLocation"
                ]
            },
            "HasAnyActiveAbilities": {
                "return": "bool",
                "args": []
            },
            "GetAbilityByIndex": {
                "description": "Retrieve an ability by index from the unit.",
                "return": "handle",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iIndex"
                ]
            },
            "ForceKill": {
                "description": "Kill this unit immediately.",
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bReincarnate"
                ]
            },
            "CastAbilityOnTarget": {
                "description": "Cast an ability on a target entity.",
                "return": "void",
                "args": [
                    "handle",
                    "handle",
                    "int"
                ],
                "arg_names": [
                    "hTarget",
                    "hAbility",
                    "iPlayerIndex"
                ]
            },
            "CastAbilityNoTarget": {
                "description": "Cast an ability with no target.",
                "return": "void",
                "args": [
                    "handle",
                    "int"
                ],
                "arg_names": [
                    "hAbility",
                    "iPlayerIndex"
                ]
            },
            "GetCursorTargetingNothing": {
                "return": "bool",
                "args": []
            },
            "SetOrigin": {
                "description": "Set the unit's origin.",
                "return": "void",
                "args": [
                    "vector"
                ],
                "arg_names": [
                    "vLocation"
                ]
            },
            "Hold": {
                "description": "Hold position.",
                "return": "void",
                "args": []
            },
            "SetCursorTargetingNothing": {
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bTargetingNothing"
                ]
            },
            "GetCursorCastTarget": {
                "return": "handle",
                "args": []
            },
            "HasInventory": {
                "description": "Does this unit have an inventory.",
                "return": "bool",
                "args": []
            },
            "IsAttackImmune": {
                "return": "bool",
                "args": []
            },
            "IsHexed": {
                "return": "bool",
                "args": []
            },
            "IsInvisible": {
                "return": "bool",
                "args": []
            },
            "IsMagicImmune": {
                "return": "bool",
                "args": []
            },
            "ProvidesVision": {
                "return": "bool",
                "args": []
            },
            "IsEvadeDisabled": {
                "return": "bool",
                "args": []
            },
            "IsUnselectable": {
                "return": "bool",
                "args": []
            },
            "IsUnableToMiss": {
                "return": "bool",
                "args": []
            },
            "PassivesDisabled": {
                "return": "bool",
                "args": []
            },
            "IsDeniable": {
                "return": "bool",
                "args": []
            },
            "HasItemInInventory": {
                "description": "See whether this unit has an item by name.",
                "return": "bool",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pItemName"
                ]
            },
            "HasScepter": {
                "return": "bool",
                "args": []
            },
            "GetAttackCapability": {
                "return": "int",
                "args": []
            },
            "SetAttackCapability": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iAttackCapabilities"
                ]
            },
            "SetMoveCapability": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iMoveCapabilities"
                ]
            },
            "SetUnitName": {
                "return": "void",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pName"
                ]
            },
            "HasGroundMovementCapability": {
                "return": "bool",
                "args": []
            },
            "HasMovementCapability": {
                "return": "bool",
                "args": []
            },
            "HasAttackCapability": {
                "return": "bool",
                "args": []
            },
            "HasFlyingVision": {
                "return": "bool",
                "args": []
            },
            "IsRangedAttacker": {
                "description": "Is this unit a ranged attacker?",
                "return": "bool",
                "args": []
            },
            "GetProjectileSpeed": {
                "return": "int",
                "args": []
            },
            "SetRangedProjectileName": {
                "return": "void",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pProjectileName"
                ]
            },
            "GetUnitName": {
                "description": "Get the name of this unit.",
                "return": "cstring",
                "args": []
            },
            "GetUnitLabel": {
                "return": "cstring",
                "args": []
            },
            "AttackNoEarlierThan": {
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flTime"
                ]
            },
            "GetForceAttackTarget": {
                "return": "handle",
                "args": []
            },
            "GetAttackAnimationPoint": {
                "return": "float",
                "args": []
            },
            "IsAttacking": {
                "return": "bool",
                "args": []
            },
            "AlertNearbyUnits": {
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ],
                "arg_names": [
                    "hAttacker",
                    "hAbility"
                ]
            },
            "SetAdditionalBattleMusicWeight": {
                "description": "Combat involving this creature will have this weight added to the music calcuations.",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flWeight"
                ]
            },
            "Interrupt": {
                "return": "void",
                "args": []
            },
            "InterruptMotionControllers": {
                "return": "void",
                "args": [
                    "bool"
                ],
                "arg_names": [
                    "bFindClearSpace"
                ]
            },
            "RemoveModifierByNameAndCaster": {
                "description": "Removes a modifier that was cast by the given caster.",
                "return": "void",
                "args": [
                    "cstring",
                    "handle"
                ],
                "arg_names": [
                    "pszScriptName",
                    "hCaster"
                ]
            },
            "RemoveHorizontalMotionController": {
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hBuff"
                ]
            },
            "GetRangeToUnit": {
                "return": "float",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hNPC"
                ]
            },
            "GetModifierCount": {
                "description": "How many modifiers does this unit have?",
                "return": "int",
                "args": []
            },
            "GetModifierNameByIndex": {
                "description": "Get a modifier name by index.",
                "return": "cstring",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nIndex"
                ]
            },
            "FindModifierByName": {
                "description": "Return a handle to the modifier of the given name if found, else nil (string Name )",
                "return": "handle",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pszScriptName"
                ]
            },
            "FindAllModifiers": {
                "description": "Returns a table of all of the modifiers on the NPC.",
                "return": "variant",
                "args": []
            },
            "FindAllModifiersByName": {
                "description": "Returns a table of all of the modifiers on the NPC with the passed name (modifierName)",
                "return": "variant",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pszScriptName"
                ]
            },
            "Purge": {
                "description": "(bool RemovePositiveBuffs, bool RemoveDebuffs, bool BuffsCreatedThisFrameOnly, bool RemoveStuns, bool RemoveExceptions",
                "return": "void",
                "args": [
                    "bool",
                    "bool",
                    "bool",
                    "bool",
                    "bool"
                ],
                "arg_names": [
                    "bRemovePositiveBuffs",
                    "bRemoveDebuffs",
                    "bFrameOnly",
                    "bRemoveStuns",
                    "bRemoveExceptions"
                ]
            },
            "GetModifierStackCount": {
                "description": "Gets the stack count of a given modifier.",
                "return": "int",
                "args": [
                    "cstring",
                    "handle"
                ],
                "arg_names": [
                    "pszScriptName",
                    "hCaster"
                ]
            },
            "SetModifierStackCount": {
                "description": "Sets the stack count of a given modifier.",
                "return": "void",
                "args": [
                    "cstring",
                    "handle",
                    "int"
                ],
                "arg_names": [
                    "pszScriptName",
                    "hCaster",
                    "nStackCount"
                ]
            },
            "IsOpposingTeam": {
                "return": "bool",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nTeam"
                ]
            },
            "GetOpposingTeamNumber": {
                "return": "int",
                "args": []
            },
            "MakeVisibleToTeam": {
                "return": "void",
                "args": [
                    "int",
                    "float"
                ],
                "arg_names": [
                    "iTeam",
                    "flDuration"
                ]
            },
            "GetCreationTime": {
                "return": "float",
                "args": []
            },
            "MakeVisibleDueToAttack": {
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "iTeam"
                ]
            },
            "MakePhantomBlocker": {
                "return": "void",
                "args": []
            },
            "IsPhantomBlocker": {
                "return": "bool",
                "args": []
            },
            "SetOriginalModel": {
                "description": "Sets the original model of this entity, which it will tend to fall back to anytime its state changes.",
                "return": "void",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pszModelName"
                ]
            },
            "AddSpeechBubble": {
                "description": "Add a speech bubble(1-4 live at a time) to this NPC.",
                "return": "void",
                "args": [
                    "int",
                    "cstring",
                    "float",
                    "uint",
                    "uint"
                ],
                "arg_names": [
                    "iBubble",
                    "pszSpeech",
                    "flDuration",
                    "unOffsetX",
                    "unOffsetY"
                ]
            },
            "DestroyAllSpeechBubbles": {
                "return": "void",
                "args": []
            },
            "UnitCanRespawn": {
                "return": "bool",
                "args": []
            },
            "AngerNearbyUnits": {
                "return": "void",
                "args": []
            },
            "RemoveNoDraw": {
                "description": "Remove the no draw flag.",
                "return": "void",
                "args": []
            },
            "IsMoving": {
                "description": "Is this unit moving?",
                "return": "bool",
                "args": []
            },
            "SetCursorCastTarget": {
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hEntity"
                ]
            },
            "SetCustomHealthLabel": {
                "return": "void",
                "args": [
                    "cstring",
                    "int",
                    "int",
                    "int"
                ],
                "arg_names": [
                    "pLabel",
                    "r",
                    "g",
                    "b"
                ]
            }
        }
    },
    "CDOTA_Ability_Nian_Leap": {
        "extends": "CDOTABaseAbility",
        "description": "A Dota NPC Unit",
        "functions": {
            "SetPlaybackRate": {
                "description": "Override playbackrate",
                "return": "void",
                "args": [
                    "float"
                ],
                "arg_names": [
                    "flRate"
                ]
            }
        }
    },
    "CMarkupVolumeTagged": {
        "extends": "CBaseEntity",
        "description": "Volume to add tags to the world",
        "functions": {
            "HasTag": {
                "description": "Does this volume have the given tag.",
                "return": "bool",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pszTagName"
                ]
            }
        }
    },
    "CNativeOutputs": {
        "description": "Container to hold outputs published by script to game",
        "functions": {
            "Init": {
                "description": "Initialize with number of outputs",
                "return": "void",
                "args": [
                    "int"
                ]
            },
            "AddOutput": {
                "description": "Add an output",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring"
                ]
            }
        }
    },
    "CDOTA_Unit_Courier": {
        "extends": "CDOTA_BaseNPC",
        "description": "A courier.",
        "functions": {
            "UpgradeToFlyingCourier": {
                "description": "Upgrade to a flying courier",
                "return": "bool",
                "args": []
            }
        }
    },
    "CDOTATutorial": {
        "description": "!DOTA Tutorial",
        "functions": {
            "SetQuickBuy": {
                "description": "Set players quick buy item.",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "StartTutorialMode": {
                "description": "Initialize Tutorial Mode",
                "return": "void",
                "args": []
            },
            "UpgradePlayerAbility": {
                "description": "Upgrade a specific ability for the local hero",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "EnableTowerAggroViz": {
                "description": "Alert the player when a tower becomes agro to their hero.",
                "return": "void",
                "args": [
                    "bool"
                ]
            },
            "FinishTutorial": {
                "description": "End the tutorial.",
                "return": "void",
                "args": []
            },
            "AddQuest": {
                "description": "Add a quest to the quest log",
                "return": "void",
                "args": [
                    "cstring",
                    "int",
                    "cstring",
                    "cstring"
                ]
            },
            "RemoveShopWhitelistItem": {
                "description": "Remove an item from the shop whitelist.",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "SelectPlayerTeam": {
                "description": "Select the team for the local player",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "CompleteQuest": {
                "description": "Complete a quest,",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "SetWhiteListEnabled": {
                "description": "Set if we should whitelist shop items.",
                "return": "void",
                "args": [
                    "bool"
                ]
            },
            "SetTimeFrozen": {
                "description": "Set if we should freeze time or not.",
                "return": "void",
                "args": [
                    "bool"
                ]
            },
            "SetOrModifyPlayerGold": {
                "description": "Set gold amount for the tutorial player. (int) GoldAmount, (bool) true=Set, false=Modify",
                "return": "void",
                "args": [
                    "int",
                    "bool"
                ]
            },
            "EnablePlayerOffscreenTip": {
                "description": "Enable the tip to alert players how to find their hero.",
                "return": "void",
                "args": [
                    "bool"
                ]
            },
            "SetTutorialConvar": {
                "description": "Set a tutorial convar",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring"
                ]
            },
            "SelectHero": {
                "description": "Select a hero for the local player",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "SetShopOpen": {
                "description": "Set the shop open or closed.",
                "return": "void",
                "args": [
                    "bool"
                ]
            },
            "ForceGameStart": {
                "description": "Force the start of the game.",
                "return": "void",
                "args": []
            },
            "CreateLocationTask": {
                "description": "Add a task to move to a specific location",
                "return": "void",
                "args": [
                    "vector"
                ]
            },
            "SetItemGuide": {
                "description": "Set the current item guide.",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "EnableCreepAggroViz": {
                "description": "Alert the player when a creep becomes agro to their hero.",
                "return": "void",
                "args": [
                    "bool"
                ]
            },
            "AddShopWhitelistItem": {
                "description": "Add an item to the shop whitelist.",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "GetTimeFrozen": {
                "description": "Is our time frozen?",
                "return": "bool",
                "args": []
            },
            "SetTutorialUI": {
                "description": "Set the UI to use a reduced version to focus attention to specific elements.",
                "return": "void",
                "args": [
                    "int"
                ]
            },
            "AddBot": {
                "description": "Add a computer controlled bot.",
                "return": "bool",
                "args": [
                    "cstring",
                    "cstring",
                    "cstring",
                    "bool"
                ]
            },
            "IsItemInWhiteList": {
                "description": "Is this item currently in the white list.",
                "return": "bool",
                "args": [
                    "cstring"
                ]
            }
        }
    },
    "CDOTA_BaseNPC_Building": {
        "extends": "CDOTA_BaseNPC",
        "description": "A building.",
        "functions": {
            "GetInvulnCount": {
                "description": "Get the invulnerability count for a building.",
                "return": "int",
                "args": []
            },
            "SetInvulnCount": {
                "description": "Set the invulnerability counter of this building.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nInvulnCount"
                ]
            }
        }
    },
    "CSceneEntity": {
        "extends": "CBaseEntity",
        "description": "Choreographed scene which controls animation and/or dialog on one or more actors.",
        "functions": {
            "FindNamedEntity": {
                "description": "given an entity reference, such as !target, get actual entity from scene object",
                "return": "handle",
                "args": [
                    "cstring"
                ]
            },
            "Start": {
                "description": "Start scene playback, takes activatorEntity as param",
                "return": "void",
                "args": [
                    "handle"
                ]
            },
            "EstimateLength": {
                "description": "Returns length of this scene in seconds.",
                "return": "float",
                "args": []
            },
            "IsPlayingBack": {
                "description": "If this scene is currently playing.",
                "return": "bool",
                "args": []
            },
            "FindCamera": {
                "description": "Get the camera",
                "return": "handle",
                "args": []
            },
            "Cancel": {
                "description": "Cancel scene playback",
                "return": "void",
                "args": []
            },
            "IsPaused": {
                "description": "If this scene is currently paused.",
                "return": "bool",
                "args": []
            },
            "AddBroadcastTeamTarget": {
                "description": "Adds a team (by index) to the broadcast list",
                "return": "void",
                "args": [
                    "int"
                ]
            },
            "RemoveBroadcastTeamTarget": {
                "description": "Removes a team (by index) from the broadcast list",
                "return": "void",
                "args": [
                    "int"
                ]
            },
            "LoadSceneFromString": {
                "description": "given a dummy scene name and a vcd string, load the scene",
                "return": "bool",
                "args": [
                    "cstring",
                    "cstring"
                ]
            }
        }
    },
    "CPropVRHand": {
        "extends": "CBaseAnimating",
        "description": "VR hand that controls poses and controller state",
        "functions": {
            "FireHapticPulse": {
                "description": "Fire a haptic pulse on this hand. [0,2] for strength.",
                "return": "void",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nStrength"
                ]
            },
            "SetHandAttachment": {
                "description": "Set the attachment for this hand",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hAttachment"
                ]
            },
            "AddHandAttachment": {
                "description": "Add the attachment to this hand",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hAttachment"
                ]
            },
            "GetHandAttachment": {
                "description": "Get the attachment on this hand",
                "return": "handle",
                "args": []
            }
        }
    },
    "CLogicScript": {
        "extends": "CBaseEntity",
        "description": "Container for game scripts.",
        "functions": {}
    },
    "CEnvEntityMaker": {
        "extends": "CBaseEntity",
        "description": "env_entity_maker",
        "functions": {
            "SpawnEntity": {
                "description": "Create an entity at the location of the maker",
                "return": "void",
                "args": []
            },
            "SpawnEntityAtEntityOrigin": {
                "description": "Create an entity at the location of a specified entity instance",
                "return": "void",
                "args": [
                    "handle"
                ],
                "arg_names": [
                    "hEntity"
                ]
            },
            "SpawnEntityAtNamedEntityOrigin": {
                "description": "Create an entity at the location of a named entity",
                "return": "void",
                "args": [
                    "cstring"
                ],
                "arg_names": [
                    "pszName"
                ]
            },
            "SpawnEntityAtLocation": {
                "description": "Create an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll)",
                "return": "void",
                "args": [
                    "vector",
                    "vector"
                ],
                "arg_names": [
                    "vecAlternateOrigin",
                    "vecAlternateAngles"
                ]
            }
        }
    },
    "CPointTemplate": {
        "extends": "CBaseEntity",
        "description": "point_template",
        "functions": {
            "DeleteCreatedSpawnGroups": {
                "description": "DeleteCreatedSpawnGroups() : Deletes any spawn groups that this point_template has spawned. Note: The point_template will not be deleted by this.",
                "return": "void",
                "args": []
            },
            "GetSpawnedEntities": {
                "description": "GetSpawnedEntities() : Get the list of the most recent spawned entities",
                "return": "handle",
                "args": []
            },
            "SetSpawnCallback": {
                "description": "SetSpawnCallback( hCallbackFunc, hCallbackScope, hCallbackData ) : Set a callback for when the template spawns entities. The spawned entities will be passed in as an array.",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ],
                "arg_names": [
                    "hCallbackFunc",
                    "hCallbackScope"
                ]
            },
            "ForceSpawn": {
                "description": "ForceSpawn() : Spawns all of the entities the point_template is pointing at.",
                "return": "void",
                "args": []
            }
        }
    },
    "CBasePlayer": {
        "extends": "CBaseCombatCharacter",
        "description": "The player entity.",
        "functions": {
            "IsNoclipping": {
                "description": "Returns true if the player is in noclip mode.",
                "return": "bool",
                "args": []
            },
            "Quit": {
                "description": "Quit the game from script.",
                "return": "void",
                "args": []
            },
            "GetUserID": {
                "description": "Returns the player's user id.",
                "return": "int",
                "args": []
            },
            "IsVRControllerButtonPressed": {
                "description": "Returns true if the controller button is pressed.",
                "return": "bool",
                "args": [
                    "int"
                ],
                "arg_names": [
                    "nButton"
                ]
            },
            "IsUsePressed": {
                "description": "Returns true if the use key is pressed.",
                "return": "bool",
                "args": []
            },
            "GetHMDAnchor": {
                "description": "Returns the HMD anchor entity for this player if it exists.",
                "return": "handle",
                "args": []
            },
            "GetHMDAvatar": {
                "description": "Returns the HMD Avatar entity for this player if it exists.",
                "return": "handle",
                "args": []
            }
        }
    },
    "CScriptKeyValues": {
        "description": "Container to hold keyvalues published to spawn functions in script",
        "functions": {
            "GetValue": {
                "description": "Reads a spawn key",
                "return": "variant",
                "args": [
                    "cstring"
                ]
            }
        }
    },
    "CScriptPrecacheContext": {
        "description": "Container to hold context published to precache functions in script",
        "functions": {
            "GetValue": {
                "description": "Reads a spawn key",
                "return": "variant",
                "args": [
                    "cstring"
                ]
            },
            "AddResource": {
                "description": "Precaches a specific resource",
                "return": "void",
                "args": [
                    "cstring"
                ]
            }
        }
    },
    "CEntityScriptFramework": {
        "description": "C-side of entity framework",
        "functions": {}
    },
    "CDOTAGamerules": {
        "description": "!DOTA GameRules",
        "functions": {
            "GetDOTATime": {
                "description": "(b IncludePregameTime b IncludeNegativeTime) Returns the actual DOTA in-game clock time.",
                "return": "float",
                "args": [
                    "bool",
                    "bool"
                ]
            },
            "DidMatchSignoutTimeOut": {
                "description": "true when we have waited some time after end of the game and not received signout",
                "return": "bool",
                "args": []
            },
            "SetCustomGameEndDelay": {
                "description": "Sets the game end delay.",
                "return": "void",
                "args": [
                    "float"
                ]
            },
            "IsDaytime": {
                "description": "Is it day time.",
                "return": "bool",
                "args": []
            },
            "SetHeroMinimapIconScale": {
                "description": "(flMinimapHeroIconScale) - Scale the hero minimap icons on the minimap.",
                "return": "void",
                "args": [
                    "float"
                ]
            },
            "SetRuneSpawnTime": {
                "description": "Sets the amount of time between rune spawns.",
                "return": "void",
                "args": [
                    "float"
                ]
            },
            "ResetToHeroSelection": {
                "description": "Restart the game at hero selection",
                "return": "void",
                "args": []
            },
            "SetFirstBloodActive": {
                "description": "Sets whether First Blood has been triggered.",
                "return": "void",
                "args": [
                    "bool"
                ]
            },
            "GetDifficulty": {
                "description": "Returns difficulty level of the custom game mode",
                "return": "int",
                "args": []
            },
            "State_Get": {
                "description": "Get the current Gamerules state",
                "return": "int",
                "args": []
            },
            "SetTreeRegrowTime": {
                "description": "Sets the tree regrow time in seconds.",
                "return": "void",
                "args": [
                    "float"
                ]
            },
            "SetHeroSelectionTime": {
                "description": "Sets the amount of time players have to pick their hero.",
                "return": "void",
                "args": [
                    "float"
                ]
            },
            "SetGoldTickTime": {
                "description": "Set the time interval between auto gold increases.",
                "return": "void",
                "args": [
                    "float"
                ]
            },
            "SetCustomGameSetupAutoLaunchDelay": {
                "description": "Set the amount of time to wait for auto launch.",
                "return": "void",
                "args": [
                    "float"
                ]
            },
            "SetGoldPerTick": {
                "description": "Set the auto gold increase per timed interval.",
                "return": "void",
                "args": [
                    "int"
                ]
            },
            "SendCustomMessageToTeam": {
                "description": "Sends a message on behalf of a player to the specified team.",
                "return": "void",
                "args": [
                    "cstring",
                    "int",
                    "int",
                    "int"
                ]
            },
            "SetHideKillMessageHeaders": {
                "description": "Sets whether the multikill, streak, and first-blood banners appear at the top of the screen.",
                "return": "void",
                "args": [
                    "bool"
                ]
            },
            "IsHeroRespawnEnabled": {
                "description": "Returns whether hero respawn is enabled.",
                "return": "bool",
                "args": []
            },
            "SetPostGameTime": {
                "description": "Sets the amount of time players have between the game ending and the server disconnecting them.",
                "return": "void",
                "args": [
                    "float"
                ]
            },
            "SetGameWinner": {
                "description": "Makes ths specified team win",
                "return": "void",
                "args": [
                    "int"
                ]
            },
            "GetDroppedItem": {
                "description": "Gets the Xth dropped item",
                "return": "handle",
                "args": [
                    "int"
                ]
            },
            "SetPreGameTime": {
                "description": "Sets the amount of time players have between picking their hero and game start.",
                "return": "void",
                "args": [
                    "float"
                ]
            },
            "GetGameTime": {
                "description": "Returns the number of seconds elapsed since map start. This time doesn't count up when the game is paused",
                "return": "float",
                "args": []
            },
            "SetCustomGameAccountRecordSaveFunction": {
                "description": "(Preview/Unreleased) Sets a callback to handle saving custom game account records (callback is passed a Player ID and should return a flat simple table)",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ]
            },
            "GetGameModeEntity": {
                "description": "Get the game mode entity",
                "return": "handle",
                "args": []
            },
            "MakeTeamLose": {
                "description": "Makes ths specified team lose",
                "return": "void",
                "args": [
                    "int"
                ]
            },
            "GetCustomGameDifficulty": {
                "description": "Returns the difficulty level of the custom game mode",
                "return": "int",
                "args": []
            },
            "ResetDefeated": {
                "description": "Restart after killing the ancient, etc.",
                "return": "void",
                "args": []
            },
            "Defeated": {
                "description": "Kills the ancient, etc.",
                "return": "void",
                "args": []
            },
            "Playtesting_UpdateAddOnKeyValues": {
                "description": "Updates custom hero, unit and ability KeyValues in memory with the latest values from disk",
                "return": "void",
                "args": []
            },
            "NumDroppedItems": {
                "description": "Returns the number of items currently dropped on the ground",
                "return": "int",
                "args": []
            },
            "GetMatchID": {
                "description": "Get the MatchID for this game.",
                "return": "uint64",
                "args": []
            },
            "SetCustomVictoryMessageDuration": {
                "description": "Sets the victory message duration.",
                "return": "void",
                "args": [
                    "float"
                ]
            },
            "SetStartingGold": {
                "description": "Set the starting gold amount.",
                "return": "void",
                "args": [
                    "int"
                ]
            },
            "SetOverlayHealthBarUnit": {
                "description": "Show this unit's health on the overlay health bar",
                "return": "void",
                "args": [
                    "handle",
                    "int"
                ]
            },
            "SendCustomMessage": {
                "description": "Sends a message on behalf of a player.",
                "return": "void",
                "args": [
                    "cstring",
                    "int",
                    "int"
                ]
            },
            "AddMinimapDebugPointForTeam": {
                "description": "Add a point on the minimap for a specific team.",
                "return": "void",
                "args": [
                    "int",
                    "vector",
                    "int",
                    "int",
                    "int",
                    "int",
                    "float",
                    "int"
                ]
            },
            "SetSameHeroSelectionEnabled": {
                "description": "When true, players can repeatedly pick the same hero.",
                "return": "void",
                "args": [
                    "bool"
                ]
            },
            "SetHeroRespawnEnabled": {
                "description": "Control if the normal DOTA hero respawn rules apply.",
                "return": "void",
                "args": [
                    "bool"
                ]
            },
            "GetNianTotalDamageTaken": {
                "description": "For New Bloom, get total damage taken by the Nian / Year Beast",
                "return": "int",
                "args": []
            },
            "SetUseCustomHeroXPValues": {
                "description": "Allows heroes in the map to give a specific amount of XP (this value must be set).",
                "return": "void",
                "args": [
                    "bool"
                ]
            },
            "SetUseUniversalShopMode": {
                "description": "When true, all items are available at as long as any shop is in range.",
                "return": "void",
                "args": [
                    "bool"
                ]
            },
            "SetUseBaseGoldBountyOnHeroes": {
                "description": "Heroes will use the basic NPC functionality for determining their bounty, rather than DOTA specific formulas.",
                "return": "void",
                "args": [
                    "bool"
                ]
            },
            "SetCustomGameSetupRemainingTime": {
                "description": "Set the amount of remaining time, in seconds, for custom game setup. 0 = finish immediately, -1 = wait forever",
                "return": "void",
                "args": [
                    "float"
                ]
            },
            "IsGamePaused": {
                "description": "Returns whether the game is paused.",
                "return": "bool",
                "args": []
            },
            "SetTimeOfDay": {
                "description": "Set the time of day.",
                "return": "void",
                "args": [
                    "float"
                ]
            },
            "GetTimeOfDay": {
                "description": "Get the time of day",
                "return": "float",
                "args": []
            },
            "PlayerHasCustomGameHostPrivileges": {
                "description": "Whether a player has custom game host privileges (shuffle teams, etc.)",
                "return": "bool",
                "args": [
                    "handle"
                ]
            },
            "SetCreepMinimapIconScale": {
                "description": "(flMinimapCreepIconScale) - Scale the creep icons on the minimap.",
                "return": "void",
                "args": [
                    "float"
                ]
            },
            "SetRuneMinimapIconScale": {
                "description": "(flMinimapRuneIconScale) - Scale the rune icons on the minimap.",
                "return": "void",
                "args": [
                    "float"
                ]
            },
            "FinishCustomGameSetup": {
                "description": "Indicate that the custom game setup phase is complete, and advance to the game.",
                "return": "void",
                "args": []
            },
            "SetSafeToLeave": {
                "description": "(bSafeToLeave) - Mark this game as safe to leave.",
                "return": "void",
                "args": [
                    "bool"
                ]
            },
            "SetCustomGameDifficulty": {
                "description": "Set the difficulty level of the custom game mode",
                "return": "void",
                "args": [
                    "int"
                ]
            },
            "GetGameSessionConfigValue": {
                "description": "Get a string value from the game session config (map options)",
                "return": "cstring",
                "args": [
                    "cstring",
                    "cstring"
                ]
            },
            "GetMatchSignoutComplete": {
                "description": "Have we received the post match signout message that includes reward information",
                "return": "bool",
                "args": []
            },
            "SetCustomVictoryMessage": {
                "description": "Sets the victory message.",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "SetCustomGameSetupTimeout": {
                "description": "Setup (pre-gameplay) phase timeout. 0 = instant, -1 = forever (until FinishCustomGameSetup is called)",
                "return": "void",
                "args": [
                    "float"
                ]
            },
            "AddMinimapDebugPoint": {
                "description": "Add a point on the minimap.",
                "return": "void",
                "args": [
                    "int",
                    "vector",
                    "int",
                    "int",
                    "int",
                    "int",
                    "float"
                ]
            },
            "EnableCustomGameSetupAutoLaunch": {
                "description": "Enabled (true) or disable (false) auto launch for custom game setup.",
                "return": "void",
                "args": [
                    "bool"
                ]
            },
            "LockCustomGameSetupTeamAssignment": {
                "description": "Lock (true) or unlock (false) team assignemnt. If team assignment is locked players cannot change teams.",
                "return": "void",
                "args": [
                    "bool"
                ]
            },
            "SetCustomGameTeamMaxPlayers": {
                "description": "Set whether a team is selectable during game setup",
                "return": "void",
                "args": [
                    "int",
                    "int"
                ]
            },
            "GetCustomGameTeamMaxPlayers": {
                "description": "Get whether a team is selectable during game setup",
                "return": "int",
                "args": [
                    "int"
                ]
            },
            "GetPlayerCustomGameAccountRecord": {
                "description": "(Preview/Unreleased) Gets the player's custom game account record, as it looked at the start of this session",
                "return": "variant",
                "args": [
                    "int"
                ]
            },
            "IsCheatMode": {
                "description": "Are cheats enabled on the server",
                "return": "bool",
                "args": []
            }
        }
    },
    "CCustomGameEventManager": {
        "description": "!Custom game event manager",
        "functions": {
            "RegisterListener": {
                "description": "( string EventName, func CallbackFunction ) - Register a callback to be called when a particular custom event arrives. Returns a listener ID that can be used to unregister later.",
                "return": "int",
                "args": [
                    "cstring",
                    "handle"
                ]
            },
            "Send_ServerToPlayer": {
                "description": "( Entity Player, string EventName, table EventData )",
                "return": "void",
                "args": [
                    "handle",
                    "cstring",
                    "handle"
                ]
            },
            "Send_ServerToTeam": {
                "description": "( int TeamNumber, string EventName, table EventData )",
                "return": "void",
                "args": [
                    "int",
                    "cstring",
                    "handle"
                ]
            },
            "Send_ServerToAllClients": {
                "description": "( string EventName, table EventData )",
                "return": "void",
                "args": [
                    "cstring",
                    "handle"
                ]
            },
            "UnregisterListener": {
                "description": "( int ListnerID ) - Unregister a specific listener",
                "return": "void",
                "args": [
                    "int"
                ]
            }
        }
    },
    "CDOTAVoteSystem": {
        "description": "!DOTA Vote System",
        "functions": {
            "StartVote": {
                "description": "Starts a vote, based upon a table of parameters",
                "return": "void",
                "args": [
                    "handle"
                ]
            }
        }
    },
    "CDOTA_CustomUIManager": {
        "description": "!Custom HUD manager",
        "functions": {
            "DynamicHud_SetDialogVariables": {
                "description": "Add or modify dialog variables for an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, table DialogVariables )",
                "return": "void",
                "args": [
                    "int",
                    "cstring",
                    "handle"
                ]
            },
            "DynamicHud_Create": {
                "description": "Create a new custom UI HUD element for the specified player(s). ( int PlayerID /*-1 means everyone*/, string ElementID /* should be unique */, string LayoutFileName, table DialogVariables /* can be nil */ )",
                "return": "void",
                "args": [
                    "int",
                    "cstring",
                    "cstring",
                    "handle"
                ]
            },
            "DynamicHud_SetVisible": {
                "description": "Toggle the visibility of an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, bool Visible )",
                "return": "void",
                "args": [
                    "int",
                    "cstring",
                    "bool"
                ]
            },
            "DynamicHud_Destroy": {
                "description": "Destroy a custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID )",
                "return": "void",
                "args": [
                    "int",
                    "cstring"
                ]
            }
        }
    },
    "CDebugOverlayScriptHelper": {
        "description": "Wrapper class over g_pDebugOverlay instance",
        "functions": {
            "Axis": {
                "description": "Draws an axis. Specify origin + orientation in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "quaternion",
                    "float",
                    "bool",
                    "float"
                ]
            },
            "Cross": {
                "description": "Draws a screen-aligned cross. Specify origin in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "float",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "PushAndClearDebugOverlayScope": {
                "description": "Pushes an identifier used to group overlays. Deletes all existing overlays using this overlay id.",
                "return": "void",
                "args": [
                    "utlstringtoken"
                ]
            },
            "VertArrow": {
                "description": "Draws a vertical arrow. Specify endpoints in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "vector",
                    "float",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "PopDebugOverlayScope": {
                "description": "Pops the identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch.",
                "return": "void",
                "args": []
            },
            "PushDebugOverlayScope": {
                "description": "Pushes an identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch.",
                "return": "void",
                "args": [
                    "utlstringtoken"
                ]
            },
            "Box": {
                "description": "Draws a world-space axis-aligned box. Specify bounds in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "vector",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "Line2D": {
                "description": "Draws a line between two points in screenspace",
                "return": "void",
                "args": [
                    "vector2d",
                    "vector2d",
                    "int",
                    "int",
                    "int",
                    "int",
                    "float"
                ]
            },
            "RemoveAllInScope": {
                "description": "Removes all overlays marked with a specific identifier, regardless of their lifetime.",
                "return": "void",
                "args": [
                    "utlstringtoken"
                ]
            },
            "HorzArrow": {
                "description": "Draws a horizontal arrow. Specify endpoints in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "vector",
                    "float",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "Texture": {
                "description": "Draws a screen-space texture. Coordinates are in pixels.",
                "return": "void",
                "args": [
                    "cstring",
                    "vector2d",
                    "vector2d",
                    "int",
                    "int",
                    "int",
                    "int",
                    "vector2d",
                    "vector2d",
                    "float"
                ]
            },
            "Cross3D": {
                "description": "Draws a world-aligned cross. Specify origin in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "float",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "UnitTestCycleOverlayRenderType": {
                "description": "Toggles the overlay render type, for unit tests",
                "return": "void",
                "args": []
            },
            "CircleScreenOriented": {
                "description": "Draws a circle oriented to the screen. Specify center in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "float",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "VectorText3D": {
                "description": "Draws 3D text. Specify origin + orientation in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "quaternion",
                    "cstring",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "FilledRect2D": {
                "description": "Draws a screen-space filled 2D rectangle. Coordinates are in pixels.",
                "return": "void",
                "args": [
                    "vector2d",
                    "vector2d",
                    "int",
                    "int",
                    "int",
                    "int",
                    "float"
                ]
            },
            "Line": {
                "description": "Draws a line between two points",
                "return": "void",
                "args": [
                    "vector",
                    "vector",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "BoxAngles": {
                "description": "Draws an oriented box at the origin. Specify bounds in local space.",
                "return": "void",
                "args": [
                    "vector",
                    "vector",
                    "vector",
                    "quaternion",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "EntityText": {
                "description": "Draws text on an entity",
                "return": "void",
                "args": [
                    "ehandle",
                    "int",
                    "cstring",
                    "int",
                    "int",
                    "int",
                    "int",
                    "float"
                ]
            },
            "Cross3DOriented": {
                "description": "Draws an oriented cross. Specify origin in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "quaternion",
                    "float",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "Sphere": {
                "description": "Draws a wireframe sphere. Specify center in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "float",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "EntityAxis": {
                "description": "Draws the axis of the entity origin",
                "return": "void",
                "args": [
                    "ehandle",
                    "float",
                    "bool",
                    "float"
                ]
            },
            "Capsule": {
                "description": "Draws a capsule. Specify base in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "quaternion",
                    "float",
                    "float",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "DrawTickMarkedLine": {
                "description": "Draws a dashed line. Specify endpoints in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "vector",
                    "float",
                    "int",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "YawArrow": {
                "description": "Draws a arrow associated with a specific yaw. Specify endpoints in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "float",
                    "float",
                    "float",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "Triangle": {
                "description": "Draws a filled triangle. Specify vertices in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "vector",
                    "vector",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "Cone": {
                "description": "Draws a wireframe cone. Specify endpoint and direction in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "vector",
                    "float",
                    "float",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "Text": {
                "description": "Draws 2D text. Specify origin in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "int",
                    "cstring",
                    "float",
                    "int",
                    "int",
                    "int",
                    "int",
                    "float"
                ]
            },
            "Circle": {
                "description": "Draws a circle. Specify center in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "quaternion",
                    "float",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "SolidCone": {
                "description": "Draws a solid cone. Specify endpoint and direction in world space.",
                "return": "void",
                "args": [
                    "vector",
                    "vector",
                    "float",
                    "float",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "SweptBox": {
                "description": "Draws a swept box. Specify endpoints in world space and the bounds in local space.",
                "return": "void",
                "args": [
                    "vector",
                    "vector",
                    "vector",
                    "vector",
                    "quaternion",
                    "int",
                    "int",
                    "int",
                    "int",
                    "float"
                ]
            },
            "EntityBounds": {
                "description": "Draws bounds of an entity",
                "return": "void",
                "args": [
                    "ehandle",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "EntitySkeleton": {
                "description": "Draws the skeleton of the entity",
                "return": "void",
                "args": [
                    "ehandle",
                    "float"
                ]
            },
            "EntityAttachments": {
                "description": "Draws the attachments of the entity",
                "return": "void",
                "args": [
                    "ehandle",
                    "float",
                    "float"
                ]
            }
        }
    },
    "Global": {
        "functions": {
            "DebugDrawText": {
                "description": "Draw text in 3d (origin, text, bViewCheck, duration)",
                "return": "void",
                "args": [
                    "vector",
                    "cstring",
                    "bool",
                    "float"
                ]
            },
            "PrecacheEntityListFromTable": {
                "description": "Precache a list of entity KeyValues tables",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ]
            },
            "SetRenderingEnabled": {
                "description": "Set rendering on/off for an ehandle",
                "return": "void",
                "args": [
                    "ehandle",
                    "bool"
                ]
            },
            "ShowCustomHeaderMessage": {
                "description": "( const char *pszMessage, int nPlayerID, int nValue, float flTime ) - Supports localized strings - %s1 = PlayerName, %s2 = Value, %s3 = TeamName",
                "return": "void",
                "args": [
                    "cstring",
                    "int",
                    "int",
                    "float"
                ]
            },
            "FindClearSpaceForUnit": {
                "description": "Place a unit somewhere not already occupied.",
                "return": "bool",
                "args": [
                    "handle",
                    "vector",
                    "bool"
                ]
            },
            "cvar_getf": {
                "description": "Gets the value of the given cvar, as a float.",
                "return": "float",
                "args": [
                    "cstring"
                ]
            },
            "FindUnitsInLine": {
                "description": "Find units that intersect the given line with the given flags.",
                "return": "variant",
                "args": [
                    "int",
                    "vector",
                    "vector",
                    "handle",
                    "float",
                    "int",
                    "int",
                    "int"
                ]
            },
            "GetWorldMaxY": {
                "description": "Gets the world's maximum Y position.",
                "return": "float",
                "args": []
            },
            "UTIL_ResetMessageText": {
                "description": "Clear all message text on one client.",
                "return": "void",
                "args": [
                    "int"
                ]
            },
            "UTIL_Remove": {
                "description": "Removes the specified entity",
                "return": "void",
                "args": [
                    "handle"
                ]
            },
            "CreateItemOnPositionForLaunch": {
                "description": "Create a physical item at a given location, can start in air (but doesn't clear a space)",
                "return": "handle",
                "args": [
                    "vector",
                    "handle"
                ]
            },
            "SetQuestPhase": {
                "description": "Set the current quest phase.",
                "return": "void",
                "args": [
                    "int"
                ]
            },
            "PrecacheModel": {
                "description": "( modelName, context ) - Manually precache a single model",
                "return": "void",
                "args": [
                    "cstring",
                    "handle"
                ]
            },
            "IsClient": {
                "description": "Returns true if this is lua running from the client.dll.",
                "return": "bool",
                "args": []
            },
            "FireEntityIOInputNameOnly": {
                "description": "Fire Entity's Action Input w/no data",
                "return": "void",
                "args": [
                    "ehandle",
                    "cstring"
                ]
            },
            "FireEntityIOInputVec": {
                "description": "Fire Entity's Action Input with passed Vector - you own the memory",
                "return": "void",
                "args": [
                    "ehandle",
                    "cstring",
                    "vector"
                ]
            },
            "SpawnEntityFromTableSynchronous": {
                "description": "Synchronously spawns a single entity from a table",
                "return": "handle",
                "args": [
                    "cstring",
                    "handle"
                ]
            },
            "CancelEntityIOEvents": {
                "description": "Create all I/O events for a particular entity",
                "return": "void",
                "args": [
                    "ehandle"
                ]
            },
            "RotateOrientation": {
                "description": "Rotate a QAngle by another QAngle.",
                "return": "qangle",
                "args": [
                    "qangle",
                    "qangle"
                ]
            },
            "SplineQuaternions": {
                "description": "(quaternion,quaternion,float) very basic interpolation of v0 to v1 over t on [0,1]",
                "return": "quaternion",
                "args": [
                    "quaternion",
                    "quaternion",
                    "float"
                ]
            },
            "StartSoundEventReliable": {
                "description": "Start a sound event with reliable delivery",
                "return": "void",
                "args": [
                    "cstring",
                    "handle"
                ]
            },
            "RandomFloat": {
                "description": "Get a random float within a range",
                "return": "float",
                "args": [
                    "float",
                    "float"
                ]
            },
            "EmitAnnouncerSoundForTeamOnLocation": {
                "description": "Emit an announcer sound for a team at a specific location.",
                "return": "void",
                "args": [
                    "cstring",
                    "int",
                    "vector"
                ]
            },
            "EmitGlobalSound": {
                "description": "Play named sound for all players",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "RotatePosition": {
                "description": "Rotate a Vector around a point.",
                "return": "vector",
                "args": [
                    "vector",
                    "qangle",
                    "vector"
                ]
            },
            "GetMaxOutputDelay": {
                "description": "Get the longest delay for all events attached to an output",
                "return": "float",
                "args": [
                    "ehandle",
                    "cstring"
                ]
            },
            "AngleDiff": {
                "description": "Returns the number of degrees difference between two yaw angles",
                "return": "float",
                "args": [
                    "float",
                    "float"
                ]
            },
            "SpawnEntityGroupFromTable": {
                "description": "Hierarchically spawn an entity group from a set of spawn tables.",
                "return": "bool",
                "args": [
                    "handle",
                    "bool",
                    "handle"
                ]
            },
            "RandomInt": {
                "description": "Get a random int within a range",
                "return": "int",
                "args": [
                    "int",
                    "int"
                ]
            },
            "FireGameEvent": {
                "description": "Fire a game event.",
                "return": "void",
                "args": [
                    "cstring",
                    "handle"
                ]
            },
            "CreateUnitFromTable": {
                "description": "Creates a DOTA unit by its dota_npc_units.txt name from a table of entity key values and a position to spawn at.",
                "return": "handle",
                "args": [
                    "handle",
                    "vector"
                ]
            },
            "DebugDrawScreenTextLine": {
                "description": "Draw text with a line offset (x, y, lineOffset, text, r, g, b, a, duration)",
                "return": "void",
                "args": [
                    "float",
                    "float",
                    "int",
                    "cstring",
                    "int",
                    "int",
                    "int",
                    "int",
                    "float"
                ]
            },
            "GetPhysAngularVelocity": {
                "description": "Get Angular Velocity for VPHYS or normal object",
                "return": "vector",
                "args": [
                    "handle"
                ]
            },
            "UpdateEventPoints": {
                "return": "void",
                "args": [
                    "handle"
                ]
            },
            "DebugDrawLine_vCol": {
                "description": "Draw a debug line using color vec (start, end, vRgb, a, ztest, duration)",
                "return": "void",
                "args": [
                    "vector",
                    "vector",
                    "vector",
                    "bool",
                    "float"
                ]
            },
            "FrameTime": {
                "description": "Get the time spent on the server in the last frame",
                "return": "float",
                "args": []
            },
            "TraceHull": {
                "description": "Pass table - Inputs: start, end, min, max, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid",
                "return": "bool",
                "args": [
                    "handle"
                ]
            },
            "SplineVectors": {
                "description": "(vector,vector,float) very basic interpolation of v0 to v1 over t on [0,1]",
                "return": "vector",
                "args": [
                    "vector",
                    "vector",
                    "float"
                ]
            },
            "CreateHTTPRequest": {
                "description": "Create an HTTP request.",
                "return": "handle",
                "args": [
                    "cstring",
                    "cstring"
                ]
            },
            "ReloadMOTD": {
                "description": "Reloads the MotD file",
                "return": "void",
                "args": []
            },
            "StartSoundEvent": {
                "description": "Start a sound event",
                "return": "void",
                "args": [
                    "cstring",
                    "handle"
                ]
            },
            "SendToServerConsole": {
                "description": "Send a string to the console as a server command",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "Say": {
                "description": "Have Entity say string, and teamOnly or not",
                "return": "void",
                "args": [
                    "handle",
                    "cstring",
                    "bool"
                ]
            },
            "ShowMessage": {
                "description": "Print a hud message on all clients",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "ScreenShake": {
                "description": "Start a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake",
                "return": "void",
                "args": [
                    "vector",
                    "float",
                    "float",
                    "float",
                    "float",
                    "int",
                    "bool"
                ]
            },
            "EmitAnnouncerSound": {
                "description": "Emit an announcer sound for all players.",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "IsMarkedForDeletion": {
                "description": "Returns true if the entity is valid and marked for deletion.",
                "return": "bool",
                "args": [
                    "handle"
                ]
            },
            "DoScriptAssert": {
                "description": "#ScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog.",
                "return": "void",
                "args": [
                    "bool",
                    "cstring"
                ]
            },
            "DebugBreak": {
                "description": "Breaks in the debugger",
                "return": "void",
                "args": []
            },
            "CreateEffect": {
                "description": "Pass table - Inputs: entity, effect",
                "return": "bool",
                "args": [
                    "handle"
                ]
            },
            "CreateHeroForPlayer": {
                "description": "Creates a DOTA hero by its dota_npc_units.txt name and sets it as the given player's controlled hero",
                "return": "handle",
                "args": [
                    "cstring",
                    "handle"
                ]
            },
            "RotateQuaternionByAxisAngle": {
                "description": "(quaternion,vector,float) rotates a quaternion by the specified angle around the specified vector axis",
                "return": "quaternion",
                "args": [
                    "quaternion",
                    "vector",
                    "float"
                ]
            },
            "StopSoundEvent": {
                "description": "Stops a sound event",
                "return": "void",
                "args": [
                    "cstring",
                    "handle"
                ]
            },
            "DebugScreenTextPretty": {
                "description": "Draw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold)",
                "return": "void",
                "args": [
                    "float",
                    "float",
                    "int",
                    "cstring",
                    "int",
                    "int",
                    "int",
                    "int",
                    "float",
                    "cstring",
                    "int",
                    "bool"
                ]
            },
            "StopSoundOn": {
                "description": "Stop named sound on Entity",
                "return": "void",
                "args": [
                    "cstring",
                    "handle"
                ]
            },
            "IsValidEntity": {
                "description": "Checks to see if the given hScript is a valid entity",
                "return": "bool",
                "args": [
                    "handle"
                ]
            },
            "DestroyDamageInfo": {
                "description": "Free a damageinfo object that was created with CreateDamageInfo().",
                "return": "void",
                "args": [
                    "handle"
                ]
            },
            "StopEffect": {
                "description": "Pass entity and effect name",
                "return": "void",
                "args": [
                    "handle",
                    "cstring"
                ]
            },
            "ExponentialDecay": {
                "description": "Smooth curve decreasing slower as it approaches zero",
                "return": "float",
                "args": [
                    "float",
                    "float",
                    "float"
                ]
            },
            "CreateDamageInfo": {
                "description": "(hInflictor, hAttacker, flDamage) - Allocate a damageinfo object, used as an argument to TakeDamage(). Call DestroyDamageInfo( hInfo ) to free the object.",
                "return": "handle",
                "args": [
                    "handle",
                    "handle",
                    "vector",
                    "vector",
                    "float"
                ]
            },
            "PrecacheUnitByNameAsync": {
                "description": "Asynchronously precaches a DOTA unit by its dota_npc_units.txt name, provides a callback when it's finished.",
                "return": "void",
                "args": [
                    "cstring",
                    "handle",
                    "int"
                ]
            },
            "FireGameEventLocal": {
                "description": "Fire a game event without broadcasting to the client.",
                "return": "void",
                "args": [
                    "cstring",
                    "handle"
                ]
            },
            "FireEntityIOInputString": {
                "description": "Fire Entity's Action Input with passed String - you own the memory",
                "return": "void",
                "args": [
                    "ehandle",
                    "cstring",
                    "cstring"
                ]
            },
            "PrecacheItemByNameSync": {
                "description": "Precaches a DOTA item by its dota_npc_items.txt name",
                "return": "void",
                "args": [
                    "cstring",
                    "handle"
                ]
            },
            "RemoveSpawnGroupFilterProxy": {
                "description": "Remove the C proxy for a script-based spawn group filter",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "PlayerInstanceFromIndex": {
                "description": "Get a script instance of a player by index.",
                "return": "handle",
                "args": [
                    "int"
                ]
            },
            "cvar_setf": {
                "description": "Sets the value of the given cvar, as a float.",
                "return": "bool",
                "args": [
                    "cstring",
                    "float"
                ]
            },
            "ClearTeamCustomHealthbarColor": {
                "description": "( teamNumber )",
                "return": "void",
                "args": [
                    "int"
                ]
            },
            "GetMapName": {
                "description": "Get the name of the map.",
                "return": "cstring",
                "args": []
            },
            "PrecacheEntityFromTable": {
                "description": "Precache an entity from KeyValues in table",
                "return": "void",
                "args": [
                    "cstring",
                    "handle",
                    "handle"
                ]
            },
            "Time": {
                "description": "Get the current server time",
                "return": "float",
                "args": []
            },
            "AxisAngleToQuaternion": {
                "description": "(vector,float) constructs a quaternion representing a rotation by angle around the specified vector axis",
                "return": "quaternion",
                "args": [
                    "vector",
                    "float"
                ]
            },
            "SendFrostivusTimeElapsedToGC": {
                "return": "void",
                "args": []
            },
            "SetQuestName": {
                "description": "Set the current quest name.",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "SpawnEntityListFromTableSynchronous": {
                "description": "Synchronously spawn an entity group from a list of spawn tables.",
                "return": "handle",
                "args": [
                    "handle"
                ]
            },
            "EmitSoundOnLocationWithCaster": {
                "description": "Emit a sound on a location from a unit. (vLocation, soundName, hCaster).",
                "return": "void",
                "args": [
                    "vector",
                    "cstring",
                    "handle"
                ]
            },
            "StopListeningToAllGameEvents": {
                "description": "Stop listening to all game events within a specific context.",
                "return": "void",
                "args": [
                    "handle"
                ]
            },
            "SendToConsole": {
                "description": "Send a string to the console as a client command",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "PrintLinkedConsoleMessage": {
                "description": "Print a console message with a linked console command",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring"
                ]
            },
            "RollPercentage": {
                "description": "Rolls a number from 1 to 100 and returns true if the roll is less than or equal to the number specified",
                "return": "bool",
                "args": [
                    "int"
                ]
            },
            "InitLogFile": {
                "description": "If the given file doesn't exist, creates it with the given contents; does nothing if it exists",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring"
                ]
            },
            "SetTeamCustomHealthbarColor": {
                "description": "( teamNumber, r, g, b )",
                "return": "void",
                "args": [
                    "int",
                    "int",
                    "int",
                    "int"
                ]
            },
            "AppendToLogFile": {
                "description": "Appends a string to a log file on the server",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring"
                ]
            },
            "UTIL_RemoveImmediate": {
                "description": "Immediately removes the specified entity",
                "return": "void",
                "args": [
                    "handle"
                ]
            },
            "GetListenServerHost": {
                "description": "Get the local player on a listen server.",
                "return": "handle",
                "args": []
            },
            "DoEntFire": {
                "description": "#EntFire:Generate and entity i/o event",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring",
                    "cstring",
                    "float",
                    "handle",
                    "handle"
                ]
            },
            "StartSoundEventFromPositionUnreliable": {
                "description": "Start a sound event from position with optional delivery",
                "return": "void",
                "args": [
                    "cstring",
                    "vector"
                ]
            },
            "DoEntFireByInstanceHandle": {
                "description": "#EntFireByHandle:Generate and entity i/o event",
                "return": "void",
                "args": [
                    "handle",
                    "cstring",
                    "cstring",
                    "float",
                    "handle",
                    "handle"
                ]
            },
            "GetTeamName": {
                "description": "( int teamID )",
                "return": "cstring",
                "args": [
                    "int"
                ]
            },
            "TraceCollideable": {
                "description": "Pass table - Inputs: start, end, ent, (optional mins, maxs) -- outputs: pos, fraction, hit, startsolid, normal",
                "return": "bool",
                "args": [
                    "handle"
                ]
            },
            "rr_QueryBestResponse": {
                "description": "Params: (entity, query) : tests 'query' against entity's response system and returns the best response found (or null if none found).",
                "return": "bool",
                "args": [
                    "handle",
                    "handle",
                    "handle"
                ]
            },
            "DoUniqueString": {
                "description": "#UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table.",
                "return": "cstring",
                "args": [
                    "cstring"
                ]
            },
            "ResolveNPCPositions": {
                "description": "Check and fix units that have been assigned a position inside collision radius of other NPCs.",
                "return": "void",
                "args": [
                    "vector",
                    "float"
                ]
            },
            "ListenToGameEvent": {
                "description": "Register as a listener for a game event from script.",
                "return": "int",
                "args": [
                    "cstring",
                    "handle",
                    "handle"
                ]
            },
            "StopListeningToGameEvent": {
                "description": "Stop listening to a particular game event.",
                "return": "bool",
                "args": [
                    "int"
                ]
            },
            "IsInToolsMode": {
                "description": "Returns true if this is lua running within tools mode.",
                "return": "bool",
                "args": []
            },
            "GetFrameCount": {
                "description": "Returns the engines current frame count",
                "return": "int",
                "args": []
            },
            "rr_GetResponseTargets": {
                "description": "Retrieve a table of all available expresser targets, in the form { name : handle, name: handle }.",
                "return": "handle",
                "args": []
            },
            "rr_AddDecisionRule": {
                "description": "Add a rule to the decision database.",
                "return": "bool",
                "args": [
                    "handle"
                ]
            },
            "SpawnEntityListFromTableAsynchronous": {
                "description": "Asynchronously spawn an entity group from a list of spawn tables. A callback will be triggered when the spawning is complete",
                "return": "int",
                "args": [
                    "handle",
                    "handle"
                ]
            },
            "EntIndexToHScript": {
                "description": "Turn an entity index integer to an HScript representing that entity's script instance.",
                "return": "handle",
                "args": [
                    "int"
                ]
            },
            "CreateTrigger": {
                "description": "CreateTrigger( vecMin, vecMax ) : Creates and returns an AABB trigger",
                "return": "handle",
                "args": [
                    "vector",
                    "vector",
                    "vector"
                ]
            },
            "GetPhysVelocity": {
                "description": "Get Velocity for VPHYS or normal object",
                "return": "vector",
                "args": [
                    "handle"
                ]
            },
            "VectorToAngles": {
                "description": "Get Qangles (with no roll) for a Vector.",
                "return": "qangle",
                "args": [
                    "vector"
                ]
            },
            "StartSoundEventFromPositionReliable": {
                "description": "Start a sound event from position with reliable delivery",
                "return": "void",
                "args": [
                    "cstring",
                    "vector"
                ]
            },
            "GetWorldMinY": {
                "description": "Gets the world's minimum Y position.",
                "return": "float",
                "args": []
            },
            "RotationDelta": {
                "description": "Find the delta between two QAngles.",
                "return": "qangle",
                "args": [
                    "qangle",
                    "qangle"
                ]
            },
            "EmitSoundOn": {
                "description": "Play named sound on Entity",
                "return": "void",
                "args": [
                    "cstring",
                    "handle"
                ]
            },
            "GetWorldMinX": {
                "description": "Gets the world's minimum X position.",
                "return": "float",
                "args": []
            },
            "EmitSoundOnClient": {
                "description": "Play named sound only on the client for the passed in player",
                "return": "void",
                "args": [
                    "cstring",
                    "handle"
                ]
            },
            "GetFrostyBoostAmount": {
                "return": "float",
                "args": [
                    "int",
                    "int"
                ]
            },
            "CreateItem": {
                "description": "Create a DOTA item",
                "return": "handle",
                "args": [
                    "cstring",
                    "handle",
                    "handle"
                ]
            },
            "SetOpvarFloatAll": {
                "description": "Sets an opvar value for all players",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring",
                    "cstring",
                    "float"
                ]
            },
            "ShowGenericPopupToPlayer": {
                "description": "Show a generic popup dialog to a specific player.",
                "return": "void",
                "args": [
                    "handle",
                    "cstring",
                    "cstring",
                    "cstring",
                    "cstring",
                    "int"
                ]
            },
            "DoCleaveAttack": {
                "description": "(hAttacker, hTarget, hAbility, fDamage, fRadius, effectName)",
                "return": "int",
                "args": [
                    "handle",
                    "handle",
                    "handle",
                    "float",
                    "float",
                    "cstring"
                ]
            },
            "UTIL_ResetMessageTextAll": {
                "description": "Clear all message text from all clients.",
                "return": "void",
                "args": []
            },
            "RegisterSpawnGroupFilterProxy": {
                "description": "Create a C proxy for a script-based spawn group filter",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "DoIncludeScript": {
                "description": "Execute a script (internal)",
                "return": "bool",
                "args": [
                    "cstring",
                    "handle"
                ]
            },
            "SetOpvarFloatPlayer": {
                "description": "Sets an opvar value for a single player",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring",
                    "cstring",
                    "float",
                    "handle"
                ]
            },
            "StartSoundEventUnreliable": {
                "description": "Start a sound event with optional delivery",
                "return": "void",
                "args": [
                    "cstring",
                    "handle"
                ]
            },
            "StartSoundEventFromPosition": {
                "description": "Start a sound event from position",
                "return": "void",
                "args": [
                    "cstring",
                    "vector"
                ]
            },
            "rr_CommitAIResponse": {
                "description": "Commit the result of QueryBestResponse back to the given entity to play. Call with params (entity, airesponse)",
                "return": "bool",
                "args": [
                    "handle",
                    "handle"
                ]
            },
            "LoadKeyValues": {
                "description": "Creates a table from the specified keyvalues text file",
                "return": "variant",
                "args": [
                    "cstring"
                ]
            },
            "GetTeamHeroKills": {
                "description": "( int teamID )",
                "return": "int",
                "args": [
                    "int"
                ]
            },
            "GetGoldFrostyPointsForRound": {
                "return": "int",
                "args": [
                    "int",
                    "int",
                    "int"
                ]
            },
            "LoadKeyValuesFromString": {
                "description": "Creates a table from the specified keyvalues string",
                "return": "variant",
                "args": [
                    "cstring"
                ]
            },
            "IsServer": {
                "description": "Returns true if this is lua running from the server.dll.",
                "return": "bool",
                "args": []
            },
            "DebugDrawBox": {
                "description": "Draw a debug overlay box (origin, mins, maxs, forward, r, g, b, a, duration )",
                "return": "void",
                "args": [
                    "vector",
                    "vector",
                    "vector",
                    "int",
                    "int",
                    "int",
                    "int",
                    "float"
                ]
            },
            "DebugDrawCircle": {
                "description": "Draw a debug circle (center, vRgb, a, rad, ztest, duration)",
                "return": "void",
                "args": [
                    "vector",
                    "vector",
                    "float",
                    "float",
                    "bool",
                    "float"
                ]
            },
            "FindUnitsInRadius": {
                "description": "Finds the units in a given radius with the given flags.",
                "return": "variant",
                "args": [
                    "int",
                    "vector",
                    "handle",
                    "float",
                    "int",
                    "int",
                    "int",
                    "int",
                    "bool"
                ]
            },
            "DebugDrawLine": {
                "description": "Draw a debug overlay line (origin, target, r, g, b, ztest, duration)",
                "return": "void",
                "args": [
                    "vector",
                    "vector",
                    "int",
                    "int",
                    "int",
                    "bool",
                    "float"
                ]
            },
            "ExecuteOrderFromTable": {
                "description": "Issue an order from a script table",
                "return": "void",
                "args": [
                    "handle"
                ]
            },
            "DebugDrawSphere": {
                "description": "Draw a debug sphere (center, vRgb, a, rad, ztest, duration)",
                "return": "void",
                "args": [
                    "vector",
                    "vector",
                    "float",
                    "float",
                    "bool",
                    "float"
                ]
            },
            "DebugDrawBoxDirection": {
                "description": "Draw a debug forward box (cent, min, max, forward, vRgb, a, duration)",
                "return": "void",
                "args": [
                    "vector",
                    "vector",
                    "vector",
                    "vector",
                    "vector",
                    "float",
                    "float"
                ]
            },
            "DebugDrawClear": {
                "description": "Try to clear all the debug overlay info",
                "return": "void",
                "args": []
            },
            "MakeStringToken": {
                "description": "Checks to see if the given hScript is a valid entity",
                "return": "int",
                "args": [
                    "cstring"
                ]
            },
            "AddFOWViewer": {
                "description": "Add temporary vision for a given team ( nTeamID, vLocation, flRadius, flDuration, bObstructedVision)",
                "return": "void",
                "args": [
                    "int",
                    "vector",
                    "float",
                    "float",
                    "bool"
                ]
            },
            "TraceLine": {
                "description": "Pass table - Inputs: startpos, endpos, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid",
                "return": "bool",
                "args": [
                    "handle"
                ]
            },
            "UnloadSpawnGroup": {
                "description": "Unload a spawn group by name",
                "return": "void",
                "args": [
                    "cstring"
                ]
            },
            "CreateTempTree": {
                "description": "Create a temporary tree. (vLocation, flDuration).",
                "return": "void",
                "args": [
                    "vector",
                    "float"
                ]
            },
            "PrecacheUnitFromTableSync": {
                "description": "Precaches a DOTA unit from a table of entity key values.",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ]
            },
            "UnloadSpawnGroupByHandle": {
                "description": "Unload a spawn group by handle",
                "return": "void",
                "args": [
                    "int"
                ]
            },
            "CreateTriggerRadiusApproximate": {
                "description": "CreateTriggerRadiusApproximate( vecOrigin, flRadius ) : Creates and returns an AABB trigger thats bigger than the radius provided",
                "return": "handle",
                "args": [
                    "vector",
                    "float"
                ]
            },
            "UTIL_MessageTextAll": {
                "description": "Sends colored text to all clients.",
                "return": "void",
                "args": [
                    "cstring",
                    "int",
                    "int",
                    "int",
                    "int"
                ]
            },
            "UTIL_MessageText": {
                "description": "Sends colored text to one client.",
                "return": "void",
                "args": [
                    "int",
                    "cstring",
                    "int",
                    "int",
                    "int",
                    "int"
                ]
            },
            "GetSystemTime": {
                "description": "Get the current real world time",
                "return": "cstring",
                "args": []
            },
            "UTIL_MessageTextAll_WithContext": {
                "description": "Sends colored text to all clients. (Valid context keys: player_id, value, team_id)",
                "return": "void",
                "args": [
                    "cstring",
                    "int",
                    "int",
                    "int",
                    "int",
                    "handle"
                ]
            },
            "UTIL_MessageText_WithContext": {
                "description": "Sends colored text to one client. (Valid context keys: player_id, value, team_id)",
                "return": "void",
                "args": [
                    "int",
                    "cstring",
                    "int",
                    "int",
                    "int",
                    "int",
                    "handle"
                ]
            },
            "CalcClosestPointOnEntityOBB": {
                "description": "Compute the closest point on the OBB of an entity.",
                "return": "vector",
                "args": [
                    "handle",
                    "vector"
                ]
            },
            "IsDedicatedServer": {
                "description": "Returns true if this server is a dedicated server.",
                "return": "bool",
                "args": []
            },
            "CalcDistanceBetweenEntityOBB": {
                "description": "Compute the distance between two entity OBB. A negative return value indicates an input error. A return value of zero indicates that the OBBs are overlapping.",
                "return": "float",
                "args": [
                    "handle",
                    "handle"
                ]
            },
            "RandomVector": {
                "description": "Get a random 2D vector of the given length.",
                "return": "vector",
                "args": [
                    "float"
                ]
            },
            "GetWorldMaxX": {
                "description": "Gets the world's maximum X position.",
                "return": "float",
                "args": []
            },
            "GetSystemDate": {
                "description": "Get the current real world date",
                "return": "cstring",
                "args": []
            },
            "PrecacheUnitByNameSync": {
                "description": "Precaches a DOTA unit by its dota_npc_units.txt name",
                "return": "void",
                "args": [
                    "cstring",
                    "handle",
                    "int"
                ]
            },
            "PauseGame": {
                "description": "Pause or unpause the game.",
                "return": "void",
                "args": [
                    "bool"
                ]
            },
            "LinkLuaModifier": {
                "description": "Link a lua-defined modifier with the associated class ( className, fileName, LuaModifierType).",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring",
                    "int"
                ]
            },
            "CreateUnitByName": {
                "description": "Creates a DOTA unit by its dota_npc_units.txt name",
                "return": "handle",
                "args": [
                    "cstring",
                    "vector",
                    "bool",
                    "handle",
                    "handle",
                    "int"
                ]
            },
            "GetGroundHeight": {
                "return": "float",
                "args": [
                    "vector",
                    "handle"
                ]
            },
            "PrecacheUnitFromTableAsync": {
                "description": "Precaches a DOTA unit from a table of entity key values.",
                "return": "void",
                "args": [
                    "handle",
                    "handle"
                ]
            },
            "CreateUnitByNameAsync": {
                "description": "Creates a DOTA unit by its dota_npc_units.txt name",
                "return": "int",
                "args": [
                    "cstring",
                    "vector",
                    "bool",
                    "handle",
                    "handle",
                    "int",
                    "handle"
                ]
            },
            "PrecacheItemByNameAsync": {
                "description": "Asynchronously precaches a DOTA item by its dota_npc_items.txt name, provides a callback when it's finished.",
                "return": "void",
                "args": [
                    "cstring",
                    "handle"
                ]
            },
            "GetItemCost": {
                "description": "Get the cost of an item by name.",
                "return": "int",
                "args": [
                    "cstring"
                ]
            },
            "ShowGenericPopup": {
                "description": "Show a generic popup dialog for all players.",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring",
                    "cstring",
                    "cstring",
                    "int"
                ]
            },
            "CreateItemOnPositionSync": {
                "description": "Create a physical item at a given location",
                "return": "handle",
                "args": [
                    "vector",
                    "handle"
                ]
            },
            "CreateModifierThinker": {
                "description": "Create a modifier not associated with an NPC. ( hCaster, hAbility, modifierName, paramTable, vOrigin, nTeamNumber, bPhantomBlocker )",
                "return": "handle",
                "args": [
                    "handle",
                    "handle",
                    "cstring",
                    "handle",
                    "vector",
                    "int",
                    "bool"
                ]
            },
            "PrecacheResource": {
                "description": "Manually precache a single resource",
                "return": "void",
                "args": [
                    "cstring",
                    "cstring",
                    "handle"
                ]
            },
            "GetGroundPosition": {
                "description": "Returns the supplied position moved to the ground. Second parameter is an NPC for measuring movement collision hull offset.",
                "return": "vector",
                "args": [
                    "vector",
                    "handle"
                ]
            },
            "EmitSoundOnLocationForAllies": {
                "description": "Emit a sound on a location from a unit, only for players allied with that unit (vLocation, soundName, hCaster",
                "return": "void",
                "args": [
                    "vector",
                    "cstring",
                    "handle"
                ]
            },
            "GetGoldFrostyBoostAmount": {
                "return": "float",
                "args": [
                    "int",
                    "int"
                ]
            },
            "EmitAnnouncerSoundForTeam": {
                "description": "Emit an announcer sound for a team.",
                "return": "void",
                "args": [
                    "cstring",
                    "int"
                ]
            },
            "EmitAnnouncerSoundForPlayer": {
                "description": "Emit an announcer sound for a player.",
                "return": "void",
                "args": [
                    "cstring",
                    "int"
                ]
            },
            "MinimapEvent": {
                "description": "Start a minimap event. (nTeamID, hEntity, nXCoord, nYCoord, nEventType, nEventDuration).",
                "return": "void",
                "args": [
                    "int",
                    "handle",
                    "int",
                    "int",
                    "int",
                    "int"
                ]
            },
            "SendFrostyPointsMessageToGC": {
                "return": "void",
                "args": [
                    "handle"
                ]
            },
            "GetFrostyPointsForRound": {
                "return": "int",
                "args": [
                    "int",
                    "int",
                    "int"
                ]
            },
            "LimitPathingSearchDepth": {
                "description": "Set the limit on the pathfinding search space.",
                "return": "void",
                "args": [
                    "float"
                ]
            },
            "ApplyDamage": {
                "description": "Damage an npc.",
                "return": "float",
                "args": [
                    "handle"
                ]
            },
            "GetEntityIndexForTreeId": {
                "description": "Get the enity index for a tree id specified as the entindex_target of a DOTA_UNIT_ORDER_CAST_TARGET_TREE.",
                "return": "<unknown>",
                "args": [
                    "uint"
                ]
            },
            "GetTreeIdForEntityIndex": {
                "description": "Given and entity index of a tree, get the tree id for use for use with with unit orders.",
                "return": "int",
                "args": [
                    "int"
                ]
            },
            "SendOverheadEventMessage": {
                "description": "( DOTAPlayer sendToPlayer, int iMessageType, Entity targetEntity, int iValue, DOTAPlayer sourcePlayer ) - sendToPlayer and sourcePlayer can be nil - iMessageType is one of OVERHEAD_ALERT_*",
                "return": "void",
                "args": [
                    "handle",
                    "int",
                    "handle",
                    "int",
                    "handle"
                ]
            },
            "UnitFilter": {
                "description": "Check if a unit passes a set of filters. (hNPC, nTargetTeam, nTargetType, nTargetFlags, nTeam",
                "return": "int",
                "args": [
                    "handle",
                    "int",
                    "int",
                    "int",
                    "int"
                ]
            }
        }
    }
}